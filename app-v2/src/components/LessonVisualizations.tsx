import React, { useRef, useEffect, useState, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import * as THREE from 'three'
// @ts-ignore
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
import { exportToCSV, exportToDOCX, exportToPDF } from '../utils/exportUtils'

// Lightweight helpers
function download(filename: string, content: string, type = 'text/plain') {
  const blob = new Blob([content], { type })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  a.remove()
  URL.revokeObjectURL(url)
}

// Shared UI shell for simplicity
function SectionHeader({ title, subtitle }: { title: string; subtitle?: string }) {
  return (
    <div style={{ marginBottom: 16 }}>
      <h3 style={{ color: '#e6eef8', margin: 0 }}>{title}</h3>
      {subtitle && <div style={{ color: '#94a3b8', fontSize: 13, marginTop: 4 }}>{subtitle}</div>}
    </div>
  )
}

// ============================================
// Lesson 122 – Temperature & Humidity NEW VISUALIZATIONS
// ============================================

/**
 * 1. PSYCHROMETRIC CHART SIMULATOR
 * Interactive psychrometric diagram with real-time parameter display
 */
export function PsychrometricChartSimulator() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [temp, setTemp] = useState(21) // Dry bulb temperature (°C)
  const [rh, setRh] = useState(50) // Relative humidity (%)
  const [selectedProcess, setSelectedProcess] = useState<string | null>(null)
  const [selectedSeason, setSelectedSeason] = useState<string | null>(null)
  
  // Saved measurement points
  interface MeasurementPoint {
    id: string;
    temp: number;
    rh: number;
    label: string;
    color: string;
    timestamp: Date;
  }
  const [savedPoints, setSavedPoints] = useState<MeasurementPoint[]>([]);
  const [pointLabel, setPointLabel] = useState('');
  const STORAGE_KEY = 'psychrometric_saved_points_v1';

  // Load saved points from localStorage on mount
  useEffect(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        const parsed = JSON.parse(raw) as Array<Omit<MeasurementPoint, 'timestamp'> & { timestamp: string }>;
        const restored: MeasurementPoint[] = parsed.map(p => ({
          ...p,
          timestamp: new Date(p.timestamp)
        }));
        setSavedPoints(restored);
      }
    } catch (e) {
      // ignore malformed storage
      console.warn('Neuspešno branje shranjenih točk iz localStorage:', e);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Persist saved points to localStorage whenever they change
  useEffect(() => {
    try {
      const serializable = savedPoints.map(p => ({ ...p, timestamp: p.timestamp.toISOString() }));
      localStorage.setItem(STORAGE_KEY, JSON.stringify(serializable));
    } catch (e) {
      console.warn('Neuspešno shranjevanje točk v localStorage:', e);
    }
  }, [savedPoints]);
  
  // Seasonal presets (typical outdoor conditions in Slovenia)
  const seasonalPresets = {
    poletje: { temp: 32, rh: 70, label: '☀️ Poletje', outdoor: true, color: '#ef4444' },
    zima: { temp: -2, rh: 80, label: '❄️ Zima', outdoor: true, color: '#3b82f6' },
    pomlad: { temp: 15, rh: 60, label: '🌸 Pomlad', outdoor: true, color: '#22c55e' },
    jesen: { temp: 12, rh: 75, label: '🍂 Jesen', outdoor: true, color: '#f97316' },
    optimalno: { temp: 21, rh: 50, label: '✓ Optimalno (Cilj)', outdoor: false, color: '#10b981' }
  }
  
  // Calculate psychrometric properties
  const dewPoint = useMemo(() => {
    // Simplified Magnus-Tetens formula
    const a = 17.27
    const b = 237.7
    const alpha = ((a * temp) / (b + temp)) + Math.log(rh / 100)
    return (b * alpha) / (a - alpha)
  }, [temp, rh])
  
  const wetBulb = useMemo(() => {
    // Simplified wet bulb calculation
    return temp * Math.atan(0.151977 * Math.sqrt(rh + 8.313659)) + 
           Math.atan(temp + rh) - Math.atan(rh - 1.676331) + 
           0.00391838 * Math.pow(rh, 1.5) * Math.atan(0.023101 * rh) - 4.686035
  }, [temp, rh])
  
  const specificHumidity = useMemo(() => {
    // g/kg dry air
    const psat = 610.78 * Math.exp((17.27 * temp) / (temp + 237.3))
    const pv = (rh / 100) * psat
    return 0.622 * pv / (101325 - pv) * 1000
  }, [temp, rh])
  
  const enthalpy = useMemo(() => {
    // kJ/kg
    return 1.006 * temp + specificHumidity / 1000 * (2501 + 1.86 * temp)
  }, [temp, specificHumidity])
  
  // Determine comfort zone
  const inComfortZone = temp >= 20 && temp <= 22 && rh >= 40 && rh <= 60
  const hasCondensationRisk = rh > 65
  const hasStaticRisk = rh < 35
  const hasMicrobeRisk = rh > 60 && temp > 25
  
  // Colors for saved points (cycle through these)
  const pointColors = ['#8b5cf6', '#ec4899', '#f59e0b', '#14b8a6', '#6366f1', '#f97316', '#06b6d4'];
  
  // Add current point to saved points
  const handleSavePoint = () => {
    const label = pointLabel.trim() || `Točka ${savedPoints.length + 1}`;
    const color = pointColors[savedPoints.length % pointColors.length];
    
    const newPoint: MeasurementPoint = {
      id: `point-${Date.now()}`,
      temp,
      rh,
      label,
      color,
      timestamp: new Date()
    };
    
    setSavedPoints([...savedPoints, newPoint]);
    setPointLabel(''); // Reset label input
  };
  
  // Remove a saved point
  const handleRemovePoint = (id: string) => {
    setSavedPoints(savedPoints.filter(p => p.id !== id));
  };
  
  // Clear all saved points
  const handleClearAllPoints = () => {
    setSavedPoints([]);
    try { localStorage.removeItem(STORAGE_KEY); } catch {}
  };
  
  // Load a saved point into current controls
  const handleLoadPoint = (point: MeasurementPoint) => {
    setTemp(point.temp);
    setRh(point.rh);
  };
  
  // Draw psychrometric chart
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    
    const width = canvas.width
    const height = canvas.height
    
    ctx.clearRect(0, 0, width, height)
    
    // Background
    ctx.fillStyle = 'rgba(15, 23, 42, 0.8)'
    ctx.fillRect(0, 0, width, height)
    
    // Grid and axes
    ctx.strokeStyle = 'rgba(148, 163, 184, 0.2)'
    ctx.lineWidth = 1
    
    // Temperature lines (vertical)
    for (let t = 15; t <= 30; t += 5) {
      const x = ((t - 15) / 15) * (width - 100) + 50
      ctx.beginPath()
      ctx.moveTo(x, 30)
      ctx.lineTo(x, height - 50)
      ctx.stroke()
      
      ctx.fillStyle = '#94a3b8'
      ctx.font = '12px sans-serif'
      ctx.fillText(`${t}°C`, x - 15, height - 30)
    }
    
    // RH curves
    ctx.strokeStyle = 'rgba(59, 130, 246, 0.4)'
    ctx.lineWidth = 2
    for (let rhLine = 10; rhLine <= 100; rhLine += 10) {
      ctx.beginPath()
      for (let t = 15; t <= 30; t += 0.5) {
        const x = ((t - 15) / 15) * (width - 100) + 50
        const psat = 610.78 * Math.exp((17.27 * t) / (t + 237.3))
        const pv = (rhLine / 100) * psat
        const w = 0.622 * pv / (101325 - pv) * 1000
        const y = height - 50 - (w / 20) * (height - 80)
        if (t === 15) ctx.moveTo(x, y)
        else ctx.lineTo(x, y)
      }
      ctx.stroke()
      
      // Label
      ctx.fillStyle = '#64748b'
      ctx.font = '11px sans-serif'
      const lastX = ((30 - 15) / 15) * (width - 100) + 50
      const psat30 = 610.78 * Math.exp((17.27 * 30) / (30 + 237.3))
      const pv30 = (rhLine / 100) * psat30
      const w30 = 0.622 * pv30 / (101325 - pv30) * 1000
      const lastY = height - 50 - (w30 / 20) * (height - 80)
      ctx.fillText(`${rhLine}%`, lastX + 5, lastY + 5)
    }
    
    // Comfort zone (green rectangle)
    ctx.fillStyle = 'rgba(34, 197, 94, 0.15)'
    ctx.strokeStyle = 'rgba(34, 197, 94, 0.5)'
    ctx.lineWidth = 2
    const x1 = ((20 - 15) / 15) * (width - 100) + 50
    const x2 = ((22 - 15) / 15) * (width - 100) + 50
    // Calculate y for 40% and 60% RH at 20°C
    const psat20 = 610.78 * Math.exp((17.27 * 20) / (20 + 237.3))
    const pv40 = (40 / 100) * psat20
    const w40 = 0.622 * pv40 / (101325 - pv40) * 1000
    const y1 = height - 50 - (w40 / 20) * (height - 80)
    const pv60 = (60 / 100) * psat20
    const w60 = 0.622 * pv60 / (101325 - pv60) * 1000
    const y2 = height - 50 - (w60 / 20) * (height - 80)
    ctx.fillRect(x1, y2, x2 - x1, y1 - y2)
    ctx.strokeRect(x1, y2, x2 - x1, y1 - y2)
    
    // Warning zones
    if (hasCondensationRisk) {
      ctx.fillStyle = 'rgba(239, 68, 68, 0.1)'
      const rhLine = 65
      ctx.beginPath()
      for (let t = 15; t <= 30; t += 0.5) {
        const x = ((t - 15) / 15) * (width - 100) + 50
        const psat = 610.78 * Math.exp((17.27 * t) / (t + 237.3))
        const pv = (rhLine / 100) * psat
        const w = 0.622 * pv / (101325 - pv) * 1000
        const y = height - 50 - (w / 20) * (height - 80)
        if (t === 15) ctx.moveTo(x, y)
        else ctx.lineTo(x, y)
      }
      ctx.lineTo(width - 50, 30)
      ctx.lineTo(50, 30)
      ctx.closePath()
      ctx.fill()
    }
    
    if (hasStaticRisk) {
      ctx.fillStyle = 'rgba(245, 158, 11, 0.1)'
      const rhLine = 35
      ctx.beginPath()
      for (let t = 15; t <= 30; t += 0.5) {
        const x = ((t - 15) / 15) * (width - 100) + 50
        const psat = 610.78 * Math.exp((17.27 * t) / (t + 237.3))
        const pv = (rhLine / 100) * psat
        const w = 0.622 * pv / (101325 - pv) * 1000
        const y = height - 50 - (w / 20) * (height - 80)
        if (t === 15) ctx.moveTo(x, y)
        else ctx.lineTo(x, y)
      }
      ctx.lineTo(width - 50, height - 50)
      ctx.lineTo(50, height - 50)
      ctx.closePath()
      ctx.fill()
    }
    
    // Seasonal comparison points (draw all seasons as small dots)
    Object.entries(seasonalPresets).forEach(([key, preset]) => {
      if (preset.temp < 15 || preset.temp > 30) return // Out of chart range
      
      const sx = ((preset.temp - 15) / 15) * (width - 100) + 50
      const psatS = 610.78 * Math.exp((17.27 * preset.temp) / (preset.temp + 237.3))
      const pvS = (preset.rh / 100) * psatS
      const wS = 0.622 * pvS / (101325 - pvS) * 1000
      const sy = height - 50 - (wS / 20) * (height - 80)
      
      // Draw small seasonal marker
      ctx.beginPath()
      ctx.arc(sx, sy, 5, 0, Math.PI * 2)
      ctx.fillStyle = preset.color + '88'
      ctx.fill()
      ctx.strokeStyle = preset.color
      ctx.lineWidth = 1.5
      ctx.stroke()
      
      // Label
      ctx.fillStyle = preset.color
      ctx.font = '11px sans-serif'
      ctx.fillText(preset.label.split(' ')[0], sx + 8, sy - 8)
    })
    
    // Draw saved measurement points
    savedPoints.forEach((point) => {
      const x = ((point.temp - 15) / 15) * (width - 100) + 50;
      const psat = 610.78 * Math.exp((17.27 * point.temp) / (point.temp + 237.3));
      const pv = (point.rh / 100) * psat;
      const w = 0.622 * pv / (101325 - pv) * 1000;
      const y = height - 50 - (w / 20) * (height - 80);
      
      // Draw point
      ctx.beginPath();
      ctx.arc(x, y, 8, 0, Math.PI * 2);
      ctx.fillStyle = point.color;
      ctx.fill();
      ctx.strokeStyle = '#fff';
      ctx.lineWidth = 2;
      ctx.stroke();
      
      // Draw label
      ctx.font = 'bold 11px sans-serif';
      ctx.fillStyle = point.color;
      ctx.textAlign = 'center';
      ctx.fillText(point.label, x, y - 15);
    });
    
    // Current point (larger, on top)
    const currX = ((temp - 15) / 15) * (width - 100) + 50
    const psatCurr = 610.78 * Math.exp((17.27 * temp) / (temp + 237.3))
    const pvCurr = (rh / 100) * psatCurr
    const wCurr = 0.622 * pvCurr / (101325 - pvCurr) * 1000
    const currY = height - 50 - (wCurr / 20) * (height - 80)
    
    ctx.beginPath()
    ctx.arc(currX, currY, 10, 0, Math.PI * 2)
    ctx.fillStyle = inComfortZone ? '#22c55e' : hasCondensationRisk ? '#ef4444' : hasStaticRisk ? '#f59e0b' : '#3b82f6'
    ctx.fill()
    ctx.strokeStyle = '#fff'
    ctx.lineWidth = 3
    ctx.stroke()
    
    // Pulsing ring for selected season
    if (selectedSeason) {
      ctx.beginPath()
      ctx.arc(currX, currY, 18, 0, Math.PI * 2)
      ctx.strokeStyle = inComfortZone ? '#22c55e' : hasCondensationRisk ? '#ef4444' : hasStaticRisk ? '#f59e0b' : '#3b82f6'
      ctx.lineWidth = 2
      ctx.stroke()
    }
    
    // HVAC process arrows (if process selected)
    if (selectedProcess) {
      ctx.strokeStyle = '#a78bfa'
      ctx.lineWidth = 3
      ctx.setLineDash([5, 5])
      
      if (selectedProcess === 'cooling-dehumid') {
        // Summer: cooling + dehumidification (move down-left)
        const startX = ((30 - 15) / 15) * (width - 100) + 50
        const psatStart = 610.78 * Math.exp((17.27 * 30) / (30 + 237.3))
        const pvStart = (0.75 * psatStart)
        const wStart = 0.622 * pvStart / (101325 - pvStart) * 1000
        const startY = height - 50 - (wStart / 20) * (height - 80)
        
        ctx.beginPath()
        ctx.moveTo(startX, startY)
        ctx.lineTo(currX, currY)
        ctx.stroke()
        
        // Arrow head
        ctx.setLineDash([])
        const angle = Math.atan2(currY - startY, currX - startX)
        ctx.beginPath()
        ctx.moveTo(currX, currY)
        ctx.lineTo(currX - 15 * Math.cos(angle - Math.PI / 6), currY - 15 * Math.sin(angle - Math.PI / 6))
        ctx.moveTo(currX, currY)
        ctx.lineTo(currX - 15 * Math.cos(angle + Math.PI / 6), currY - 15 * Math.sin(angle + Math.PI / 6))
        ctx.stroke()
      } else if (selectedProcess === 'heating-humid') {
        // Winter: heating + humidification (move up-right)
        const startX = ((15 - 15) / 15) * (width - 100) + 50
        const psatStart = 610.78 * Math.exp((17.27 * 15) / (15 + 237.3))
        const pvStart = (0.40 * psatStart)
        const wStart = 0.622 * pvStart / (101325 - pvStart) * 1000
        const startY = height - 50 - (wStart / 20) * (height - 80)
        
        ctx.beginPath()
        ctx.moveTo(startX, startY)
        ctx.lineTo(currX, currY)
        ctx.stroke()
        
        // Arrow head
        ctx.setLineDash([])
        const angle = Math.atan2(currY - startY, currX - startX)
        ctx.beginPath()
        ctx.moveTo(currX, currY)
        ctx.lineTo(currX - 15 * Math.cos(angle - Math.PI / 6), currY - 15 * Math.sin(angle - Math.PI / 6))
        ctx.moveTo(currX, currY)
        ctx.lineTo(currX - 15 * Math.cos(angle + Math.PI / 6), currY - 15 * Math.sin(angle + Math.PI / 6))
        ctx.stroke()
      }
      
      ctx.setLineDash([])
    }
    
    // Axes labels
    ctx.fillStyle = '#e2e8f0'
    ctx.font = 'bold 14px sans-serif'
    ctx.fillText('Temperatura (°C)', width / 2 - 60, height - 10)
    ctx.save()
    ctx.translate(15, height / 2)
    ctx.rotate(-Math.PI / 2)
    ctx.fillText('Specifična Vlažnost (g/kg)', -80, 0)
    ctx.restore()
    
  }, [temp, rh, selectedProcess, selectedSeason, inComfortZone, hasCondensationRisk, hasStaticRisk, savedPoints])
  
  // Export functions
  const handleExportCSV = () => {
    const data = [
      ['TRENUTNA TOČKA', '', ''],
      ['Parameter', 'Vrednost', 'Enota'],
      ['Temperatura (suhi termometer)', temp.toFixed(2), '°C'],
      ['Relativna Vlažnost', rh.toFixed(2), '%'],
      ['Rosišče', dewPoint.toFixed(2), '°C'],
      ['Mokri Termometer', wetBulb.toFixed(2), '°C'],
      ['Specifična Vlažnost', specificHumidity.toFixed(2), 'g/kg'],
      ['Entalpija', enthalpy.toFixed(2), 'kJ/kg'],
      ['', '', ''],
      ['Status', 'Vrednost', ''],
      ['V coni udobja', inComfortZone ? 'DA' : 'NE', ''],
      ['Tveganje kondenzacije', hasCondensationRisk ? 'DA' : 'NE', ''],
      ['Tveganje statične elektrike', hasStaticRisk ? 'DA' : 'NE', ''],
      ['Tveganje mikrobiološke rasti', hasMicrobeRisk ? 'DA' : 'NE', '']
    ];
    
    // Add saved points if any
    if (savedPoints.length > 0) {
      data.push(['', '', '']);
      data.push(['SHRANJENE MERILNE TOČKE', '', '']);
      data.push(['Oznaka', 'Temperatura (°C)', 'Relativna Vlažnost (%)']);
      savedPoints.forEach(point => {
        data.push([point.label, point.temp.toFixed(2), point.rh.toFixed(2)]);
      });
    }
    
    exportToCSV('psihrometrija', data)
  }
  
  const handleExportDOCX = async () => {
    const sections: Array<{ heading: string; paragraphs?: string[]; table?: { headers: string[]; rows: string[][] } }> = [
      {
        heading: 'Izmerjeni Parametri',
        paragraphs: [
          `Temperatura (suhi termometer): ${temp.toFixed(2)} °C`,
          `Relativna Vlažnost: ${rh.toFixed(2)} %`,
          `Rosišče: ${dewPoint.toFixed(2)} °C`,
          `Mokri Termometer: ${wetBulb.toFixed(2)} °C`,
          `Specifična Vlažnost: ${specificHumidity.toFixed(2)} g/kg`,
          `Entalpija: ${enthalpy.toFixed(2)} kJ/kg`
        ]
      },
      {
        heading: 'Analiza Stanja',
        paragraphs: [
          `V coni udobja (20-22°C, 40-60% RH): ${inComfortZone ? '✓ DA' : '✗ NE'}`,
          `Tveganje kondenzacije (RH > 65%): ${hasCondensationRisk ? '⚠ DA' : '✓ NE'}`,
          `Tveganje statične elektrike (RH < 35%): ${hasStaticRisk ? '⚠ DA' : '✓ NE'}`,
          `Tveganje mikrobiološke rasti (RH > 60%, T > 25°C): ${hasMicrobeRisk ? '⚠ DA' : '✓ NE'}`
        ]
      },
      {
        heading: 'Priporočila',
        paragraphs: inComfortZone 
          ? ['Pogoji so optimalni. Nadaljujte z rednim spremljanjem.']
          : hasCondensationRisk 
            ? ['Zmanjšajte relativno vlažnost z razvlaževanjem.', 'Preverite izolacijo hladnih površin.']
            : hasStaticRisk
              ? ['Povečajte relativno vlažnost z ovlaževanjem.', 'Preverite antistatične ukrepe.']
              : ['Prilagodite temperaturo in/ali vlažnost v optimalno območje.']
      }
    ];
    
    // Add saved points section if any exist
    if (savedPoints.length > 0) {
      sections.push({
        heading: 'Shranjene Merilne Točke',
        table: {
          headers: ['Oznaka', 'Temperatura (°C)', 'Relativna Vlažnost (%)'],
          rows: savedPoints.map(p => [p.label, p.temp.toFixed(2), p.rh.toFixed(2)])
        }
      });
    }
    
    await exportToDOCX('psihrometrija', {
      title: 'Psihrometrični Diagram - Analiza',
      subtitle: `Datum: ${new Date().toLocaleString('sl-SI')}`,
      sections
    })
  }
  
  const handleExportPDF = () => {
    const sections = [
      {
        heading: 'Izmerjeni Parametri',
        paragraphs: [
          `Temperatura (suhi termometer): ${temp.toFixed(2)} °C`,
          `Relativna Vlažnost: ${rh.toFixed(2)} %`,
          `Rosišče: ${dewPoint.toFixed(2)} °C`,
          `Mokri Termometer: ${wetBulb.toFixed(2)} °C`,
          `Specifična Vlažnost: ${specificHumidity.toFixed(2)} g/kg`,
          `Entalpija: ${enthalpy.toFixed(2)} kJ/kg`
        ]
      },
      {
        heading: 'Analiza Stanja',
        paragraphs: [
          `V coni udobja (20-22°C, 40-60% RH): ${inComfortZone ? '✓ DA' : '✗ NE'}`,
          `Tveganje kondenzacije (RH > 65%): ${hasCondensationRisk ? '⚠ DA' : '✓ NE'}`,
          `Tveganje statične elektrike (RH < 35%): ${hasStaticRisk ? '⚠ DA' : '✓ NE'}`,
          `Tveganje mikrobiološke rasti (RH > 60%, T > 25°C): ${hasMicrobeRisk ? '⚠ DA' : '✓ NE'}`
        ]
      },
      {
        heading: 'Priporočila',
        paragraphs: inComfortZone 
          ? ['Pogoji so optimalni. Nadaljujte z rednim spremljanjem.']
          : hasCondensationRisk 
            ? ['Zmanjšajte relativno vlažnost z razvlaževanjem.', 'Preverite izolacijo hladnih površin.']
            : hasStaticRisk
              ? ['Povečajte relativno vlažnost z ovlaževanjem.', 'Preverite antistatične ukrepe.']
              : ['Prilagodite temperaturo in/ali vlažnost v optimalno območje.']
      }
    ];
    
    // Add saved points section if any exist
    if (savedPoints.length > 0) {
      sections.push({
        heading: 'Shranjene Merilne Točke',
        paragraphs: savedPoints.map(p => `${p.label}: ${p.temp.toFixed(2)}°C, ${p.rh}% RH`)
      });
    }
    
    exportToPDF('psihrometrija', {
      title: 'Psihrometrični Diagram - Analiza',
      subtitle: `Datum: ${new Date().toLocaleString('sl-SI')}`,
      sections
    })
  }
  
  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, rgba(15,23,42,0.95), rgba(30,41,59,0.95))', borderRadius: 16, border: '1px solid rgba(148,163,184,0.2)' }}>
      <div style={{ marginBottom: 20 }}>
        <h3 style={{ margin: 0, color: '#e2e8f0', fontSize: 22, fontWeight: 700 }}>
          🌡️ Psihrometrični Diagram Simulator
        </h3>
        <p style={{ margin: '8px 0 0 0', color: '#94a3b8', fontSize: 14 }}>
          Interaktivni psihrometrični diagram za HVAC analizo
        </p>
      </div>
      
      {/* Canvas */}
      <div style={{ marginBottom: 24, background: 'rgba(0,0,0,0.3)', borderRadius: 12, padding: 16 }}>
        <canvas 
          ref={canvasRef} 
          width={800} 
          height={500}
          style={{ width: '100%', height: 'auto', display: 'block', borderRadius: 8 }}
        />
      </div>
      
      {/* Controls */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20, marginBottom: 24 }}>
        <div>
          <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 8, fontWeight: 600 }}>
            Temperatura: {temp.toFixed(1)}°C
          </label>
          <input 
            type="range" 
            min="15" 
            max="30" 
            step="0.1" 
            value={temp}
            onChange={(e) => setTemp(parseFloat(e.target.value))}
            style={{ width: '100%' }}
          />
        </div>
        
        <div>
          <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 8, fontWeight: 600 }}>
            Relativna Vlažnost: {rh.toFixed(1)}%
          </label>
          <input 
            type="range" 
            min="10" 
            max="90" 
            step="1" 
            value={rh}
            onChange={(e) => setRh(parseFloat(e.target.value))}
            style={{ width: '100%' }}
          />
        </div>
      </div>
      
      {/* Seasonal Comparison */}
      <div style={{ marginBottom: 24 }}>
        <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 12, fontWeight: 600 }}>
          🌍 Primerjava Letnih Časov (Zunanje Razmere):
        </label>
        <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
          {Object.entries(seasonalPresets).map(([key, preset]) => (
            <motion.button
              key={key}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => {
                setTemp(preset.temp)
                setRh(preset.rh)
                setSelectedSeason(key)
                setTimeout(() => setSelectedSeason(null), 2000)
              }}
              style={{
                padding: '10px 16px',
                background: selectedSeason === key 
                  ? `linear-gradient(135deg, ${preset.color}, ${preset.color}dd)` 
                  : `${preset.color}22`,
                border: `2px solid ${selectedSeason === key ? preset.color : `${preset.color}66`}`,
                borderRadius: 10,
                color: '#e2e8f0',
                cursor: 'pointer',
                fontSize: 13,
                fontWeight: 600,
                transition: 'all 0.2s',
                boxShadow: selectedSeason === key ? `0 4px 12px ${preset.color}44` : 'none'
              }}
            >
              {preset.label}
              <div style={{ fontSize: 10, opacity: 0.8, marginTop: 4 }}>
                {preset.temp}°C, {preset.rh}% RH
              </div>
            </motion.button>
          ))}
        </div>
        <div style={{
          marginTop: 12,
          padding: 12,
          background: 'rgba(59, 130, 246, 0.1)',
          border: '1px solid rgba(59, 130, 246, 0.3)',
          borderRadius: 8,
          fontSize: 13,
          color: '#94a3b8'
        }}>
          💡 <strong>Insight:</strong> Primerjaj zunanje pogoje z optimalno cono. 
          HVAC sistem mora premagati razliko med zunanjimi in notranjimi pogoji!
        </div>
      </div>
      
      {/* Save Measurement Points */}
      <div style={{ marginBottom: 24, padding: 20, background: 'rgba(139, 92, 246, 0.1)', border: '2px solid rgba(139, 92, 246, 0.3)', borderRadius: 12 }}>
        <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 12, fontWeight: 600 }}>
          📍 Shrani Merilno Točko
        </label>
        <div style={{ display: 'flex', gap: 12, marginBottom: 16 }}>
          <input
            type="text"
            placeholder="Oznaka točke (npr. 'Prostor A', 'Jutro')"
            value={pointLabel}
            onChange={(e) => setPointLabel(e.target.value)}
            style={{
              flex: 1,
              padding: '10px 14px',
              background: 'rgba(30, 41, 59, 0.8)',
              border: '1px solid rgba(139, 92, 246, 0.4)',
              borderRadius: 8,
              color: '#e2e8f0',
              fontSize: 14
            }}
          />
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleSavePoint}
            style={{
              padding: '10px 20px',
              background: 'linear-gradient(135deg, #8b5cf6, #7c3aed)',
              border: 'none',
              borderRadius: 8,
              color: '#fff',
              cursor: 'pointer',
              fontSize: 14,
              fontWeight: 600,
              boxShadow: '0 4px 12px rgba(139, 92, 246, 0.3)'
            }}
          >
            ➕ Shrani ({temp.toFixed(1)}°C, {rh}%)
          </motion.button>
        </div>
        
        {/* Saved Points List */}
        {savedPoints.length > 0 && (
          <div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
              <span style={{ color: '#94a3b8', fontSize: 13, fontWeight: 600 }}>
                Shranjene točke ({savedPoints.length}):
              </span>
              <button
                onClick={handleClearAllPoints}
                style={{
                  padding: '6px 12px',
                  background: 'rgba(239, 68, 68, 0.2)',
                  border: '1px solid rgba(239, 68, 68, 0.4)',
                  borderRadius: 6,
                  color: '#f87171',
                  cursor: 'pointer',
                  fontSize: 12,
                  fontWeight: 600
                }}
              >
                🗑️ Pobriši vse
              </button>
            </div>
            <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
              {savedPoints.map((point) => (
                <div
                  key={point.id}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    padding: '10px 14px',
                    background: 'rgba(30, 41, 59, 0.6)',
                    border: `2px solid ${point.color}44`,
                    borderRadius: 8
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                    <div
                      style={{
                        width: 16,
                        height: 16,
                        borderRadius: '50%',
                        background: point.color,
                        border: '2px solid #fff'
                      }}
                    />
                    <div>
                      <div style={{ color: '#e2e8f0', fontSize: 14, fontWeight: 600 }}>
                        {point.label}
                      </div>
                      <div style={{ color: '#94a3b8', fontSize: 12 }}>
                        {point.temp.toFixed(1)}°C, {point.rh}% RH
                      </div>
                    </div>
                  </div>
                  <div style={{ display: 'flex', gap: 8 }}>
                    <button
                      onClick={() => handleLoadPoint(point)}
                      style={{
                        padding: '6px 12px',
                        background: 'rgba(59, 130, 246, 0.2)',
                        border: '1px solid rgba(59, 130, 246, 0.4)',
                        borderRadius: 6,
                        color: '#60a5fa',
                        cursor: 'pointer',
                        fontSize: 12,
                        fontWeight: 600
                      }}
                    >
                      📥 Naloži
                    </button>
                    <button
                      onClick={() => handleRemovePoint(point.id)}
                      style={{
                        padding: '6px 12px',
                        background: 'rgba(239, 68, 68, 0.2)',
                        border: '1px solid rgba(239, 68, 68, 0.4)',
                        borderRadius: 6,
                        color: '#f87171',
                        cursor: 'pointer',
                        fontSize: 12,
                        fontWeight: 600
                      }}
                    >
                      ✕
                    </button>
                  </div>
                </div>
              ))}
            </div>
            <div style={{
              marginTop: 12,
              padding: 10,
              background: 'rgba(59, 130, 246, 0.1)',
              border: '1px solid rgba(59, 130, 246, 0.3)',
              borderRadius: 6,
              fontSize: 12,
              color: '#94a3b8'
            }}>
              💡 Shranjene točke so vidne na diagramu. Uporabno za primerjavo več lokacij ali časovnih obdobij.
            </div>
          </div>
        )}
      </div>
      
      {/* HVAC Process Selector */}
      <div style={{ marginBottom: 24 }}>
        <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 12, fontWeight: 600 }}>
          🔄 HVAC Procesi:
        </label>
        <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
          <button
            onClick={() => setSelectedProcess(selectedProcess === 'cooling-dehumid' ? null : 'cooling-dehumid')}
            style={{
              padding: '10px 16px',
              background: selectedProcess === 'cooling-dehumid' ? 'linear-gradient(135deg, #3b82f6, #2563eb)' : 'rgba(59, 130, 246, 0.1)',
              border: `1px solid ${selectedProcess === 'cooling-dehumid' ? '#3b82f6' : 'rgba(59, 130, 246, 0.3)'}`,
              borderRadius: 8,
              color: '#e2e8f0',
              cursor: 'pointer',
              fontSize: 13,
              fontWeight: 600,
              transition: 'all 0.2s'
            }}
          >
            ❄️ Hlajenje + Razvlaževanje (Poletje)
          </button>
          <button
            onClick={() => setSelectedProcess(selectedProcess === 'heating-humid' ? null : 'heating-humid')}
            style={{
              padding: '10px 16px',
              background: selectedProcess === 'heating-humid' ? 'linear-gradient(135deg, #ef4444, #dc2626)' : 'rgba(239, 68, 68, 0.1)',
              border: `1px solid ${selectedProcess === 'heating-humid' ? '#ef4444' : 'rgba(239, 68, 68, 0.3)'}`,
              borderRadius: 8,
              color: '#e2e8f0',
              cursor: 'pointer',
              fontSize: 13,
              fontWeight: 600,
              transition: 'all 0.2s'
            }}
          >
            🔥 Ogrevanje + Ovlaževanje (Zima)
          </button>
        </div>
      </div>
      
      {/* Parameters Display */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 16, marginBottom: 24 }}>
        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(37, 99, 235, 0.15))',
            padding: 16,
            borderRadius: 10,
            border: '1px solid rgba(59, 130, 246, 0.3)'
          }}
        >
          <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Rosišče</div>
          <div style={{ fontSize: 24, fontWeight: 700, color: '#60a5fa' }}>{dewPoint.toFixed(1)}°C</div>
        </motion.div>
        
        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.15), rgba(8, 145, 178, 0.15))',
            padding: 16,
            borderRadius: 10,
            border: '1px solid rgba(6, 182, 212, 0.3)'
          }}
        >
          <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Mokri Termometer</div>
          <div style={{ fontSize: 24, fontWeight: 700, color: '#22d3ee' }}>{wetBulb.toFixed(1)}°C</div>
        </motion.div>
        
        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            background: 'linear-gradient(135deg, rgba(168, 85, 247, 0.15), rgba(147, 51, 234, 0.15))',
            padding: 16,
            borderRadius: 10,
            border: '1px solid rgba(168, 85, 247, 0.3)'
          }}
        >
          <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Specifična Vlažnost</div>
          <div style={{ fontSize: 24, fontWeight: 700, color: '#c084fc' }}>{specificHumidity.toFixed(2)} g/kg</div>
        </motion.div>
        
        <motion.div
          whileHover={{ scale: 1.02 }}
          style={{
            background: 'linear-gradient(135deg, rgba(34, 197, 94, 0.15), rgba(22, 163, 74, 0.15))',
            padding: 16,
            borderRadius: 10,
            border: '1px solid rgba(34, 197, 94, 0.3)'
          }}
        >
          <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Entalpija</div>
          <div style={{ fontSize: 24, fontWeight: 700, color: '#4ade80' }}>{enthalpy.toFixed(2)} kJ/kg</div>
        </motion.div>
      </div>
      
      {/* Status Alerts */}
      <div style={{ display: 'flex', flexDirection: 'column', gap: 12, marginBottom: 24 }}>
        {inComfortZone && (
          <div style={{
            padding: 12,
            background: 'rgba(34, 197, 94, 0.15)',
            border: '1px solid rgba(34, 197, 94, 0.4)',
            borderRadius: 8,
            color: '#86efac',
            fontSize: 14
          }}>
            ✅ <strong>Optimalni pogoji:</strong> Temperatura in vlažnost sta v priporočenem območju (20-22°C, 40-60% RH)
          </div>
        )}
        
        {hasCondensationRisk && (
          <div style={{
            padding: 12,
            background: 'rgba(239, 68, 68, 0.15)',
            border: '1px solid rgba(239, 68, 68, 0.4)',
            borderRadius: 8,
            color: '#fca5a5',
            fontSize: 14
          }}>
            ⚠️ <strong>Tveganje kondenzacije:</strong> Relativna vlažnost je previsoka (nad 65%). Preverite hladne površine!
          </div>
        )}
        
        {hasStaticRisk && (
          <div style={{
            padding: 12,
            background: 'rgba(245, 158, 11, 0.15)',
            border: '1px solid rgba(245, 158, 11, 0.4)',
            borderRadius: 8,
            color: '#fde68a',
            fontSize: 14
          }}>
            ⚡ <strong>Tveganje statične elektrike:</strong> Relativna vlažnost je prenizka (pod 35%). Povečajte ovlaževanje!
          </div>
        )}
        
        {hasMicrobeRisk && (
          <div style={{
            padding: 12,
            background: 'rgba(168, 85, 247, 0.15)',
            border: '1px solid rgba(168, 85, 247, 0.4)',
            borderRadius: 8,
            color: '#e9d5ff',
            fontSize: 14
          }}>
            🦠 <strong>Tveganje mikrobiološke rasti:</strong> Visoka temperatura in vlažnost. Okrepite nadzor čistosti!
          </div>
        )}
      </div>
      
      {/* Export Buttons */}
      <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
        <button
          onClick={handleExportCSV}
          style={{
            padding: '12px 20px',
            background: 'linear-gradient(135deg, #22c55e, #16a34a)',
            border: 'none',
            borderRadius: 8,
            color: 'white',
            cursor: 'pointer',
            fontSize: 14,
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 12px rgba(34, 197, 94, 0.3)',
            transition: 'all 0.2s'
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
        >
          📊 Izvozi CSV
        </button>
        
        <button
          onClick={handleExportDOCX}
          style={{
            padding: '12px 20px',
            background: 'linear-gradient(135deg, #3b82f6, #2563eb)',
            border: 'none',
            borderRadius: 8,
            color: 'white',
            cursor: 'pointer',
            fontSize: 14,
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)',
            transition: 'all 0.2s'
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
        >
          📄 Izvozi DOCX
        </button>
        
        <button
          onClick={handleExportPDF}
          style={{
            padding: '12px 20px',
            background: 'linear-gradient(135deg, #ef4444, #dc2626)',
            border: 'none',
            borderRadius: 8,
            color: 'white',
            cursor: 'pointer',
            fontSize: 14,
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 12px rgba(239, 68, 68, 0.3)',
            transition: 'all 0.2s'
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
        >
          📑 Izvozi PDF
        </button>
      </div>
    </div>
  )
}

/**
 * 2. CONDENSATION RISK CALCULATOR
 * 3D cleanroom with temperature/humidity controls and condensation visualization
 */
export function CondensationRiskCalculator() {
  const mountRef = useRef<HTMLDivElement>(null)
  const sceneRef = useRef<THREE.Scene | null>(null)
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null)
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null)
  const [roomTemp, setRoomTemp] = useState(21) // °C
  const [roomRH, setRoomRH] = useState(50) // %
  const [coldPipeTemp, setColdPipeTemp] = useState(15) // °C (cold water pipe)
  const [outsideTemp, setOutsideTemp] = useState(5) // °C (affects walls)
  const [condensationPoints, setCondensationPoints] = useState<Array<{name: string, risk: boolean, temp: number, dewPoint: number}>>([])
  
  // Calculate dew point for room conditions
  const roomDewPoint = useMemo(() => {
    const a = 17.27
    const b = 237.7
    const alpha = ((a * roomTemp) / (b + roomTemp)) + Math.log(roomRH / 100)
    return (b * alpha) / (a - alpha)
  }, [roomTemp, roomRH])
  
  // Check condensation risk on surfaces
  useEffect(() => {
    const points = [
      { name: 'Hladna Cev (voda)', temp: coldPipeTemp, critical: true },
      { name: 'Stena (zunanja)', temp: outsideTemp + 8, critical: false }, // Wall temp is warmer than outside
      { name: 'HEPA Filter', temp: roomTemp - 2, critical: false },
      { name: 'Delovna Površina', temp: roomTemp - 1, critical: true },
      { name: 'Kanal (dovod)', temp: roomTemp - 3, critical: false }
    ]
    
    const analysis = points.map(pt => ({
      name: pt.name,
      risk: pt.temp < roomDewPoint,
      temp: pt.temp,
      dewPoint: roomDewPoint,
      critical: pt.critical
    }))
    
    setCondensationPoints(analysis)
  }, [roomTemp, roomRH, coldPipeTemp, outsideTemp, roomDewPoint])
  
  // 3D Scene setup
  useEffect(() => {
    if (!mountRef.current) return
    
    const width = mountRef.current.clientWidth
    const height = 500
    
    // Scene
    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x0f172a)
    sceneRef.current = scene
    
    // Camera
    const camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 1000)
    camera.position.set(8, 6, 8)
    camera.lookAt(0, 0, 0)
    cameraRef.current = camera
    
    // Renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true })
    renderer.setSize(width, height)
    renderer.shadowMap.enabled = true
    mountRef.current.appendChild(renderer.domElement)
    rendererRef.current = renderer
    
    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6)
    scene.add(ambientLight)
    
    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)
    directionalLight.position.set(5, 10, 5)
    directionalLight.castShadow = true
    scene.add(directionalLight)
    
    // Room (walls, floor, ceiling)
    const wallMaterial = new THREE.MeshPhongMaterial({ 
      color: 0x1e293b, 
      transparent: true, 
      opacity: 0.3,
      side: THREE.DoubleSide
    })
    
    // Floor
    const floor = new THREE.Mesh(
      new THREE.PlaneGeometry(10, 10),
      new THREE.MeshPhongMaterial({ color: 0x475569 })
    )
    floor.rotation.x = -Math.PI / 2
    floor.receiveShadow = true
    scene.add(floor)
    
    // Walls (4 sides)
    const wallHeight = 5
    const wallGeometry = new THREE.PlaneGeometry(10, wallHeight)
    
    // Back wall
    const backWall = new THREE.Mesh(wallGeometry, wallMaterial)
    backWall.position.set(0, wallHeight / 2, -5)
    scene.add(backWall)
    
    // Left wall
    const leftWall = new THREE.Mesh(wallGeometry, wallMaterial)
    leftWall.position.set(-5, wallHeight / 2, 0)
    leftWall.rotation.y = Math.PI / 2
    scene.add(leftWall)
    
    // Right wall  
    const rightWall = new THREE.Mesh(wallGeometry, wallMaterial)
    rightWall.position.set(5, wallHeight / 2, 0)
    rightWall.rotation.y = -Math.PI / 2
    scene.add(rightWall)
    
    // Ceiling
    const ceiling = new THREE.Mesh(
      new THREE.PlaneGeometry(10, 10),
      wallMaterial
    )
    ceiling.position.y = wallHeight
    ceiling.rotation.x = Math.PI / 2
    scene.add(ceiling)
    
    // Cold pipe (horizontal, blue)
  const coldPipe = new THREE.Mesh(
      new THREE.CylinderGeometry(0.2, 0.2, 8, 16),
      new THREE.MeshPhongMaterial({ color: 0x3b82f6 })
    )
    coldPipe.rotation.z = Math.PI / 2
    coldPipe.position.set(0, 3, -3)
    coldPipe.castShadow = true
  ;(coldPipe as any).userData = { name: 'coldPipe' }
    scene.add(coldPipe)
    
    // Hot pipe (horizontal, red)
    const hotPipe = new THREE.Mesh(
      new THREE.CylinderGeometry(0.15, 0.15, 6, 16),
      new THREE.MeshPhongMaterial({ color: 0xef4444 })
    )
    hotPipe.rotation.z = Math.PI / 2
    hotPipe.position.set(0, 4, -3)
    hotPipe.castShadow = true
    scene.add(hotPipe)
    
    // Work surface (table)
    const workSurface = new THREE.Mesh(
      new THREE.BoxGeometry(4, 0.1, 2),
      new THREE.MeshPhongMaterial({ color: 0x64748b })
    )
    workSurface.position.set(0, 1, 0)
    workSurface.castShadow = true
    workSurface.receiveShadow = true
  ;(workSurface as any).userData = { name: 'workSurface' }
    scene.add(workSurface)
    
    // HEPA filter (ceiling mounted)
    const hepaFilter = new THREE.Mesh(
      new THREE.BoxGeometry(2, 0.3, 2),
      new THREE.MeshPhongMaterial({ color: 0x94a3b8 })
    )
    hepaFilter.position.set(0, wallHeight - 0.3, 0)
  ;(hepaFilter as any).userData = { name: 'hepaFilter' }
    scene.add(hepaFilter)
    
    // Air duct
    const airDuct = new THREE.Mesh(
      new THREE.CylinderGeometry(0.3, 0.3, 3, 16),
      new THREE.MeshPhongMaterial({ color: 0x475569 })
    )
    airDuct.position.set(-3, 3.5, 0)
  ;(airDuct as any).userData = { name: 'airDuct' }
    scene.add(airDuct)
    
    // OrbitControls
    // @ts-ignore
    const controls = new OrbitControls(camera, renderer.domElement)
    controls.enableDamping = true
    controls.dampingFactor = 0.05
    controls.minDistance = 5
    controls.maxDistance = 20
    
    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate)
      controls.update()
      renderer.render(scene, camera)
    }
    animate()
    
    // Cleanup
    return () => {
      renderer.dispose()
      if (mountRef.current) {
        mountRef.current.removeChild(renderer.domElement)
      }
    }
  }, [])
  
  // Update condensation visualization
  useEffect(() => {
    if (!sceneRef.current) return
    
    const scene = sceneRef.current
    
    // Remove old condensation particles
  const oldParticles = ((scene as any).children as any[]).filter((c: any) => c?.userData?.condensation)
  oldParticles.forEach((p: any) => scene.remove(p))
    
    // Add condensation visualization where risk exists
    condensationPoints.forEach(pt => {
      if (!pt.risk) return
      
      // Find corresponding mesh
      let position: THREE.Vector3 | null = null
      let count = 0
      
      if (pt.name.includes('Cev')) {
        position = new THREE.Vector3(0, 3, -3)
        count = 30
      } else if (pt.name.includes('Površina')) {
        position = new THREE.Vector3(0, 1.1, 0)
        count = 20
      } else if (pt.name.includes('Kanal')) {
        position = new THREE.Vector3(-3, 3.5, 0)
        count = 15
      } else if (pt.name.includes('HEPA')) {
        position = new THREE.Vector3(0, 4.7, 0)
        count = 10
      } else if (pt.name.includes('Stena')) {
        position = new THREE.Vector3(-4.9, 2.5, 0)
        count = 25
      }
      
      if (!position) return
      
      // Create water droplets
      for (let i = 0; i < count; i++) {
        const droplet = new THREE.Mesh(
          new THREE.SphereGeometry(0.05, 8, 8),
          new THREE.MeshPhongMaterial({ 
            color: 0x3b82f6,
            transparent: true,
            opacity: 0.7,
            emissive: 0x1e40af,
            emissiveIntensity: 0.3
          })
        )
        droplet.position.set(
          position.x + (Math.random() - 0.5) * 2,
          position.y + (Math.random() - 0.5) * 0.5,
          position.z + (Math.random() - 0.5) * 2
        )
  ;(droplet as any).userData = { condensation: true }
        scene.add(droplet)
      }
    })
  }, [condensationPoints])
  
  // Export functions
  const handleExportCSV = () => {
    const data = [
      ['Površina', 'Temperatura (°C)', 'Rosišče (°C)', 'Tveganje Kondenzacije', 'Kritično'],
      ...condensationPoints.map(pt => [
        pt.name,
        pt.temp.toFixed(1),
        pt.dewPoint.toFixed(1),
        pt.risk ? 'DA' : 'NE',
        (pt as any).critical ? 'DA' : 'NE'
      ]),
      ['', '', '', '', ''],
      ['Pogoji Prostora', '', '', '', ''],
      ['Temperatura prostora', roomTemp.toFixed(1), '°C', '', ''],
      ['Relativna vlažnost', roomRH.toFixed(1), '%', '', ''],
      ['Rosišče prostora', roomDewPoint.toFixed(1), '°C', '', ''],
      ['Zunanja temperatura', outsideTemp.toFixed(1), '°C', '', '']
    ]
    exportToCSV('kondenzacija-analiza', data)
  }
  
  const handleExportDOCX = async () => {
    const riskPoints = condensationPoints.filter(pt => pt.risk)
    await exportToDOCX('kondenzacija-analiza', {
      title: 'Analiza Tveganja Kondenzacije',
      subtitle: `Datum: ${new Date().toLocaleString('sl-SI')}`,
      sections: [
        {
          heading: 'Pogoji Prostora',
          paragraphs: [
            `Temperatura prostora: ${roomTemp.toFixed(1)} °C`,
            `Relativna vlažnost: ${roomRH.toFixed(1)} %`,
            `Rosišče prostora: ${roomDewPoint.toFixed(1)} °C`,
            `Zunanja temperatura: ${outsideTemp.toFixed(1)} °C`
          ]
        },
        {
          heading: 'Analiza Površin',
          table: {
            headers: ['Površina', 'Temp (°C)', 'Rosišče (°C)', 'Tveganje'],
            rows: condensationPoints.map(pt => [
              pt.name,
              pt.temp.toFixed(1),
              pt.dewPoint.toFixed(1),
              pt.risk ? '⚠ DA' : '✓ NE'
            ])
          }
        },
        {
          heading: 'Ugotovljeno Tveganje',
          paragraphs: riskPoints.length > 0 
            ? [
                `Število površin s tveganjem: ${riskPoints.length} od ${condensationPoints.length}`,
                `Kritične površine: ${riskPoints.map(pt => pt.name).join(', ')}`,
                '',
                'Kondenzacija nastane, ko je temperatura površine nižja od rosišča. To ustvarja vlažno okolje, idealno za mikrobiološko rast.'
              ]
            : ['✅ Trenutno ni tveganja kondenzacije. Vse površine so nad rosiščem.']
        },
        {
          heading: 'Priporočeni Ukrepi',
          paragraphs: riskPoints.length > 0
            ? [
                '1. Izolirajte hladne cevi z ustrezno toplotno izolacijo',
                '2. Povečajte temperaturo kritičnih površin (aktivno gretje)',
                '3. Zmanjšajte relativno vlažnost prostora z razvlaževanjem',
                '4. Redno preverjajte kondenzacijo na kritičnih točkah',
                '5. Dokumentirajte vsa opazovanja v dnevnik'
              ]
            : [
                '1. Nadaljujte z rednim spremljanjem',
                '2. Ohranjajte trenutne pogoje',
                '3. Redno kalibrirajte senzorje'
              ]
        }
      ]
    })
  }
  
  const handleExportPDF = () => {
    const riskPoints = condensationPoints.filter(pt => pt.risk)
    exportToPDF('kondenzacija-analiza', {
      title: 'Analiza Tveganja Kondenzacije',
      subtitle: `Datum: ${new Date().toLocaleString('sl-SI')}`,
      sections: [
        {
          heading: 'Pogoji Prostora',
          paragraphs: [
            `Temperatura prostora: ${roomTemp.toFixed(1)} °C`,
            `Relativna vlažnost: ${roomRH.toFixed(1)} %`,
            `Rosišče prostora: ${roomDewPoint.toFixed(1)} °C`,
            `Zunanja temperatura: ${outsideTemp.toFixed(1)} °C`
          ]
        },
        {
          heading: 'Analiza Površin',
          table: {
            headers: ['Površina', 'Temp (°C)', 'Rosišče (°C)', 'Tveganje'],
            rows: condensationPoints.map(pt => [
              pt.name,
              pt.temp.toFixed(1),
              pt.dewPoint.toFixed(1),
              pt.risk ? 'DA' : 'NE'
            ])
          }
        },
        {
          heading: 'Ugotovljeno Tveganje',
          paragraphs: riskPoints.length > 0 
            ? [
                `Stevilo povr sin s tveganjem: ${riskPoints.length} od ${condensationPoints.length}`,
                `Kriticne povrsine: ${riskPoints.map(pt => pt.name).join(', ')}`,
                '',
                'Kondenzacija nastane, ko je temperatura povrsine nizja od rosis ca.'
              ]
            : ['Trenutno ni tveganja kondenzacije. Vse povrsine so nad rosis cem.']
        },
        {
          heading: 'Priporoceni Ukrepi',
          paragraphs: riskPoints.length > 0
            ? [
                '1. Izolirajte hladne cevi z ustrezno toplotno izolacijo',
                '2. Povecajte temperaturo kriticnih povr sin',
                '3. Zmanjsajte relativno vlaznost prostora',
                '4. Redno preverjajte kondenzacijo',
                '5. Dokumentirajte opazovanja'
              ]
            : [
                '1. Nadaljujte z rednim spremljanjem',
                '2. Ohranjajte trenutne pogoje'
              ]
        }
      ]
    })
  }
  
  const riskCount = condensationPoints.filter(pt => pt.risk).length
  const criticalRiskCount = condensationPoints.filter(pt => pt.risk && (pt as any).critical).length
  
  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, rgba(15,23,42,0.95), rgba(30,41,59,0.95))', borderRadius: 16, border: '1px solid rgba(148,163,184,0.2)' }}>
      <div style={{ marginBottom: 20 }}>
        <h3 style={{ margin: 0, color: '#e2e8f0', fontSize: 22, fontWeight: 700 }}>
          ❄️ Kalkulator Tveganja Kondenzacije (3D)
        </h3>
        <p style={{ margin: '8px 0 0 0', color: '#94a3b8', fontSize: 14 }}>
          Interaktivna 3D vizualizacija čistega prostora s prikazom kondenzacije
        </p>
      </div>
      
      {/* 3D View */}
      <div 
        ref={mountRef} 
        style={{ 
          marginBottom: 24, 
          borderRadius: 12, 
          overflow: 'hidden',
          border: '2px solid rgba(59, 130, 246, 0.3)',
          boxShadow: '0 8px 32px rgba(0,0,0,0.4)'
        }} 
      />
      
      {/* Controls */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 20, marginBottom: 24 }}>
        <div>
          <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 8, fontWeight: 600 }}>
            🌡️ Temperatura Prostora: {roomTemp.toFixed(1)}°C
          </label>
          <input 
            type="range" 
            min="18" 
            max="26" 
            step="0.5" 
            value={roomTemp}
            onChange={(e) => setRoomTemp(parseFloat(e.target.value))}
            style={{ width: '100%' }}
          />
        </div>
        
        <div>
          <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 8, fontWeight: 600 }}>
            💧 Relativna Vlažnost: {roomRH.toFixed(0)}%
          </label>
          <input 
            type="range" 
            min="30" 
            max="80" 
            step="5" 
            value={roomRH}
            onChange={(e) => setRoomRH(parseFloat(e.target.value))}
            style={{ width: '100%' }}
          />
        </div>
        
        <div>
          <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 8, fontWeight: 600 }}>
            ❄️ Temperatura Hladne Cevi: {coldPipeTemp.toFixed(1)}°C
          </label>
          <input 
            type="range" 
            min="5" 
            max="18" 
            step="0.5" 
            value={coldPipeTemp}
            onChange={(e) => setColdPipeTemp(parseFloat(e.target.value))}
            style={{ width: '100%' }}
          />
        </div>
        
        <div>
          <label style={{ display: 'block', color: '#cbd5e1', fontSize: 14, marginBottom: 8, fontWeight: 600 }}>
            🌍 Zunanja Temperatura: {outsideTemp.toFixed(1)}°C
          </label>
          <input 
            type="range" 
            min="-10" 
            max="15" 
            step="1" 
            value={outsideTemp}
            onChange={(e) => setOutsideTemp(parseFloat(e.target.value))}
            style={{ width: '100%' }}
          />
        </div>
      </div>
      
      {/* Dew Point Display */}
      <div style={{ 
        padding: 16, 
        background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.15), rgba(37, 99, 235, 0.15))',
        border: '1px solid rgba(59, 130, 246, 0.4)',
        borderRadius: 10,
        marginBottom: 24
      }}>
        <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 8 }}>
          <strong>Rosišče Prostora:</strong> {roomDewPoint.toFixed(1)}°C
        </div>
        <div style={{ fontSize: 13, color: '#cbd5e1', lineHeight: 1.6 }}>
          💡 Če je temperatura katerekoli površine <strong>nižja od {roomDewPoint.toFixed(1)}°C</strong>, 
          se bo na njej kondenzirala vlaga iz zraka!
        </div>
      </div>
      
      {/* Risk Analysis */}
      <div style={{ marginBottom: 24 }}>
        <h4 style={{ color: '#e2e8f0', fontSize: 16, marginBottom: 12 }}>
          📊 Analiza Površin
        </h4>
        <div style={{ display: 'grid', gap: 12 }}>
          {condensationPoints.map((pt, i) => (
            <motion.div
              key={i}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: i * 0.1 }}
              style={{
                padding: 16,
                background: pt.risk 
                  ? 'linear-gradient(135deg, rgba(239, 68, 68, 0.15), rgba(220, 38, 38, 0.15))'
                  : 'linear-gradient(135deg, rgba(34, 197, 94, 0.15), rgba(22, 163, 74, 0.15))',
                border: `1px solid ${pt.risk ? 'rgba(239, 68, 68, 0.4)' : 'rgba(34, 197, 94, 0.4)'}`,
                borderRadius: 8,
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}
            >
              <div>
                <div style={{ color: '#e2e8f0', fontWeight: 600, marginBottom: 4 }}>
                  {pt.risk ? '⚠️' : '✓'} {pt.name}
                </div>
                <div style={{ fontSize: 13, color: '#94a3b8' }}>
                  Temperatura: {pt.temp.toFixed(1)}°C | Rosišče: {pt.dewPoint.toFixed(1)}°C
                </div>
              </div>
              <div style={{
                padding: '6px 12px',
                background: pt.risk ? 'rgba(239, 68, 68, 0.3)' : 'rgba(34, 197, 94, 0.3)',
                borderRadius: 6,
                fontSize: 12,
                fontWeight: 700,
                color: pt.risk ? '#fca5a5' : '#86efac'
              }}>
                {pt.risk ? 'TVEGANJE' : 'VARNO'}
              </div>
            </motion.div>
          ))}
        </div>
      </div>
      
      {/* Summary Alert */}
      {riskCount > 0 && (
        <div style={{
          padding: 16,
          background: criticalRiskCount > 0 
            ? 'linear-gradient(135deg, rgba(239, 68, 68, 0.2), rgba(220, 38, 38, 0.2))'
            : 'linear-gradient(135deg, rgba(245, 158, 11, 0.2), rgba(234, 179, 8, 0.2))',
          border: `2px solid ${criticalRiskCount > 0 ? '#ef4444' : '#f59e0b'}`,
          borderRadius: 10,
          marginBottom: 24
        }}>
          <div style={{ fontSize: 16, fontWeight: 700, color: '#e2e8f0', marginBottom: 8 }}>
            {criticalRiskCount > 0 ? '🚨 KRITIČNO TVEGANJE!' : '⚠️ Opozorilo'}
          </div>
          <div style={{ fontSize: 14, color: '#cbd5e1', lineHeight: 1.6 }}>
            Zaznano {riskCount} točk s tveganjem kondenzacije. 
            {criticalRiskCount > 0 && ` ${criticalRiskCount} od njih so kritične površine!`}
            <br />
            <strong>Ukrepi:</strong> Izolirajte hladne cevi, povečajte temperaturo kritičnih površin, 
            ali zmanjšajte vlažnost prostora.
          </div>
        </div>
      )}
      
      {riskCount === 0 && (
        <div style={{
          padding: 16,
          background: 'linear-gradient(135deg, rgba(34, 197, 94, 0.2), rgba(22, 163, 74, 0.2))',
          border: '2px solid #22c55e',
          borderRadius: 10,
          marginBottom: 24
        }}>
          <div style={{ fontSize: 16, fontWeight: 700, color: '#86efac', marginBottom: 8 }}>
            ✅ Optimalni Pogoji
          </div>
          <div style={{ fontSize: 14, color: '#cbd5e1' }}>
            Trenutno ni tveganja kondenzacije. Vse površine so nad rosiščem prostora.
          </div>
        </div>
      )}
      
      {/* Export Buttons */}
      <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
        <button
          onClick={handleExportCSV}
          style={{
            padding: '12px 20px',
            background: 'linear-gradient(135deg, #22c55e, #16a34a)',
            border: 'none',
            borderRadius: 8,
            color: 'white',
            cursor: 'pointer',
            fontSize: 14,
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 12px rgba(34, 197, 94, 0.3)',
            transition: 'all 0.2s'
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
        >
          📊 Izvozi CSV
        </button>
        
        <button
          onClick={handleExportDOCX}
          style={{
            padding: '12px 20px',
            background: 'linear-gradient(135deg, #3b82f6, #2563eb)',
            border: 'none',
            borderRadius: 8,
            color: 'white',
            cursor: 'pointer',
            fontSize: 14,
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 12px rgba(59, 130, 246, 0.3)',
            transition: 'all 0.2s'
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
        >
          📄 Izvozi DOCX
        </button>
        
        <button
          onClick={handleExportPDF}
          style={{
            padding: '12px 20px',
            background: 'linear-gradient(135deg, #ef4444, #dc2626)',
            border: 'none',
            borderRadius: 8,
            color: 'white',
            cursor: 'pointer',
            fontSize: 14,
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            boxShadow: '0 4px 12px rgba(239, 68, 68, 0.3)',
            transition: 'all 0.2s'
          }}
          onMouseEnter={(e) => e.currentTarget.style.transform = 'translateY(-2px)'}
          onMouseLeave={(e) => e.currentTarget.style.transform = 'translateY(0)'}
        >
          📑 Izvozi PDF
        </button>
      </div>
    </div>
  )
}

// ============================================
// Seasonal HVAC Load Simulator (Lesson 122)
// ============================================

interface SeasonalHVACLoadSimulatorProps {}

const SeasonalHVACLoadSimulator: React.FC<SeasonalHVACLoadSimulatorProps> = () => {
  const [currentMonth, setCurrentMonth] = useState(0); // 0-11
  const [isPlaying, setIsPlaying] = useState(false);
  const [scenario, setScenario] = useState<'basic' | 'recuperation' | 'adaptive'>('basic');
  const [tolerance, setTolerance] = useState<'tight' | 'normal' | 'loose'>('normal');
  const [energyCost, setEnergyCost] = useState(0.12); // EUR/kWh
  
  // Slovenian months
  const months = ['Januar', 'Februar', 'Marec', 'April', 'Maj', 'Junij', 
                 'Julij', 'Avgust', 'September', 'Oktober', 'November', 'December'];
  
  // Real Slovenian weather data (average)
  const weatherData = [
    { temp: 1, rh: 82 },   // Januar
    { temp: 3, rh: 77 },   // Februar
    { temp: 8, rh: 72 },   // Marec
    { temp: 13, rh: 65 },  // April
    { temp: 18, rh: 68 },  // Maj
    { temp: 21, rh: 70 },  // Junij
    { temp: 23, rh: 68 },  // Julij
    { temp: 23, rh: 70 },  // Avgust
    { temp: 18, rh: 75 },  // September
    { temp: 13, rh: 80 },  // Oktober
    { temp: 7, rh: 84 },   // November
    { temp: 2, rh: 85 }    // December
  ];
  
  // Calculate HVAC load based on scenario and tolerance
  const calculateLoad = useMemo(() => {
    return months.map((_, idx) => {
      const weather = weatherData[idx];
      const tempDiff = Math.abs(weather.temp - 21); // Target: 21°C
      const rhDiff = Math.abs(weather.rh - 50);     // Target: 50% RH
      
      // Base load (kWh)
      let heatingLoad = Math.max(0, (21 - weather.temp) * 120);
      let coolingLoad = Math.max(0, (weather.temp - 21) * 100);
      let humidificationLoad = Math.max(0, (50 - weather.rh) * 8);
      let dehumidificationLoad = Math.max(0, (weather.rh - 50) * 10);
      
      // Tolerance impact
      const toleranceFactor = tolerance === 'tight' ? 1.5 : tolerance === 'normal' ? 1.0 : 0.7;
      
      // Scenario modifiers
      let recuperationEfficiency = 0;
      let adaptiveReduction = 0;
      
      if (scenario === 'recuperation') {
        recuperationEfficiency = 0.65; // 65% heat recovery
        heatingLoad *= (1 - recuperationEfficiency);
        coolingLoad *= (1 - recuperationEfficiency * 0.4);
      } else if (scenario === 'adaptive') {
        adaptiveReduction = 0.25; // 25% reduction from adaptive setpoints
        heatingLoad *= (1 - adaptiveReduction);
        coolingLoad *= (1 - adaptiveReduction);
        humidificationLoad *= (1 - adaptiveReduction);
        dehumidificationLoad *= (1 - adaptiveReduction);
      }
      
      const totalLoad = (heatingLoad + coolingLoad + humidificationLoad + dehumidificationLoad) * toleranceFactor;
      const cost = totalLoad * energyCost;
      
      return {
        month: months[idx],
        heating: heatingLoad * toleranceFactor,
        cooling: coolingLoad * toleranceFactor,
        humidification: humidificationLoad * toleranceFactor,
        dehumidification: dehumidificationLoad * toleranceFactor,
        total: totalLoad,
        cost: cost,
        outsideTemp: weather.temp,
        outsideRH: weather.rh
      };
    });
  }, [scenario, tolerance, energyCost]);
  
  // Calculate annual totals
  const annualStats = useMemo(() => {
    const totalEnergy = calculateLoad.reduce((sum, m) => sum + m.total, 0);
    const totalCost = calculateLoad.reduce((sum, m) => sum + m.cost, 0);
    const basicScenario = months.map((_, idx) => {
      const weather = weatherData[idx];
      const heatingLoad = Math.max(0, (21 - weather.temp) * 120);
      const coolingLoad = Math.max(0, (weather.temp - 21) * 100);
      const humidificationLoad = Math.max(0, (50 - weather.rh) * 8);
      const dehumidificationLoad = Math.max(0, (weather.rh - 50) * 10);
      return (heatingLoad + coolingLoad + humidificationLoad + dehumidificationLoad);
    });
    const basicTotal = basicScenario.reduce((sum, e) => sum + e, 0);
    const savings = basicTotal - totalEnergy;
    const savingsPercent = (savings / basicTotal) * 100;
    
    return { totalEnergy, totalCost, savings, savingsPercent };
  }, [calculateLoad]);
  
  // Animation for timeline
  useEffect(() => {
    if (!isPlaying) return;
    
    const interval = setInterval(() => {
      setCurrentMonth(prev => {
        if (prev >= 11) {
          setIsPlaying(false);
          return 11;
        }
        return prev + 1;
      });
    }, 1000);
    
    return () => clearInterval(interval);
  }, [isPlaying]);
  
  // Export functions
  const handleExportCSV = () => {
    const headers = ['Mesec', 'Ogrevanje (kWh)', 'Hlajenje (kWh)', 'Vlaženje (kWh)', 'Razvlaževanje (kWh)', 'Skupaj (kWh)', 'Stroški (EUR)', 'Zunanja Temp (°C)', 'Zunanja Vlaga (%)'];
    const rows = calculateLoad.map(m => [
      m.month,
      m.heating.toFixed(1),
      m.cooling.toFixed(1),
      m.humidification.toFixed(1),
      m.dehumidification.toFixed(1),
      m.total.toFixed(1),
      m.cost.toFixed(2),
      m.outsideTemp.toString(),
      m.outsideRH.toString()
    ]);
    rows.push([
      'LETNO SKUPAJ',
      '',
      '',
      '',
      '',
      annualStats.totalEnergy.toFixed(1),
      annualStats.totalCost.toFixed(2),
      '',
      ''
    ]);
    
    exportToCSV('sezonska-obremenitev-hvac.csv', [headers, ...rows]);
  };
  
  const handleExportDOCX = () => {
    const scenarioNames = {
      basic: 'Osnovna konfiguracija',
      recuperation: 'S toplotnim prenosnikom (65% učinkovitost)',
      adaptive: 'Adaptivno krmiljenje'
    };
    const toleranceNames = {
      tight: 'Stroge tolerance (±0.5°C, ±3% RH)',
      normal: 'Normalne tolerance (±1°C, ±5% RH)',
      loose: 'Široke tolerance (±2°C, ±8% RH)'
    };
    
    const content = {
      title: 'Letna Analiza Obremenitve HVAC Sistema',
      sections: [
        {
          heading: 'Konfiguracija',
          paragraphs: [
            `Scenarij: ${scenarioNames[scenario]}`,
            `Tolerance: ${toleranceNames[tolerance]}`,
            `Cena energije: ${energyCost.toFixed(3)} EUR/kWh`
          ]
        },
        {
          heading: 'Letni Rezultati',
          paragraphs: [
            `Skupna poraba energije: ${annualStats.totalEnergy.toFixed(0)} kWh`,
            `Letni stroški: ${annualStats.totalCost.toFixed(2)} EUR`,
            `Prihranki glede na osnovno: ${annualStats.savings.toFixed(0)} kWh (${annualStats.savingsPercent.toFixed(1)}%)`
          ]
        },
        {
          heading: 'Mesečni Podatki',
          table: {
            headers: ['Mesec', 'Ogrevanje', 'Hlajenje', 'Skupaj', 'Stroški'],
            rows: calculateLoad.map(m => [
              m.month,
              `${m.heating.toFixed(0)} kWh`,
              `${m.cooling.toFixed(0)} kWh`,
              `${m.total.toFixed(0)} kWh`,
              `${m.cost.toFixed(2)} EUR`
            ])
          }
        },
        {
          heading: 'Priporočila',
          paragraphs: scenario === 'basic' ? [
            '• Razmislite o vgradnji toplotnega prenosnika (prihranek do 65%)',
            '• Implementirajte adaptivno krmiljenje za dodatne prihranke',
            '• Optimizirajte tolerančna območja glede na procesne zahteve'
          ] : scenario === 'recuperation' ? [
            '✓ Toplotni prenosnik zmanjšuje stroške ogrevanja in hlajenja',
            '• Dodatno razmislite o adaptivnem krmiljenju',
            '• Redno vzdržujte prenosnik za optimalno učinkovitost'
          ] : [
            '✓ Adaptivno krmiljenje optimizira porabo glede na potrebe',
            '• Spremljajte učinkovitost in prilagajajte algoritme',
            '• Kombinirajte z rekuperacijo za maksimalne prihranke'
          ]
        }
      ]
    };
    
    exportToDOCX('sezonska-obremenitev-hvac.docx', content);
  };
  
  const handleExportPDF = () => {
    const scenarioNames = {
      basic: 'Osnovna konfiguracija',
      recuperation: 'S toplotnim prenosnikom (65% učinkovitost)',
      adaptive: 'Adaptivno krmiljenje'
    };
    const toleranceNames = {
      tight: 'Stroge tolerance (±0.5°C, ±3% RH)',
      normal: 'Normalne tolerance (±1°C, ±5% RH)',
      loose: 'Široke tolerance (±2°C, ±8% RH)'
    };
    
    const content = {
      title: 'Letna Analiza Obremenitve HVAC Sistema',
      sections: [
        {
          heading: 'Konfiguracija',
          paragraphs: [
            `Scenarij: ${scenarioNames[scenario]}`,
            `Tolerance: ${toleranceNames[tolerance]}`,
            `Cena energije: ${energyCost.toFixed(3)} EUR/kWh`
          ]
        },
        {
          heading: 'Letni Rezultati',
          paragraphs: [
            `Skupna poraba energije: ${annualStats.totalEnergy.toFixed(0)} kWh`,
            `Letni stroški: ${annualStats.totalCost.toFixed(2)} EUR`,
            `Prihranki: ${annualStats.savings.toFixed(0)} kWh (${annualStats.savingsPercent.toFixed(1)}%)`
          ]
        },
        {
          heading: 'Mesečna Poraba',
          paragraphs: calculateLoad.map(m => 
            `${m.month}: ${m.total.toFixed(0)} kWh (${m.cost.toFixed(2)} EUR)`
          )
        },
        {
          heading: 'ROI Analiza',
          paragraphs: scenario === 'basic' ? [
            'Investicija v toplotni prenosnik: ~15,000 EUR',
            `Letni prihranki s rekuperacijo: ~${(annualStats.totalCost * 0.65).toFixed(0)} EUR`,
            `Vračilo investicije: ~${(15000 / (annualStats.totalCost * 0.65)).toFixed(1)} let`
          ] : scenario === 'recuperation' ? [
            'Investicija v adaptivno krmiljenje: ~5,000 EUR',
            `Dodatni letni prihranki: ~${(annualStats.totalCost * 0.25).toFixed(0)} EUR`,
            `Vračilo investicije: ~${(5000 / (annualStats.totalCost * 0.25)).toFixed(1)} let`
          ] : [
            '✓ Kombinirano vračilo: optimalno za dolgoročno učinkovitost',
            `Skupni prihranki: ${annualStats.savingsPercent.toFixed(1)}%`,
            'Priporočilo: Kombinirajte obe tehnologiji'
          ]
        }
      ]
    };
    
    exportToPDF('sezonska-obremenitev-hvac.pdf', content);
  };
  
  // Find max load for scaling
  const maxLoad = Math.max(...calculateLoad.map(m => m.total));
  
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="p-6 bg-gradient-to-br from-orange-50 via-white to-yellow-50 rounded-xl"
    >
      <h3 className="text-2xl font-bold text-gray-800 mb-4 flex items-center gap-2">
        <span>📅</span>
        Letna Simulacija Obremenitve HVAC Sistema
      </h3>
      
      {/* Configuration */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
          <label className="block text-sm font-semibold text-gray-700 mb-2">Scenarij</label>
          <select 
            value={scenario}
            onChange={(e) => setScenario(e.target.value as any)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="basic">Osnovna konfiguracija</option>
            <option value="recuperation">S toplotnim prenosnikom</option>
            <option value="adaptive">Adaptivno krmiljenje</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-700 mb-2">Tolerančno območje</label>
          <select 
            value={tolerance}
            onChange={(e) => setTolerance(e.target.value as any)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          >
            <option value="tight">Stroge tolerance (±0.5°C)</option>
            <option value="normal">Normalne tolerance (±1°C)</option>
            <option value="loose">Široke tolerance (±2°C)</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-semibold text-gray-700 mb-2">Cena energije (EUR/kWh)</label>
          <input
            type="number"
            min="0.05"
            max="0.50"
            step="0.01"
            value={energyCost}
            onChange={(e) => setEnergyCost(parseFloat(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500"
          />
        </div>
      </div>
      
      {/* Timeline Controls */}
      <div className="flex items-center gap-4 mb-6">
        <button
          onClick={() => setIsPlaying(!isPlaying)}
          className="px-6 py-3 bg-gradient-to-r from-orange-500 to-yellow-500 text-white font-bold rounded-lg hover:from-orange-600 hover:to-yellow-600 transition-all shadow-lg"
        >
          {isPlaying ? '⏸️ Pauza' : '▶️ Predvajaj letni cikel'}
        </button>
        <button
          onClick={() => setCurrentMonth(0)}
          className="px-4 py-3 bg-gray-200 text-gray-700 font-semibold rounded-lg hover:bg-gray-300 transition-all"
        >
          ↺ Ponastavi
        </button>
        <input
          type="range"
          min="0"
          max="11"
          value={currentMonth}
          onChange={(e) => setCurrentMonth(parseInt(e.target.value))}
          className="flex-1"
        />
        <span className="font-bold text-lg text-gray-700">{months[currentMonth]}</span>
      </div>
      
      {/* Monthly Data Bars */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h4 className="text-lg font-bold text-gray-800 mb-4">Mesečna Poraba Energije</h4>
        <div className="space-y-3">
          {calculateLoad.map((monthData, idx) => (
            <motion.div
              key={idx}
              initial={{ opacity: 0.3 }}
              animate={{ opacity: idx <= currentMonth ? 1 : 0.3 }}
              className="relative"
            >
              <div className="flex items-center gap-3">
                <span className="w-24 text-sm font-semibold text-gray-600">{monthData.month}</span>
                <div className="flex-1 h-8 bg-gray-100 rounded-lg overflow-hidden relative">
                  {/* Stacked bars */}
                  <div className="flex h-full">
                    <div 
                      style={{ width: `${(monthData.heating / maxLoad) * 100}%` }}
                      className="bg-red-500 transition-all duration-500"
                      title={`Ogrevanje: ${monthData.heating.toFixed(0)} kWh`}
                    />
                    <div 
                      style={{ width: `${(monthData.cooling / maxLoad) * 100}%` }}
                      className="bg-blue-500 transition-all duration-500"
                      title={`Hlajenje: ${monthData.cooling.toFixed(0)} kWh`}
                    />
                    <div 
                      style={{ width: `${(monthData.humidification / maxLoad) * 100}%` }}
                      className="bg-cyan-400 transition-all duration-500"
                      title={`Vlaženje: ${monthData.humidification.toFixed(0)} kWh`}
                    />
                    <div 
                      style={{ width: `${(monthData.dehumidification / maxLoad) * 100}%` }}
                      className="bg-orange-400 transition-all duration-500"
                      title={`Razvlaževanje: ${monthData.dehumidification.toFixed(0)} kWh`}
                    />
                  </div>
                </div>
                <span className="w-32 text-right text-sm font-bold text-gray-700">
                  {monthData.total.toFixed(0)} kWh
                </span>
                <span className="w-24 text-right text-sm font-bold text-green-600">
                  {monthData.cost.toFixed(2)} €
                </span>
              </div>
            </motion.div>
          ))}
        </div>
        
        {/* Legend */}
        <div className="flex gap-6 mt-6 flex-wrap">
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-red-500 rounded"></div>
            <span className="text-sm text-gray-600">Ogrevanje</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-blue-500 rounded"></div>
            <span className="text-sm text-gray-600">Hlajenje</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-cyan-400 rounded"></div>
            <span className="text-sm text-gray-600">Vlaženje</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-orange-400 rounded"></div>
            <span className="text-sm text-gray-600">Razvlaževanje</span>
          </div>
        </div>
      </div>
      
      {/* Annual Summary */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-gradient-to-br from-blue-500 to-blue-600 p-6 rounded-lg shadow-lg text-white">
          <div className="text-sm font-semibold opacity-90 mb-1">Letna Poraba</div>
          <div className="text-3xl font-bold">{annualStats.totalEnergy.toFixed(0)} kWh</div>
        </div>
        <div className="bg-gradient-to-br from-green-500 to-green-600 p-6 rounded-lg shadow-lg text-white">
          <div className="text-sm font-semibold opacity-90 mb-1">Letni Stroški</div>
          <div className="text-3xl font-bold">{annualStats.totalCost.toFixed(2)} EUR</div>
        </div>
        <div className="bg-gradient-to-br from-purple-500 to-purple-600 p-6 rounded-lg shadow-lg text-white">
          <div className="text-sm font-semibold opacity-90 mb-1">Prihranki</div>
          <div className="text-3xl font-bold">{annualStats.savingsPercent.toFixed(1)}%</div>
          <div className="text-sm opacity-90 mt-1">({annualStats.savings.toFixed(0)} kWh)</div>
        </div>
      </div>
      
      {/* Current Month Detail */}
      <div className="bg-gradient-to-r from-orange-100 to-yellow-100 p-6 rounded-lg shadow-md mb-6">
        <h4 className="text-lg font-bold text-gray-800 mb-3 flex items-center gap-2">
          <span>📊</span>
          {months[currentMonth]} - Podrobnosti
        </h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <div className="text-gray-600 font-semibold">Zunanja Temp.</div>
            <div className="text-2xl font-bold text-blue-600">{calculateLoad[currentMonth].outsideTemp}°C</div>
          </div>
          <div>
            <div className="text-gray-600 font-semibold">Zunanja Vlaga</div>
            <div className="text-2xl font-bold text-cyan-600">{calculateLoad[currentMonth].outsideRH}%</div>
          </div>
          <div>
            <div className="text-gray-600 font-semibold">Skupna Poraba</div>
            <div className="text-2xl font-bold text-orange-600">{calculateLoad[currentMonth].total.toFixed(0)} kWh</div>
          </div>
          <div>
            <div className="text-gray-600 font-semibold">Mesečni Stroški</div>
            <div className="text-2xl font-bold text-green-600">{calculateLoad[currentMonth].cost.toFixed(2)} EUR</div>
          </div>
        </div>
      </div>
      
      {/* Export Buttons */}
      <div className="flex gap-3 flex-wrap">
        <button
          onClick={handleExportCSV}
          className="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold rounded-lg hover:from-green-600 hover:to-emerald-600 transition-all shadow-lg"
        >
          📊 Izvozi CSV
        </button>
        <button
          onClick={handleExportDOCX}
          className="px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-500 text-white font-bold rounded-lg hover:from-blue-600 hover:to-indigo-600 transition-all shadow-lg"
        >
          📄 Izvozi DOCX
        </button>
        <button
          onClick={handleExportPDF}
          className="px-6 py-3 bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold rounded-lg hover:from-red-600 hover:to-pink-600 transition-all shadow-lg"
        >
          📕 Izvozi PDF
        </button>
      </div>
    </motion.div>
  );
};

// ============================================
// Lesson 120 – Environmental Monitoring tools
// ============================================

export function EMExcursionInvestigator() {
  const days = 30
  const [preset, setPreset] = useState<'7d' | '30d'>('30d')
  const [focusStart, setFocusStart] = useState(18)
  const [focusEnd, setFocusEnd] = useState(25)
  const [showParticles, setShowParticles] = useState(true)
  const [showCFU, setShowCFU] = useState(true)

  // Synthetic NV and CFU with a small excursion and events
  const { nv, cfu, events } = useMemo(() => {
    const nvArr: number[] = []
    const cfuArr: number[] = []
    let nvBase = 40
    let cfuBase = 1.5
    for (let i = 0; i < days; i++) {
      nvBase += (Math.random() - 0.5) * 8 + (i > 18 && i < 23 ? 10 : 0)
      cfuBase += (Math.random() - 0.5) * 0.4 + (i > 19 && i < 22 ? 0.8 : 0)
      nvArr.push(Math.max(0, nvBase))
      cfuArr.push(Math.max(0, cfuBase))
    }
    const evts: Array<{ day: number; type: string }>= [
      { day: 5, type: 'cleaning' },
      { day: 12, type: 'door-open' },
      { day: 20, type: 'door-open' },
      { day: 21, type: 'staffing-peak' }
    ]
    return { nv: nvArr, cfu: cfuArr, events: evts }
  }, [])

  const alertNV = 100
  const actionNV = 150
  const alertCFU = 5
  const actionCFU = 10

  const fs = Math.min(focusStart, focusEnd)
  const fe = Math.max(focusStart, focusEnd)

  const windowNV = nv.slice(fs, fe + 1)
  const windowCFU = cfu.slice(fs, fe + 1)
  const windowEvents = events.filter(e => e.day >= fs && e.day <= fe)

  // Very simple heuristic scoring for demo
  const scoreDoor = windowEvents.filter(e => e.type === 'door-open').length * (Math.max(0, Math.max(...windowNV) - alertNV) / 50)
  const scoreStaff = (windowEvents.some(e => e.type === 'staffing-peak') ? 1 : 0) * (Math.max(0, Math.max(...windowCFU) - alertCFU) / 3)
  const scoreCleaning = windowEvents.some(e => e.type === 'cleaning') ? 0.5 : 0.2
  const scoreUnknown = 0.3
  const scores = [
    { cause: 'Vrata (door-open)', score: scoreDoor },
    { cause: 'Osebje (staffing)', score: scoreStaff },
    { cause: 'Čiščenje (timing/učinek)', score: scoreCleaning },
    { cause: 'Neznano / večno tveganje', score: scoreUnknown }
  ].sort((a, b) => b.score - a.score).slice(0, 3)

  function exportReport() {
    const lines = [
      'Poročilo preiskave EM (osnutek)',
      `Okno: D${fs + 1}–D${fe + 1}`,
      `NV max: ${Math.max(...windowNV).toFixed(0)} (Alert ${alertNV}, Action ${actionNV})`,
      `CFU max: ${Math.max(...windowCFU).toFixed(1)} (Alert ${alertCFU}, Action ${actionCFU})`,
      'Dogodki: ' + windowEvents.map(e => `${e.type}@D${e.day + 1}`).join(', '),
      'Top vzroki:'
    ]
    scores.forEach((s, i) => lines.push(`${i + 1}. ${s.cause} — skor ${(s.score).toFixed(2)}`))
    lines.push('\nPriporočene CAPA:')
    lines.push('- Validacija zaporedja vrat in training osebja v izbranem oknu.')
    lines.push('- Preveri učinkoviti “first air” in vrtince (smoke).')
    lines.push('- Potrdi pravilnost čiščenja pred oknom in po njem.')
    download(`EM_Investigation_D${fs + 1}-D${fe + 1}.txt`, lines.join('\n'))
  }

  const [showWhy, setShowWhy] = useState(false)

  function evidenceFor(cause: string): string[] {
    const ev: string[] = []
    const nvDays = windowNV.map((v,i)=>({v, d: fs+i})).filter(x=>x.v>=alertNV).map(x=>`D${x.d+1}`)
    const cfuDays = windowCFU.map((v,i)=>({v, d: fs+i})).filter(x=>x.v>=alertCFU).map(x=>`D${x.d+1}`)
    const doorDays = windowEvents.filter(e=>e.type==='door-open').map(e=>`D${e.day+1}`)
    const staffDays = windowEvents.filter(e=>e.type==='staffing-peak').map(e=>`D${e.day+1}`)
    const cleaningDays = windowEvents.filter(e=>e.type==='cleaning').map(e=>`D${e.day+1}`)
    if (cause.includes('Vrata')) {
      ev.push(doorDays.length?`Vrata odprta: ${doorDays.join(', ')}`:'Ni dogodkov vrat v izbranem oknu')
      ev.push(nvDays.length?`NV nad Alert: ${nvDays.join(', ')}`:'NV pod Alert v večini dni')
    } else if (cause.includes('Osebje')) {
      ev.push(staffDays.length?`Povečan staffing: ${staffDays.join(', ')}`:'Ni staffing peak dogodkov v oknu')
      ev.push(cfuDays.length?`CFU nad Alert: ${cfuDays.join(', ')}`:'CFU pod Alert v večini dni')
    } else if (cause.includes('Čiščenje')) {
      ev.push(cleaningDays.length?`Čiščenje v oknu: ${cleaningDays.join(', ')}`:'Čiščenje ni prisotno v oknu')
      ev.push('Preveri časovno bližino čiščenja in porast NV/CFU')
    } else {
      ev.push('Variabilnost signala brez jasne korelacije z dogodki')
      ev.push('Predlagano: dodatni targeted check in potrditev s smoke testom')
    }
    return ev
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '260px 1fr 300px', gap: 16 }}>
      <div>
        <SectionHeader title="EM Excursion Investigator" subtitle="Kdo je verjetni vzrok in kaj storiti" />
        <div style={{ display: 'grid', gap: 12 }}>
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Prednastavitev</label>
          <div style={{ display: 'flex', gap: 8 }}>
            <button className="filter-btn" onClick={() => { setPreset('7d'); setFocusStart(days - 7); setFocusEnd(days - 1) }}>7 dni</button>
            <button className="filter-btn" onClick={() => { setPreset('30d'); setFocusStart(18); setFocusEnd(25) }}>30 dni</button>
          </div>

          <label style={{ color: '#cbd5e1', fontSize: 13, marginTop: 8 }}>Okno (dni)</label>
          <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
            <input type="range" min={0} max={days - 2} value={focusStart} onChange={e => setFocusStart(parseInt(e.target.value))} />
            <input type="range" min={1} max={days - 1} value={focusEnd} onChange={e => setFocusEnd(parseInt(e.target.value))} />
          </div>

          <div style={{ display: 'flex', gap: 12, marginTop: 8 }}>
            <label style={{ display: 'flex', gap: 6, color: '#cbd5e1' }}>
              <input type="checkbox" checked={showParticles} onChange={e => setShowParticles(e.target.checked)} /> NV
            </label>
            <label style={{ display: 'flex', gap: 6, color: '#cbd5e1' }}>
              <input type="checkbox" checked={showCFU} onChange={e => setShowCFU(e.target.checked)} /> CFU
            </label>
          </div>

          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
            <button className="filter-btn" onClick={exportReport}>Izvozi poročilo</button>
            <button className={showWhy? 'filter-btn active':'filter-btn'} onClick={()=>setShowWhy(v=>!v)}>Zakaj?</button>
          </div>
        </div>
      </div>

      {/* Visualization */}
      <div style={{ background: 'rgba(2,6,23,0.6)', border: '1px solid rgba(120,119,198,0.2)', borderRadius: 12, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'center', gap: 16, marginBottom: 8 }}>
          <KPI label="NV max" value={`${Math.max(...windowNV).toFixed(0)}`} status={Math.max(...windowNV) >= actionNV ? 'action' : Math.max(...windowNV) >= alertNV ? 'alert' : 'ok'} />
          <KPI label="CFU max" value={`${Math.max(...windowCFU).toFixed(1)}`} status={Math.max(...windowCFU) >= actionCFU ? 'action' : Math.max(...windowCFU) >= alertCFU ? 'alert' : 'ok'} />
        </div>
        <TimeSeriesChart days={days} nv={showParticles ? nv : null} cfu={showCFU ? cfu : null} fs={fs} fe={fe} events={events} alertNV={alertNV} actionNV={actionNV} alertCFU={alertCFU} actionCFU={actionCFU} />
      </div>

      {/* Insights */}
      <div>
        <SectionHeader title="Vpogledi" subtitle="Top 3 vzroki in CAPA" />
        <div style={{ display: 'grid', gap: 10 }}>
          {scores.map((s, i) => (
            <div key={i} style={{ background: 'rgba(124,58,237,0.09)', border: '1px solid rgba(124,58,237,0.4)', borderRadius: 10, padding: 12 }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', color: '#e6eef8', fontWeight: 700 }}>
                <div>{i + 1}. {s.cause}</div>
                <div>Skor {(s.score).toFixed(2)}</div>
              </div>
              <div style={{ height: 6, background: 'rgba(124,58,237,0.2)', borderRadius: 4, marginTop: 8 }}>
                <div style={{ width: `${Math.min(100, Math.round(s.score * 25))}%`, height: '100%', background: '#7c3aed', borderRadius: 4 }} />
              </div>
              {showWhy && (
                <ul style={{ margin: '8px 0 0 0', paddingLeft: 18, color: '#cbd5e1', fontSize: 13 }}>
                  {evidenceFor(s.cause).map((t, idx)=>(<li key={idx}>{t}</li>))}
                </ul>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

function KPI({ label, value, status }: { label: string; value: string; status: 'ok'|'alert'|'action' }) {
  const color = status === 'ok' ? '#10b981' : status === 'alert' ? '#f59e0b' : '#ef4444'
  return (
    <div style={{ background: 'rgba(2,6,23,0.6)', border: `1px solid ${color}66`, borderRadius: 10, padding: '8px 12px', minWidth: 120 }}>
      <div style={{ fontSize: 11, color: '#cbd5e1' }}>{label}</div>
      <div style={{ fontSize: 18, color, fontWeight: 800 }}>{value}</div>
    </div>
  )
}

function TimeSeriesChart({ days, nv, cfu, fs, fe, events, alertNV, actionNV, alertCFU, actionCFU }:{ days:number; nv:number[]|null; cfu:number[]|null; fs:number; fe:number; events:{day:number; type:string}[]; alertNV:number; actionNV:number; alertCFU:number; actionCFU:number }) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  useEffect(() => {
    const c = canvasRef.current
    if (!c) return
    const ctx = c.getContext('2d')
    if (!ctx) return
    const W = c.width
    const H = c.height
    const pad = 50

    function drawSeries(ctx2: CanvasRenderingContext2D, series: number[]|null, color: string, maxVal: number) {
      if (!series) return
      ctx2.strokeStyle = color
      ctx2.lineWidth = 2
      ctx2.beginPath()
      for (let i = 0; i < series.length; i++) {
        const x = pad + (W - 2*pad) * (i / (days - 1))
        const y = pad + (H - 2*pad) * (1 - series[i] / maxVal)
        if (i === 0) ctx2.moveTo(x, y)
        else ctx2.lineTo(x, y)
      }
      ctx2.stroke()
      // points
      for (let i = 0; i < series.length; i++) {
        const x = pad + (W - 2*pad) * (i / (days - 1))
        const y = pad + (H - 2*pad) * (1 - series[i] / maxVal)
        ctx2.fillStyle = color
        ctx2.beginPath()
        ctx2.arc(x, y, 3, 0, Math.PI*2)
        ctx2.fill()
      }
    }

    const nvMax = Math.max(160, ...(nv || [0]))
    const cfuMax = Math.max(12, ...(cfu || [0]))
    const maxVal = Math.max(nvMax, cfuMax)

    ctx.clearRect(0, 0, W, H)
    // grid
    ctx.strokeStyle = 'rgba(255,255,255,0.06)'
    for (let i=0;i<=5;i++) {
      const y = pad + (H - 2*pad) * (i/5)
      ctx.beginPath(); ctx.moveTo(pad,y); ctx.lineTo(W-pad,y); ctx.stroke()
    }
    // limits
    function yFor(v:number){return pad + (H - 2*pad)*(1 - v/maxVal)}
    // NV limits
    ctx.setLineDash([6,6])
    ctx.strokeStyle = '#ef4444'; ctx.beginPath(); ctx.moveTo(pad, yFor(actionNV)); ctx.lineTo(W-pad, yFor(actionNV)); ctx.stroke()
    ctx.strokeStyle = '#f59e0b'; ctx.beginPath(); ctx.moveTo(pad, yFor(alertNV)); ctx.lineTo(W-pad, yFor(alertNV)); ctx.stroke()
    // CFU limits
    ctx.strokeStyle = '#ef4444aa'; ctx.beginPath(); ctx.moveTo(pad, yFor(actionCFU)); ctx.lineTo(W-pad, yFor(actionCFU)); ctx.stroke()
    ctx.strokeStyle = '#f59e0baa'; ctx.beginPath(); ctx.moveTo(pad, yFor(alertCFU)); ctx.lineTo(W-pad, yFor(alertCFU)); ctx.stroke()
    ctx.setLineDash([])

    // window highlight
    const xFs = pad + (W - 2*pad) * (fs / (days - 1))
    const xFe = pad + (W - 2*pad) * (fe / (days - 1))
    ctx.fillStyle = 'rgba(124,58,237,0.12)'
    ctx.fillRect(xFs, pad, xFe - xFs, H - 2*pad)

  drawSeries(ctx, nv, '#06b6d4', maxVal)
  drawSeries(ctx, cfu, '#22c55e', maxVal)

    // events
    events.forEach(ev => {
      const x = pad + (W - 2*pad) * (ev.day / (days - 1))
      ctx.strokeStyle = ev.type === 'door-open' ? '#f59e0b' : ev.type === 'staffing-peak' ? '#22c55e' : '#64748b'
      ctx.beginPath(); ctx.moveTo(x, pad); ctx.lineTo(x, H - pad); ctx.stroke()
    })

    // axes labels
    ctx.fillStyle = '#cbd5e1'; ctx.font = '11px Inter'; ctx.textAlign = 'center'
    for (let i=0;i<days;i+=5){ const x = pad + (W - 2*pad) * (i/(days-1)); ctx.fillText(`D${i+1}`, x, H - 10) }
  }, [nv, cfu, fs, fe, events])

  return <canvas ref={canvasRef} width={760} height={360} style={{ width: '100%', display: 'block', borderRadius: 10, background: 'rgba(0,0,0,0.2)' }} />
}

export function SamplingPlanOptimizer() {
  const cols = 12
  const rows = 7
  const [maxPoints, setMaxPoints] = useState(8)
  const [opMinutes, setOpMinutes] = useState(30)
  const [minCritical, setMinCritical] = useState(30)

  // risk grid (0..1) + some critical cells
  const grid = useMemo(() => {
    const g: number[][] = []
    for (let r=0;r<rows;r++){
      const row: number[] = []
      for (let c=0;c<cols;c++){
        const base = 0.2 + 0.8*Math.random()
        // make center and a corridor riskier
        const boost = (Math.abs(c - cols/2) < 2 ? 0.4 : 0) + (r === 2 ? 0.3 : 0)
        row.push(Math.min(1, base + boost))
      }
      g.push(row)
    }
    return g
  }, [])

  // Simple greedy selection by risk value, respecting maxPoints and min coverage of "critical" (row 2)
  const flat: Array<{r:number;c:number;v:number}> = []
  grid.forEach((row, r) => row.forEach((v,c) => flat.push({r,c,v})))
  flat.sort((a,b)=>b.v-a.v)

  const picks: Array<{r:number;c:number;v:number}> = []
  let criticalPicked = 0
  flat.forEach(cell => {
    if (picks.length >= maxPoints) return
    if (cell.r === 2) {
      picks.push(cell); criticalPicked++
    } else {
      picks.push(cell)
    }
  })
  const criticalCells = grid[2].length
  const critCoverage = Math.round((criticalPicked/Math.max(1, Math.min(maxPoints, criticalCells))) * 100)

  const totalRisk = flat.reduce((s,x)=>s+x.v,0)
  const selectedRisk = picks.reduce((s,x)=>s+x.v,0)
  const hitProb = Math.min(99, Math.round((selectedRisk/Math.max(0.001,totalRisk))*100))

  // Baseline (Current) plan to compare against
  const [baseline, setBaseline] = useState<Array<{r:number;c:number;v:number}>|undefined>(undefined)
  const [compare, setCompare] = useState(false)
  const baseRisk = baseline?.reduce((s,x)=>s+x.v,0) ?? 0
  const baseHit = baseline ? Math.min(99, Math.round((baseRisk/Math.max(0.001,totalRisk))*100)) : 0

  function exportCSV(){
    const rowsCsv = picks.map(p=>`${p.r},${p.c},${p.v.toFixed(2)}`).join('\n')
    const header = 'row,col,risk\n'
    download('sampling_plan.csv', header + rowsCsv, 'text/csv')
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '260px 1fr 300px', gap: 16 }}>
      <div>
        <SectionHeader title="Sampling Plan Optimizer" subtitle="Največja zaznavnost pod omejitvami" />
        <div style={{ display: 'grid', gap: 12 }}>
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Max točk/dan: {maxPoints}</label>
          <input type="range" min={3} max={20} value={maxPoints} onChange={e=>setMaxPoints(parseInt(e.target.value))} />
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Čas operaterja (min): {opMinutes}</label>
          <input type="range" min={10} max={120} value={opMinutes} onChange={e=>setOpMinutes(parseInt(e.target.value))} />
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Min Grade A/B koridor pokritost: {minCritical}%</label>
          <input type="range" min={0} max={100} value={minCritical} onChange={e=>setMinCritical(parseInt(e.target.value))} />
          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
            <button className="filter-btn" onClick={exportCSV}>Izvozi plan (CSV)</button>
            <button className="filter-btn" onClick={()=>setBaseline(picks)}>Shrani kot Current</button>
            <label style={{ display: 'flex', gap: 6, alignItems: 'center', color: '#cbd5e1' }}>
              <input type="checkbox" checked={compare} onChange={e=>setCompare(e.target.checked)} /> Primerjaj Current vs Proposed
            </label>
          </div>
        </div>
      </div>

      <div style={{ background: 'rgba(2,6,23,0.6)', border: '1px solid rgba(120,119,198,0.2)', borderRadius: 12, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'center', gap: 16, marginBottom: 8, flexWrap: 'wrap' }}>
          <KPI label={compare? 'Proposed hit':'Verjetnost zaznave'} value={`${hitProb}%`} status={hitProb>80?'ok':hitProb>50?'alert':'action'} />
          {compare && baseline && <KPI label="Current hit" value={`${baseHit}%`} status={baseHit>80?'ok':baseHit>50?'alert':'action'} />}
          <KPI label="Pokritost kritične cone" value={`${critCoverage}%`} status={critCoverage>=minCritical?'ok':'alert'} />
          <KPI label="Točke" value={`${picks.length}/${maxPoints}`} status={'ok'} />
        </div>
  <GridHeatmap grid={grid} picks={picks} baseline={compare ? (baseline ?? undefined) : undefined} />
      </div>

      <div>
        <SectionHeader title="Povzetek" subtitle="Plan in učinki" />
        <div style={{ background: 'rgba(124,58,237,0.09)', border: '1px solid rgba(124,58,237,0.4)', borderRadius: 10, padding: 12 }}>
          <ul style={{ margin: 0, paddingLeft: 16, color: '#e6eef8' }}>
            <li>Izbranih točk: {picks.length}</li>
            <li>Ocenjena zaznavnost: {hitProb}%</li>
            {compare && baseline && <li>Current zaznavnost: {baseHit}%</li>}
            <li>Pokritost kritične cone: {critCoverage}% (cilj {minCritical}%)</li>
            <li>Čas operaterja: ~{Math.round(picks.length*3 + opMinutes*0)} min</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

function GridHeatmap({ grid, picks, baseline }:{ grid:number[][]; picks:{r:number;c:number;v:number}[]; baseline?: {r:number;c:number;v:number}[] }){
  const cellW = 36, cellH = 28
  const W = grid[0].length*cellW
  const H = grid.length*cellH
  const canvasRef = useRef<HTMLCanvasElement>(null)
  useEffect(()=>{
    const c = canvasRef.current; if(!c) return
    c.width = W; c.height = H
    const ctx = c.getContext('2d'); if(!ctx) return
    ctx.clearRect(0,0,W,H)
    for(let r=0;r<grid.length;r++){
      for(let cIdx=0;cIdx<grid[r].length;cIdx++){
        const v = grid[r][cIdx]
        const x = cIdx*cellW, y = r*cellH
        const col = `rgba(${Math.round(255*v)}, ${Math.round(80+120*(1-v))}, 120, 0.9)`
        ctx.fillStyle = col
        ctx.fillRect(x, y, cellW-2, cellH-2)
      }
    }
    // baseline overlay (blue)
    baseline?.forEach(p=>{
      const x = p.c*cellW, y = p.r*cellH
      ctx.strokeStyle = '#3b82f6'
      ctx.lineWidth = 2
      ctx.strokeRect(x+3, y+3, cellW-6, cellH-6)
    })
    // picks overlay (yellow)
    picks.forEach(p=>{
      const x = p.c*cellW, y = p.r*cellH
      ctx.strokeStyle = '#eab308'
      ctx.lineWidth = 2
      ctx.strokeRect(x+1, y+1, cellW-4, cellH-4)
      ctx.fillStyle = '#0f172a'
      ctx.font = 'bold 12px Inter'
      ctx.fillText('●', x+cellW/2-4, y+cellH/2+4)
    })
  }, [grid, picks])
  return <canvas ref={canvasRef} width={W} height={H} style={{ width: '100%', borderRadius: 10, background: 'rgba(0,0,0,0.2)' }} />
}

// Airflow + Viable Coupling Explorer
export function AirflowViableExplorer(){
  const [preset, setPreset] = useState<'nominal'|'door-open'|'smoke-align'>('nominal')
  const [showNV, setShowNV] = useState(true)
  const [showViable, setShowViable] = useState(true)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // Generate a small vector field (12x7) with different presets
  const field = useMemo(()=>{
    const cols=12, rows=7
    const vf: Array<{x:number;y:number;vx:number;vy:number}> = []
    for(let r=0;r<rows;r++){
      for(let c=0;c<cols;c++){
        let vx = 0.8, vy = 0
        if (preset==='door-open') {
          // create inflow from left/top
          vx = 0.6 + Math.random()*0.4
          vy = (r<3?0.15:-0.05)
        } else if (preset==='smoke-align') {
          // align vectors diagonally to mimic smoke direction
          vx = 0.5 + (c/cols)
          vy = (r-rows/2)/rows * 0.4
        }
        vf.push({x:c,y:r,vx,vy})
      }
    }
    return {cols:12,rows:7,vf}
  }, [preset])

  // Critical zone near center
  const cz = { x: 6, y: 3, w: 2, h: 2 }

  // Synthetic measurements: NV and viable points clusters
  const pointsNV = useMemo(()=>Array.from({length:18},()=>({x: Math.random()*12, y: Math.random()*7})),[])
  const pointsV = useMemo(()=>Array.from({length:6},()=>({x: 4+Math.random()*6, y: 2+Math.random()*3})),[])

  // Breach marker: count vectors pointing into critical zone boundary
  const breaches = useMemo(()=>{
    let count=0
    field.vf.forEach(vec=>{
      const tipX = vec.x + vec.vx
      const tipY = vec.y + vec.vy
      const before = (vec.x < cz.x)
      const afterEnter = (tipX >= cz.x && tipX <= cz.x+cz.w && tipY >= cz.y && tipY <= cz.y+cz.h)
      if (before && afterEnter) count++
    })
    return count
  }, [field, cz])

  useEffect(()=>{
    const c = canvasRef.current; if(!c) return
    const ctx = c.getContext('2d'); if(!ctx) return
    const W = c.width, H = c.height
    const cols = field.cols, rows = field.rows
    const cw = W/cols, ch = H/rows
    ctx.clearRect(0,0,W,H)
    // background
    ctx.fillStyle = 'rgba(0,0,0,0.25)'; ctx.fillRect(0,0,W,H)
    // draw critical zone
    ctx.fillStyle = 'rgba(239,68,68,0.15)'
    ctx.fillRect(cz.x*cw, cz.y*ch, cz.w*cw, cz.h*ch)
    ctx.strokeStyle = '#ef4444'; ctx.lineWidth = 2
    ctx.strokeRect(cz.x*cw, cz.y*ch, cz.w*cw, cz.h*ch)
    // vectors
    ctx.strokeStyle = '#60a5fa'; ctx.lineWidth = 1.5
    field.vf.forEach(v=>{
      const x = v.x*cw + cw/2, y = v.y*ch + ch/2
      const tx = x + v.vx*10, ty = y + v.vy*10
      ctx.beginPath(); ctx.moveTo(x,y); ctx.lineTo(tx,ty); ctx.stroke()
      // arrow head
      const ang = Math.atan2(ty-y, tx-x)
      ctx.beginPath(); ctx.moveTo(tx,ty)
      ctx.lineTo(tx-4*Math.cos(ang-0.5), ty-4*Math.sin(ang-0.5))
      ctx.lineTo(tx-4*Math.cos(ang+0.5), ty-4*Math.sin(ang+0.5))
      ctx.closePath(); ctx.fillStyle = '#60a5fa'; ctx.fill()
    })
    // NV points
    if (showNV){
      ctx.fillStyle = '#06b6d4'
      pointsNV.forEach(p=>{ ctx.beginPath(); ctx.arc(p.x*cw, p.y*ch, 3, 0, Math.PI*2); ctx.fill() })
    }
    // Viable points
    if (showViable){
      ctx.fillStyle = '#22c55e'
      pointsV.forEach(p=>{ ctx.beginPath(); ctx.arc(p.x*cw, p.y*ch, 3.5, 0, Math.PI*2); ctx.fill() })
    }
  }, [field, showNV, showViable])

  const mitigation = useMemo(()=>{
    const list = [] as string[]
    if (preset==='door-open') list.push('Uskladi zaporedje vrat; minimiziraj sočasna odpiranja')
    if (breaches>12) list.push('Dodaj zaslonitev/baffle pred kritično cono')
    list.push('Potrdi “first air” s smoke testom')
    return list
  }, [preset, breaches])

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '260px 1fr 300px', gap: 16 }}>
      <div>
        <SectionHeader title="Airflow + Viable Explorer" subtitle="Ali tok zraka pojasni viables?" />
        <div style={{ display: 'grid', gap: 12 }}>
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Tok preset</label>
          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
            <button className={preset==='nominal'?'filter-btn active':'filter-btn'} onClick={()=>setPreset('nominal')}>Nominal</button>
            <button className={preset==='door-open'?'filter-btn active':'filter-btn'} onClick={()=>setPreset('door-open')}>Door-open</button>
            <button className={preset==='smoke-align'?'filter-btn active':'filter-btn'} onClick={()=>setPreset('smoke-align')}>Smoke align</button>
          </div>
          <label style={{ display: 'flex', gap: 8, color: '#cbd5e1' }}><input type="checkbox" checked={showNV} onChange={e=>setShowNV(e.target.checked)} /> Prikaži NV</label>
          <label style={{ display: 'flex', gap: 8, color: '#cbd5e1' }}><input type="checkbox" checked={showViable} onChange={e=>setShowViable(e.target.checked)} /> Prikaži Viable</label>
          <div style={{ marginTop: 8, color: '#94a3b8', fontSize: 12 }}>Breach markerji: {breaches}</div>
        </div>
      </div>
      <div style={{ background: 'rgba(2,6,23,0.6)', border: '1px solid rgba(120,119,198,0.2)', borderRadius: 12, padding: 16 }}>
        <KPI label="Breach markerji" value={`${breaches}`} status={breaches>12?'action':breaches>6?'alert':'ok'} />
        <canvas ref={canvasRef} width={760} height={360} style={{ width: '100%', display: 'block', borderRadius: 10, background: 'rgba(0,0,0,0.2)', marginTop: 8 }} />
      </div>
      <div>
        <SectionHeader title="Mitigacije" subtitle="Predlagani ukrepi" />
        <ul style={{ margin: 0, paddingLeft: 16, color: '#e6eef8' }}>{mitigation.map((m,i)=>(<li key={i}>{m}</li>))}</ul>
      </div>
    </div>
  )
}

// Alert/Action Limit Designer
export function AlertActionLimitDesigner(){
  const [strategy, setStrategy] = useState<'stable'|'seasonal'|'strict'>('stable')
  const [falseAlarm, setFalseAlarm] = useState(5) // % target
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // Synthetic baseline data
  const data = useMemo(()=>{
    const arr: number[] = []
    for(let i=0;i<300;i++){
      const base = 40 + 15*Math.sin(i/20) + (Math.random()*10)
      arr.push(base)
    }
    return arr
  }, [])

  function quantile(a:number[], q:number){
    const s = [...a].sort((x,y)=>x-y)
    const pos = (s.length-1)*q
    const base = Math.floor(pos)
    const rest = pos-base
    return s[base] + (s[base+1]-s[base] || 0)*rest
  }

  // Proposed limits based on strategy + falseAlarm target
  const alertQ = strategy==='strict' ? 0.90 : strategy==='seasonal' ? 0.92 : 0.95 - (falseAlarm/1000)
  const actionQ = Math.min(0.995, alertQ + 0.03)
  const alert = Math.round(quantile(data, alertQ))
  const action = Math.round(quantile(data, actionQ))
  const baselineAlerts = data.filter(v=>v>=100).length
  const newAlerts = data.filter(v=>v>=alert && v<action).length
  const newActions = data.filter(v=>v>=action).length

  useEffect(()=>{
    const c = canvasRef.current; if(!c) return
    const ctx = c.getContext('2d'); if(!ctx) return
    const W=c.width, H=c.height, pad=40
    ctx.clearRect(0,0,W,H)
    // histogram buckets
    const max = Math.max(120, ...data)
    const bins = 20
    const hist = new Array(bins).fill(0)
    data.forEach(v=>{
      const idx = Math.min(bins-1, Math.floor((v/max)*bins))
      hist[idx]++
    })
    const maxBin = Math.max(...hist)
    const bw = (W-2*pad)/bins
    for(let i=0;i<bins;i++){
      const h = (H-2*pad) * (hist[i]/maxBin)
      const x = pad + i*bw
      const y = H - pad - h
      ctx.fillStyle = 'rgba(99,102,241,0.5)'
      ctx.fillRect(x,y,bw-2,h)
    }
    // draw limits
    function xFor(val:number){ return pad + (W-2*pad)*(val/max) }
    ctx.strokeStyle = '#f59e0b'; ctx.beginPath(); const xa=xFor(alert); ctx.moveTo(xa,pad); ctx.lineTo(xa,H-pad); ctx.stroke()
    ctx.strokeStyle = '#ef4444'; ctx.beginPath(); const xx=xFor(action); ctx.moveTo(xx,pad); ctx.lineTo(xx,H-pad); ctx.stroke()
    ctx.fillStyle = '#cbd5e1'; ctx.font = '11px Inter'; ctx.textAlign = 'center'
    ctx.fillText('Alert', xa, pad-8)
    ctx.fillText('Action', xx, pad-8)
  }, [data, alert, action])

  function exportPolicy(){
    const payload = { strategy, falseAlarm, alert, action, impact: { alerts:newAlerts, actions:newActions } }
    download('alert_action_policy.json', JSON.stringify(payload, null, 2), 'application/json')
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '260px 1fr 300px', gap: 16 }}>
      <div>
        <SectionHeader title="Alert/Action Limit Designer" subtitle="Manj lažnih alarmov, brez zamujenih signalov" />
        <div style={{ display: 'grid', gap: 12 }}>
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Strategija</label>
          <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
            <button className={strategy==='stable'?'filter-btn active':'filter-btn'} onClick={()=>setStrategy('stable')}>Stable baseline</button>
            <button className={strategy==='seasonal'?'filter-btn active':'filter-btn'} onClick={()=>setStrategy('seasonal')}>Seasonal</button>
            <button className={strategy==='strict'?'filter-btn active':'filter-btn'} onClick={()=>setStrategy('strict')}>Strict compliance</button>
          </div>
          <label style={{ color: '#cbd5e1', fontSize: 13 }}>Target false-alarms: {falseAlarm}%</label>
          <input type="range" min={1} max={10} value={falseAlarm} onChange={e=>setFalseAlarm(parseInt(e.target.value))} />
          <button className="filter-btn" onClick={exportPolicy}>Izvozi politiko</button>
        </div>
      </div>
      <div style={{ background: 'rgba(2,6,23,0.6)', border: '1px solid rgba(120,119,198,0.2)', borderRadius: 12, padding: 16 }}>
        <div style={{ display: 'flex', gap: 16, justifyContent: 'center', marginBottom: 8 }}>
          <KPI label="Predlagan Alert" value={`${alert}`} status={'ok'} />
          <KPI label="Predlagan Action" value={`${action}`} status={'alert'} />
        </div>
        <canvas ref={canvasRef} width={760} height={360} style={{ width: '100%', display: 'block', borderRadius: 10, background: 'rgba(0,0,0,0.2)' }} />
      </div>
      <div>
        <SectionHeader title="Učinek" subtitle="Before/After (simulirano)" />
        <ul style={{ margin: 0, paddingLeft: 16, color: '#e6eef8' }}>
          <li>Novi Alerts: {newAlerts}</li>
          <li>Novi Actions: {newActions}</li>
        </ul>
      </div>
    </div>
  )
}

// ============================================
// NEW LESSON 123 – Particle Contamination Enhanced Visualizations
// ============================================

/**
 * 1. PARTICLE SIZE COMPARATOR
 * Interactive visualization comparing particle sizes with zoom functionality
 */
export function ParticleSizeComparator() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [zoomLevel, setZoomLevel] = useState(1) // 1 = baseline, 10 = 10x zoom
  const [hoveredItem, setHoveredItem] = useState<string | null>(null)

  const particles = [
    { name: 'Virus', size: 0.1, color: '#ef4444', examples: 'SARS-CoV-2, Influenza (prevažajo se na delcih)' },
    { name: 'Dimni delci', size: 0.5, color: '#6b7280', examples: 'Cigaretni dim, emisije' },
    { name: 'Kritični delec (0.5μm)', size: 0.5, color: '#8b5cf6', examples: 'Mejna velikost za razred A/B' },
    { name: 'Bakterija', size: 2, color: '#22c55e', examples: 'Staphylococcus, E. coli' },
    { name: 'Sekundarni delec (5μm)', size: 5, color: '#f59e0b', examples: 'Kontrolna točka za vse razrede' },
    { name: 'Prosti očesu viden (10μm)', size: 10, color: '#3b82f6', examples: 'Minimalna velikost za oko' },
    { name: 'Prašni delec', size: 25, color: '#a855f7', examples: 'Tipičen prašni delec' },
    { name: 'Človeška lasica', size: 70, color: '#ec4899', examples: '~70μm v premeru' }
  ]

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    const handleResize = () => {
      const dpr = window.devicePixelRatio || 1
      const rect = canvas.getBoundingClientRect()
      canvas.width = Math.max(1, Math.floor(rect.width * dpr))
      canvas.height = Math.max(1, Math.floor(500 * dpr))
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0)
    }

    const draw = () => {
      const w = canvas.width / (window.devicePixelRatio || 1)
      const h = canvas.height / (window.devicePixelRatio || 1)

      // Background
      ctx.fillStyle = '#0f172a'
      ctx.fillRect(0, 0, w, h)

      // Grid lines for scale reference
      ctx.strokeStyle = '#1e293b'
      ctx.lineWidth = 1
      for (let i = 0; i <= 10; i++) {
        const y = (h / 10) * i
        ctx.beginPath()
        ctx.moveTo(0, y)
        ctx.lineTo(w, y)
        ctx.stroke()
      }

      // Title
      ctx.fillStyle = '#e2e8f0'
      ctx.font = 'bold 16px sans-serif'
      ctx.fillText('Primerjava Velikosti Delcev', 20, 30)

      // Zoom indicator
      ctx.fillStyle = '#94a3b8'
      ctx.font = '12px sans-serif'
      ctx.fillText(`Zoom: ${zoomLevel}x`, w - 100, 30)

      // Draw particles scaled by zoom
      const baseScale = 2 // baseline pixel scaling
      const yStart = 80
      const spacing = 45

      particles.forEach((p, idx) => {
        const y = yStart + idx * spacing
        const radius = Math.max(2, (p.size * baseScale * zoomLevel) / 10)
        const x = 150

        // Circle
        ctx.fillStyle = p.color
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, Math.PI * 2)
        ctx.fill()

        // Label
        ctx.fillStyle = hoveredItem === p.name ? '#ffffff' : '#cbd5e1'
        ctx.font = hoveredItem === p.name ? 'bold 13px sans-serif' : '13px sans-serif'
        ctx.fillText(`${p.name} (${p.size}μm)`, x + radius + 15, y + 5)

        // Hover info
        if (hoveredItem === p.name) {
          ctx.fillStyle = '#64748b'
          ctx.font = '11px sans-serif'
          ctx.fillText(p.examples, x + radius + 15, y + 20)
        }
      })

      // Eye icon indicator
      const eyeY = yStart + 5 * spacing // "Prosti očesu viden" position
      ctx.fillStyle = '#3b82f6'
      ctx.font = '20px sans-serif'
      ctx.fillText('👁️', 30, eyeY + 5)
    }

    handleResize()
    draw()
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [zoomLevel, hoveredItem, particles])

  return (
    <div style={{ background: '#0f172a', borderRadius: 8, padding: 24 }}>
      <div style={{ marginBottom: 16 }}>
        <label style={{ color: '#cbd5e1', fontSize: 14, display: 'block', marginBottom: 8 }}>
          🔍 Povečava: {zoomLevel}x
        </label>
        <input
          type="range"
          min="1"
          max="50"
          step="1"
          value={zoomLevel}
          onChange={(e) => setZoomLevel(Number(e.target.value))}
          style={{ width: '100%', accentColor: '#8b5cf6' }}
        />
        <div style={{ color: '#64748b', fontSize: 12, marginTop: 4 }}>
          Povlecite za povečavo ali pomanjšavo prikaza
        </div>
      </div>

      <canvas
        ref={canvasRef}
        style={{ width: '100%', height: 500, borderRadius: 4, cursor: 'pointer' }}
        onMouseMove={(e) => {
          const rect = e.currentTarget.getBoundingClientRect()
          const y = e.clientY - rect.top
          const idx = Math.floor((y - 80) / 45)
          if (idx >= 0 && idx < particles.length) {
            setHoveredItem(particles[idx].name)
          } else {
            setHoveredItem(null)
          }
        }}
        onMouseLeave={() => setHoveredItem(null)}
      />

      <div style={{ marginTop: 16, padding: 12, background: '#1e293b', borderRadius: 6 }}>
        <div style={{ color: '#e2e8f0', fontSize: 13, marginBottom: 8 }}>
          <strong>💡 Ključne Informacije:</strong>
        </div>
        <ul style={{ margin: 0, paddingLeft: 20, color: '#94a3b8', fontSize: 12, lineHeight: 1.6 }}>
          <li>Delci pod 10μm niso vidni s prostim očesom</li>
          <li>0.5μm je kritična velikost za razrede A/B</li>
          <li>Bakterije (0.5-5μm) se prevažajo na večjih delcih</li>
          <li>Človeška lasica je ~140x večja od kritičnega delca</li>
        </ul>
      </div>
    </div>
  )
}

/**
 * 2. PERSONNEL PARTICLE GENERATOR
 * Animated visualization of particle emission from personnel
 */
export function PersonnelParticleGenerator() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [activity, setActivity] = useState('standing')
  const [clothing, setClothing] = useState('cleanroom')
  const [particleCount, setParticleCount] = useState(0)

  const activityData: Record<string, { rate: number, label: string, multiplier: number }> = {
    standing: { rate: 100000, label: '🧍 Stanje mirno', multiplier: 1 },
    walking: { rate: 5000000, label: '🚶 Počasna hoja', multiplier: 50 },
    fastWalk: { rate: 10000000, label: '🏃 Hitra hoja', multiplier: 100 },
    armRaise: { rate: 2500000, label: '💪 Dvigovanje rok', multiplier: 25 },
    dressing: { rate: 50000000, label: '👔 Oblačenje', multiplier: 500 }
  }

  const clothingMultiplier = clothing === 'cleanroom' ? 1 : 10

  const currentRate = activityData[activity].rate * clothingMultiplier

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let particles: Array<{ x: number; y: number; vx: number; vy: number; life: number; alpha: number }> = []
    let animationId = 0
    let lastTime = Date.now()

    const handleResize = () => {
      const dpr = window.devicePixelRatio || 1
      const rect = canvas.getBoundingClientRect()
      canvas.width = Math.max(1, Math.floor(rect.width * dpr))
      canvas.height = Math.max(1, Math.floor(400 * dpr))
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0)
    }

    const animate = () => {
      const w = canvas.width / (window.devicePixelRatio || 1)
      const h = canvas.height / (window.devicePixelRatio || 1)
      const now = Date.now()
      const dt = (now - lastTime) / 1000
      lastTime = now

      // Background
      ctx.fillStyle = '#0f172a'
      ctx.fillRect(0, 0, w, h)

      // Draw human figure (simplified)
      const figureX = w / 2
      const figureY = h / 2
      ctx.fillStyle = clothing === 'cleanroom' ? '#3b82f6' : '#94a3b8'
      
      // Head
      ctx.beginPath()
      ctx.arc(figureX, figureY - 50, 20, 0, Math.PI * 2)
      ctx.fill()

      // Body
      ctx.fillRect(figureX - 15, figureY - 30, 30, 60)

      // Arms (animate based on activity)
      const armAngle = activity === 'armRaise' ? -Math.PI / 4 : Math.PI / 6
      ctx.save()
      ctx.translate(figureX, figureY - 20)
      ctx.rotate(armAngle)
      ctx.fillRect(0, 0, 40, 8)
      ctx.restore()

      ctx.save()
      ctx.translate(figureX, figureY - 20)
      ctx.rotate(-armAngle)
      ctx.fillRect(-40, 0, 40, 8)
      ctx.restore()

      // Legs
      ctx.fillRect(figureX - 15, figureY + 30, 12, 40)
      ctx.fillRect(figureX + 3, figureY + 30, 12, 40)

      // Generate new particles based on activity rate
      const particlesPerFrame = (currentRate * dt) / 60 // Normalize to ~60fps
      for (let i = 0; i < particlesPerFrame; i++) {
        particles.push({
          x: figureX + (Math.random() - 0.5) * 40,
          y: figureY + (Math.random() - 0.5) * 80,
          vx: (Math.random() - 0.5) * 100,
          vy: Math.random() * -50 - 20,
          life: 2,
          alpha: 1
        })
      }

      // Update and draw particles
      particles = particles.filter(p => {
        p.x += p.vx * dt
        p.y += p.vy * dt
        p.vy += 50 * dt // Gravity
        p.life -= dt
        p.alpha = Math.max(0, p.life / 2)

        if (p.life > 0 && p.y < h + 50) {
          ctx.fillStyle = `rgba(139, 92, 246, ${p.alpha})`
          ctx.beginPath()
          ctx.arc(p.x, p.y, 2, 0, Math.PI * 2)
          ctx.fill()
          return true
        }
        return false
      })

      setParticleCount(particles.length)

      // Info text
      ctx.fillStyle = '#e2e8f0'
      ctx.font = 'bold 14px sans-serif'
      ctx.fillText(`Delci/min: ${(currentRate / 1000).toFixed(0)}k`, 20, 30)

      ctx.fillStyle = '#94a3b8'
      ctx.font = '12px sans-serif'
      ctx.fillText(`Aktivni delci: ${particles.length}`, 20, 50)

      animationId = requestAnimationFrame(animate)
    }

    handleResize()
    animate()
    window.addEventListener('resize', handleResize)

    return () => {
      cancelAnimationFrame(animationId)
      window.removeEventListener('resize', handleResize)
    }
  }, [activity, clothing, currentRate])

  return (
    <div style={{ background: '#0f172a', borderRadius: 8, padding: 24 }}>
      <SectionHeader title="👤 Generator Delcev Osebja" subtitle="80% vseh delcev izvira iz osebja" />

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginBottom: 16 }}>
        <div>
          <label style={{ color: '#cbd5e1', fontSize: 14, display: 'block', marginBottom: 8 }}>
            Aktivnost:
          </label>
          <select
            value={activity}
            onChange={(e) => setActivity(e.target.value)}
            style={{
              width: '100%',
              padding: 8,
              borderRadius: 4,
              border: '1px solid #334155',
              background: '#1e293b',
              color: '#e2e8f0',
              fontSize: 13
            }}
          >
            {Object.entries(activityData).map(([key, val]) => (
              <option key={key} value={key}>{val.label}</option>
            ))}
          </select>
        </div>

        <div>
          <label style={{ color: '#cbd5e1', fontSize: 14, display: 'block', marginBottom: 8 }}>
            Oblačila:
          </label>
          <select
            value={clothing}
            onChange={(e) => setClothing(e.target.value)}
            style={{
              width: '100%',
              padding: 8,
              borderRadius: 4,
              border: '1px solid #334155',
              background: '#1e293b',
              color: '#e2e8f0',
              fontSize: 13
            }}
          >
            <option value="cleanroom">🧪 Čistoprostorska oblačila</option>
            <option value="regular">👕 Standardna oblačila (10x več delcev)</option>
          </select>
        </div>
      </div>

      <canvas
        ref={canvasRef}
        style={{ width: '100%', height: 400, borderRadius: 4, background: '#0f172a' }}
      />

      <div style={{ marginTop: 16, padding: 12, background: '#1e293b', borderRadius: 6 }}>
        <div style={{ color: '#e2e8f0', fontSize: 13, marginBottom: 8 }}>
          <strong>📊 Trenutna Emisija: {(currentRate / 1_000_000).toFixed(1)} milijonov delcev/min</strong>
        </div>
        <div style={{ color: '#94a3b8', fontSize: 12, lineHeight: 1.6 }}>
          <strong>Viri delcev iz osebja:</strong>
          <ul style={{ margin: '8px 0 0 0', paddingLeft: 20 }}>
            <li>Luščenje kože: Miljone celic na dan</li>
            <li>Oblačila: Vlakna se sproščajo pri gibanju</li>
            <li>Dihanje: Aerosoli iz dihalnih poti</li>
            <li>Lasje in dlake: Nenehno odpadajo</li>
            <li>Gibanje: Dviguje že obstoječe delce</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

/**
 * 3. AIRFLOW & PARTICLE TRAJECTORY SIMULATOR
 * 2D visualization of cleanroom airflow and particle paths
 */
export function AirflowParticleTrajectory() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [ventilationType, setVentilationType] = useState<'laminar' | 'turbulent' | 'mixed'>('laminar')
  const [showDeadZones, setShowDeadZones] = useState(false)
  const [particleSource, setParticleSource] = useState<'door' | 'personnel' | 'equipment'>('personnel')

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let particles: Array<{ x: number; y: number; vx: number; vy: number; life: number }> = []
    let animationId = 0
    let frame = 0

    const handleResize = () => {
      const dpr = window.devicePixelRatio || 1
      const rect = canvas.getBoundingClientRect()
      canvas.width = Math.max(1, Math.floor(rect.width * dpr))
      canvas.height = Math.max(1, Math.floor(500 * dpr))
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0)
    }

    const getVelocityField = (x: number, y: number, w: number, h: number) => {
      if (ventilationType === 'laminar') {
        // Vertical laminar flow (top to bottom)
        return { vx: 0, vy: 100 }
      } else if (ventilationType === 'turbulent') {
        // Turbulent with eddies
        const noise = Math.sin(x * 0.05 + frame * 0.1) * Math.cos(y * 0.05)
        return { vx: noise * 30, vy: 80 + noise * 20 }
      } else {
        // Mixed: laminar center, turbulent edges
        const centerDist = Math.abs(x - w / 2)
        if (centerDist < w * 0.3) {
          return { vx: 0, vy: 100 }
        } else {
          const noise = Math.sin(x * 0.05 + frame * 0.1)
          return { vx: noise * 40, vy: 60 + noise * 30 }
        }
      }
    }

    const animate = () => {
      const w = canvas.width / (window.devicePixelRatio || 1)
      const h = canvas.height / (window.devicePixelRatio || 1)
      frame++

      // Background
      ctx.fillStyle = '#0f172a'
      ctx.fillRect(0, 0, w, h)

      // Draw room outline
      ctx.strokeStyle = '#334155'
      ctx.lineWidth = 2
      ctx.strokeRect(40, 40, w - 80, h - 80)

      // HEPA filter at top
      ctx.fillStyle = '#3b82f6'
      ctx.fillRect(40, 40, w - 80, 20)
      ctx.fillStyle = '#e2e8f0'
      ctx.font = '12px sans-serif'
      ctx.fillText('HEPA Filter', w / 2 - 40, 54)

      // Exhaust at bottom
      ctx.fillStyle = '#ef4444'
      ctx.fillRect(40, h - 60, w - 80, 20)
      ctx.fillStyle = '#e2e8f0'
      ctx.fillText('Izpuh', w / 2 - 20, h - 46)

      // Draw velocity field arrows (flow visualization)
      ctx.strokeStyle = '#475569'
      ctx.lineWidth = 1
      for (let x = 80; x < w - 80; x += 60) {
        for (let y = 100; y < h - 100; y += 60) {
          const vel = getVelocityField(x, y, w, h)
          const len = Math.min(20, Math.sqrt(vel.vx ** 2 + vel.vy ** 2) / 5)
          const angle = Math.atan2(vel.vy, vel.vx)
          
          ctx.save()
          ctx.translate(x, y)
          ctx.rotate(angle)
          ctx.beginPath()
          ctx.moveTo(0, 0)
          ctx.lineTo(len, 0)
          ctx.lineTo(len - 4, -3)
          ctx.moveTo(len, 0)
          ctx.lineTo(len - 4, 3)
          ctx.stroke()
          ctx.restore()
        }
      }

      // Dead zones (if enabled)
      if (showDeadZones && ventilationType !== 'laminar') {
        ctx.fillStyle = 'rgba(239, 68, 68, 0.2)'
        // Corners are typical dead zones in turbulent flow
        ctx.fillRect(40, 40, 80, 80)
        ctx.fillRect(w - 120, 40, 80, 80)
        ctx.fillStyle = '#ef4444'
        ctx.font = '11px sans-serif'
        ctx.fillText('Mrtva cona', 50, 70)
        ctx.fillText('Mrtva cona', w - 110, 70)
      }

      // Particle source icon
      const sourcePos = particleSource === 'door' 
        ? { x: w - 100, y: h / 2 }
        : particleSource === 'personnel'
        ? { x: w / 2, y: h / 2 }
        : { x: w / 3, y: h - 150 }

      ctx.fillStyle = '#8b5cf6'
      ctx.beginPath()
      ctx.arc(sourcePos.x, sourcePos.y, 15, 0, Math.PI * 2)
      ctx.fill()
      ctx.fillStyle = '#e2e8f0'
      ctx.font = '18px sans-serif'
      ctx.fillText(particleSource === 'door' ? '🚪' : particleSource === 'personnel' ? '👤' : '⚙️', sourcePos.x - 9, sourcePos.y + 6)

      // Generate particles
      if (frame % 5 === 0) {
        particles.push({
          x: sourcePos.x + (Math.random() - 0.5) * 30,
          y: sourcePos.y + (Math.random() - 0.5) * 30,
          vx: 0,
          vy: 0,
          life: 200
        })
      }

      // Update particles
      particles = particles.filter(p => {
        const vel = getVelocityField(p.x, p.y, w, h)
        p.vx = vel.vx
        p.vy = vel.vy
        p.x += p.vx * 0.016
        p.y += p.vy * 0.016
        p.life--

        const inBounds = p.x > 40 && p.x < w - 40 && p.y > 40 && p.y < h - 40
        if (p.life > 0 && inBounds) {
          const alpha = Math.min(1, p.life / 50)
          ctx.fillStyle = `rgba(139, 92, 246, ${alpha})`
          ctx.beginPath()
          ctx.arc(p.x, p.y, 3, 0, Math.PI * 2)
          ctx.fill()
          return true
        }
        return false
      })

      // Info text
      ctx.fillStyle = '#e2e8f0'
      ctx.font = 'bold 13px sans-serif'
      ctx.fillText(`Tip ventilacije: ${ventilationType === 'laminar' ? 'Laminarni tok' : ventilationType === 'turbulent' ? 'Turbulentni tok' : 'Mešani tok'}`, 50, h - 20)

      animationId = requestAnimationFrame(animate)
    }

    handleResize()
    animate()
    window.addEventListener('resize', handleResize)

    return () => {
      cancelAnimationFrame(animationId)
      window.removeEventListener('resize', handleResize)
    }
  }, [ventilationType, showDeadZones, particleSource])

  return (
    <div style={{ background: '#0f172a', borderRadius: 8, padding: 24 }}>
      <SectionHeader title="🌊 Simulator Zračnih Tokov in Poti Delcev" subtitle="Vizualizacija gibanja delcev skozi čist prostor" />

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 12, marginBottom: 16 }}>
        <div>
          <label style={{ color: '#cbd5e1', fontSize: 13, display: 'block', marginBottom: 6 }}>Tip ventilacije:</label>
          <select
            value={ventilationType}
            onChange={(e) => setVentilationType(e.target.value as any)}
            style={{
              width: '100%',
              padding: 8,
              borderRadius: 4,
              border: '1px solid #334155',
              background: '#1e293b',
              color: '#e2e8f0',
              fontSize: 13
            }}
          >
            <option value="laminar">Laminarni tok (Razred A/B)</option>
            <option value="turbulent">Turbulentni tok (Razred C/D)</option>
            <option value="mixed">Mešani tok</option>
          </select>
        </div>

        <div>
          <label style={{ color: '#cbd5e1', fontSize: 13, display: 'block', marginBottom: 6 }}>Vir delcev:</label>
          <select
            value={particleSource}
            onChange={(e) => setParticleSource(e.target.value as any)}
            style={{
              width: '100%',
              padding: 8,
              borderRadius: 4,
              border: '1px solid #334155',
              background: '#1e293b',
              color: '#e2e8f0',
              fontSize: 13
            }}
          >
            <option value="door">🚪 Vrata (vnos)</option>
            <option value="personnel">👤 Osebje (center)</option>
            <option value="equipment">⚙️ Oprema (spodaj)</option>
          </select>
        </div>

        <div style={{ display: 'flex', alignItems: 'flex-end' }}>
          <label style={{ display: 'flex', alignItems: 'center', color: '#cbd5e1', fontSize: 13, cursor: 'pointer' }}>
            <input
              type="checkbox"
              checked={showDeadZones}
              onChange={(e) => setShowDeadZones(e.target.checked)}
              style={{ marginRight: 8, accentColor: '#8b5cf6' }}
            />
            Prikaži mrtve cone
          </label>
        </div>
      </div>

      <canvas
        ref={canvasRef}
        style={{ width: '100%', height: 500, borderRadius: 4, background: '#0f172a' }}
      />

      <div style={{ marginTop: 16, padding: 12, background: '#1e293b', borderRadius: 6, color: '#94a3b8', fontSize: 12, lineHeight: 1.6 }}>
        <strong style={{ color: '#e2e8f0' }}>💡 Ključne Informacije:</strong>
        <ul style={{ margin: '8px 0 0 0', paddingLeft: 20 }}>
          <li><strong>Laminarni tok:</strong> Enosmerni, konstanten tok zraka - idealen za razrede A/B (minimalne turbulence)</li>
          <li><strong>Turbulentni tok:</strong> Mešanje zraka - primeren za razrede C/D (stroškovno učinkovitejši)</li>
          <li><strong>Mrtve cone:</strong> Območja s slabo cirkulacijo kjer se delci nabirajo (kotički, za opremo)</li>
          <li>Pravilna postavitev opreme in vhodov je kritična za preprečevanje mrtvih con</li>
        </ul>
      </div>
    </div>
  )
}

/**
 * 4. ISO CLASSIFICATION STANDARDS EXPLORER
 * Interactive table with cleanroom classification data
 */
export function ISOClassificationExplorer() {
  const [state, setState] = useState<'at-rest' | 'in-operation'>('at-rest')
  const [filterSize, setFilterSize] = useState<'0.5' | '5'>('0.5')
  const [userInput, setUserInput] = useState('')
  const [detectedClass, setDetectedClass] = useState<string | null>(null)

  // ISO classification data (particles/m³)
  const classificationData = [
    {
      grade: 'A',
      iso: 'ISO 5',
      atRest: { '0.5': 3520, '5': 20 },
      inOperation: { '0.5': 3520, '5': 20 }
    },
    {
      grade: 'B',
      iso: 'ISO 5',
      atRest: { '0.5': 3520, '5': 29 },
      inOperation: { '0.5': 352000, '5': 2900 }
    },
    {
      grade: 'C',
      iso: 'ISO 7',
      atRest: { '0.5': 352000, '5': 2900 },
      inOperation: { '0.5': 3520000, '5': 29000 }
    },
    {
      grade: 'D',
      iso: 'ISO 8',
      atRest: { '0.5': 3520000, '5': 29000 },
      inOperation: { '0.5': 'Not defined', '5': 'Not defined' }
    }
  ]

  const findClass = () => {
    const count = Number(userInput)
    if (isNaN(count) || count <= 0) {
      setDetectedClass('Neveljavna vrednost')
      return
    }

    for (const cls of classificationData) {
      const limit = state === 'at-rest' ? cls.atRest[filterSize] : cls.inOperation[filterSize]
      if (typeof limit === 'number' && count <= limit) {
        setDetectedClass(`Razred ${cls.grade} (${cls.iso})`)
        return
      }
    }
    setDetectedClass('Presega razred D')
  }

  const handleExport = (format: 'csv' | 'pdf') => {
    const headers = ['Razred', 'ISO', `At Rest (${filterSize}μm)`, `In Operation (${filterSize}μm)`]
    const rows = classificationData.map(cls => [
      cls.grade,
      cls.iso,
      String(cls.atRest[filterSize]),
      String(cls.inOperation[filterSize])
    ])

    if (format === 'csv') {
      exportToCSV(`iso-classification-${filterSize}um-${state}`, [headers, ...rows])
    } else {
      exportToPDF(`iso-classification-${filterSize}um-${state}` , {
        title: 'ISO Klasifikacija Čistih Prostorov',
        sections: [
          { heading: 'Pregled meja delcev', table: { headers, rows } }
        ]
      })
    }
  }

  return (
    <div style={{ background: '#0f172a', borderRadius: 8, padding: 24 }}>
      <SectionHeader title="📉 ISO Raziskovalec Standardov" subtitle="Interaktivna referenca za klasifikacijo čistih prostorov" />

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: 12, marginBottom: 16 }}>
        <div>
          <label style={{ color: '#cbd5e1', fontSize: 13, display: 'block', marginBottom: 6 }}>Stanje:</label>
          <select
            value={state}
            onChange={(e) => setState(e.target.value as any)}
            style={{
              width: '100%',
              padding: 8,
              borderRadius: 4,
              border: '1px solid #334155',
              background: '#1e293b',
              color: '#e2e8f0',
              fontSize: 13
            }}
          >
            <option value="at-rest">Mirovanje (At Rest)</option>
            <option value="in-operation">Delovanje (In Operation)</option>
          </select>
        </div>

        <div>
          <label style={{ color: '#cbd5e1', fontSize: 13, display: 'block', marginBottom: 6 }}>Velikost delca:</label>
          <select
            value={filterSize}
            onChange={(e) => setFilterSize(e.target.value as any)}
            style={{
              width: '100%',
              padding: 8,
              borderRadius: 4,
              border: '1px solid #334155',
              background: '#1e293b',
              color: '#e2e8f0',
              fontSize: 13
            }}
          >
            <option value="0.5">≥ 0.5 μm</option>
            <option value="5">≥ 5 μm</option>
          </select>
        </div>
      </div>

      <div style={{ overflowX: 'auto', marginBottom: 16 }}>
        <table style={{ width: '100%', borderCollapse: 'collapse', background: '#1e293b', borderRadius: 6, overflow: 'hidden' }}>
          <thead>
            <tr style={{ background: '#8b5cf6', color: '#fff' }}>
              <th style={{ padding: 12, textAlign: 'left', fontSize: 13 }}>Razred</th>
              <th style={{ padding: 12, textAlign: 'left', fontSize: 13 }}>ISO</th>
              <th style={{ padding: 12, textAlign: 'right', fontSize: 13 }}>Delci/m³ (≥{filterSize}μm)</th>
              <th style={{ padding: 12, textAlign: 'center', fontSize: 13 }}>Vizualizacija</th>
            </tr>
          </thead>
          <tbody>
            {classificationData.map((cls, idx) => {
              const limit = state === 'at-rest' ? cls.atRest[filterSize] : cls.inOperation[filterSize]
              const maxLimit = 3520000
              const barWidth = typeof limit === 'number' ? (limit / maxLimit) * 100 : 0

              return (
                <tr key={cls.grade} style={{ borderTop: idx > 0 ? '1px solid #334155' : 'none' }}>
                  <td style={{ padding: 12, color: '#e2e8f0', fontWeight: 'bold' }}>{cls.grade}</td>
                  <td style={{ padding: 12, color: '#94a3b8', fontSize: 12 }}>{cls.iso}</td>
                  <td style={{ padding: 12, color: '#cbd5e1', textAlign: 'right', fontFamily: 'monospace' }}>
                    {typeof limit === 'number' ? limit.toLocaleString() : limit}
                  </td>
                  <td style={{ padding: 12 }}>
                    <div style={{ background: '#0f172a', borderRadius: 4, height: 20, position: 'relative', overflow: 'hidden' }}>
                      <div
                        style={{
                          position: 'absolute',
                          left: 0,
                          top: 0,
                          height: '100%',
                          width: `${barWidth}%`,
                          background: `linear-gradient(to right, #8b5cf6, #a855f7)`,
                          transition: 'width 0.3s ease'
                        }}
                      />
                    </div>
                  </td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </div>

      <div style={{ background: '#1e293b', borderRadius: 6, padding: 16, marginBottom: 16 }}>
        <div style={{ color: '#e2e8f0', fontSize: 14, marginBottom: 12, fontWeight: 'bold' }}>
          🔍 Najdi moj čist prostor
        </div>
        <div style={{ display: 'flex', gap: 8, alignItems: 'flex-end' }}>
          <div style={{ flex: 1 }}>
            <label style={{ color: '#cbd5e1', fontSize: 12, display: 'block', marginBottom: 4 }}>
              Vnesi izmerjeno število delcev/m³:
            </label>
            <input
              type="number"
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              placeholder="npr. 5000"
              style={{
                width: '100%',
                padding: 8,
                borderRadius: 4,
                border: '1px solid #334155',
                background: '#0f172a',
                color: '#e2e8f0',
                fontSize: 13
              }}
            />
          </div>
          <button
            onClick={findClass}
            style={{
              padding: '8px 16px',
              borderRadius: 4,
              border: 'none',
              background: '#8b5cf6',
              color: '#fff',
              fontSize: 13,
              cursor: 'pointer',
              fontWeight: 'bold'
            }}
          >
            Določi razred
          </button>
        </div>
        {detectedClass && (
          <div style={{ marginTop: 12, padding: 12, background: '#0f172a', borderRadius: 4, color: '#e2e8f0', fontSize: 13 }}>
            <strong>Rezultat:</strong> {detectedClass}
          </div>
        )}
      </div>

      <div style={{ display: 'flex', gap: 8 }}>
        <button
          onClick={() => handleExport('csv')}
          style={{
            flex: 1,
            padding: 10,
            borderRadius: 4,
            border: '1px solid #334155',
            background: '#1e293b',
            color: '#e2e8f0',
            fontSize: 13,
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
        >
          📄 Izvozi CSV
        </button>
        <button
          onClick={() => handleExport('pdf')}
          style={{
            flex: 1,
            padding: 10,
            borderRadius: 4,
            border: '1px solid #334155',
            background: '#1e293b',
            color: '#e2e8f0',
            fontSize: 13,
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
        >
          📕 Izvozi PDF
        </button>
      </div>

      <div style={{ marginTop: 16, padding: 12, background: '#1e293b', borderRadius: 6, color: '#94a3b8', fontSize: 12, lineHeight: 1.6 }}>
        <strong style={{ color: '#e2e8f0' }}>📚 Legenda:</strong>
        <ul style={{ margin: '8px 0 0 0', paddingLeft: 20 }}>
          <li><strong>At Rest:</strong> Prostor obratuje brez osebja in proizvodnje</li>
          <li><strong>In Operation:</strong> Normalna proizvodnja z osebjem in opremo</li>
          <li><strong>ISO 5-8:</strong> Mednarodni standard (ISO 14644-1) za klasifikacijo</li>
          <li>Razred B "In Operation" ima značilno višje limite kot "At Rest"</li>
        </ul>
      </div>
    </div>
  )
}

/**
 * 5. CLEANROOM CONTAMINATION CONTROL GAME
 * Educational mini-game for contamination management
 */
export function CleanroomContaminationGame() {
  const [isPlaying, setIsPlaying] = useState(false)
  const [scenario, setScenario] = useState<'filling' | 'maintenance' | 'inspection'>('filling')
  const [particleCount, setParticleCount] = useState(1000)
  const [score, setScore] = useState(0)
  const [gameOver, setGameOver] = useState(false)
  const [events, setEvents] = useState<string[]>([])
  const [timeLeft, setTimeLeft] = useState(60)
  const timerRef = useRef<number | null>(null)
  const eventIntervalRef = useRef<number | null>(null)

  const classLimits = { A: 3520, B: 3520, C: 352000, D: 3520000 }
  const [targetClass] = useState<'A' | 'B' | 'C' | 'D'>('B')
  const limit = classLimits[targetClass]

  const scenarioData = {
    filling: { name: '💉 Aseptično Polnjenje', baseRate: 100, riskLevel: 'high' },
    maintenance: { name: '🔧 Vzdrževanje', baseRate: 500, riskLevel: 'medium' },
    inspection: { name: '🔍 Pregled Kakovosti', baseRate: 50, riskLevel: 'low' }
  }

  const randomEvents = [
    { name: 'Osebje vstopa', impact: 5000, action: 'Povečaj zračni tok' },
    { name: 'Material transfer', impact: 2000, action: 'Zaustavi proces' },
    { name: 'Oprema odpove', impact: 10000, action: 'Pokliči vzdrževanje' },
    { name: 'Vrata odprta predolgo', impact: 8000, action: 'Zaustavi vnos' },
    { name: 'Oblačila poškodovana', impact: 15000, action: 'Zamenjaj oblačila' }
  ]

  const handleAction = (action: string) => {
    // Reduce particle count based on action effectiveness
    const reduction = Math.random() * 5000 + 3000
    setParticleCount(prev => Math.max(0, prev - reduction))
    setScore(prev => prev + 10)
    setEvents(prev => [`✓ ${action} - Zmanjšano za ${reduction.toFixed(0)} delcev`, ...prev.slice(0, 4)])
  }

  const startGame = () => {
    setIsPlaying(true)
    setGameOver(false)
    setParticleCount(1000)
    setScore(0)
    setEvents([])
    setTimeLeft(60)

    // Timer countdown
    timerRef.current = window.setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          endGame()
          return 0
        }
        return prev - 1
      })
    }, 1000)

    // Random events
    eventIntervalRef.current = window.setInterval(() => {
      const event = randomEvents[Math.floor(Math.random() * randomEvents.length)]
      setParticleCount(prev => prev + event.impact)
      setEvents(prev => [`⚠️ ${event.name} (+${event.impact} delcev)`, ...prev.slice(0, 4)])
    }, 5000)

    // Baseline increase
    const baselineInterval = window.setInterval(() => {
      setParticleCount(prev => {
        const newCount = prev + scenarioData[scenario].baseRate
        if (newCount > limit) {
          endGame()
          return newCount
        }
        return newCount
      })
    }, 1000)

    return () => {
      clearInterval(baselineInterval)
    }
  }

  const endGame = () => {
    setIsPlaying(false)
    setGameOver(true)
    if (timerRef.current) clearInterval(timerRef.current)
    if (eventIntervalRef.current) clearInterval(eventIntervalRef.current)
  }

  useEffect(() => {
    return () => {
      if (timerRef.current) clearInterval(timerRef.current)
      if (eventIntervalRef.current) clearInterval(eventIntervalRef.current)
    }
  }, [])

  return (
    <div style={{ background: '#0f172a', borderRadius: 8, padding: 24 }}>
      <SectionHeader title="🎮 Igra Nadzora Kontaminacije" subtitle="Upravljaj čist prostor in prepreči prekoračitev limitov" />

      {!isPlaying && !gameOver && (
        <div>
          <div style={{ marginBottom: 16 }}>
            <label style={{ color: '#cbd5e1', fontSize: 14, display: 'block', marginBottom: 8 }}>Izberi scenarij:</label>
            <select
              value={scenario}
              onChange={(e) => setScenario(e.target.value as any)}
              style={{
                width: '100%',
                padding: 10,
                borderRadius: 4,
                border: '1px solid #334155',
                background: '#1e293b',
                color: '#e2e8f0',
                fontSize: 14
              }}
            >
              {Object.entries(scenarioData).map(([key, val]) => (
                <option key={key} value={key}>{val.name}</option>
              ))}
            </select>
          </div>
          <button
            onClick={startGame}
            style={{
              width: '100%',
              padding: 14,
              borderRadius: 6,
              border: 'none',
              background: 'linear-gradient(135deg, #8b5cf6, #a855f7)',
              color: '#fff',
              fontSize: 16,
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            ▶️ Začni Igro
          </button>
        </div>
      )}

      {isPlaying && (
        <div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 12, marginBottom: 16 }}>
            <div style={{ background: '#1e293b', padding: 12, borderRadius: 6, textAlign: 'center' }}>
              <div style={{ color: '#94a3b8', fontSize: 12 }}>Delci/m³</div>
              <div style={{ color: particleCount > limit ? '#ef4444' : '#10b981', fontSize: 24, fontWeight: 'bold', fontFamily: 'monospace' }}>
                {particleCount.toFixed(0)}
              </div>
              <div style={{ color: '#64748b', fontSize: 11 }}>Limit: {limit.toLocaleString()}</div>
            </div>
            <div style={{ background: '#1e293b', padding: 12, borderRadius: 6, textAlign: 'center' }}>
              <div style={{ color: '#94a3b8', fontSize: 12 }}>Rezultat</div>
              <div style={{ color: '#8b5cf6', fontSize: 24, fontWeight: 'bold' }}>{score}</div>
            </div>
            <div style={{ background: '#1e293b', padding: 12, borderRadius: 6, textAlign: 'center' }}>
              <div style={{ color: '#94a3b8', fontSize: 12 }}>Čas</div>
              <div style={{ color: timeLeft < 10 ? '#ef4444' : '#3b82f6', fontSize: 24, fontWeight: 'bold' }}>{timeLeft}s</div>
            </div>
          </div>

          <div style={{ marginBottom: 16, padding: 12, background: '#1e293b', borderRadius: 6 }}>
            <div style={{ color: '#e2e8f0', fontSize: 13, marginBottom: 8, fontWeight: 'bold' }}>⚡ Dogodki:</div>
            {events.length === 0 ? (
              <div style={{ color: '#64748b', fontSize: 12 }}>Čakanje na dogodke...</div>
            ) : (
              <div style={{ maxHeight: 100, overflowY: 'auto' }}>
                {events.map((e, idx) => (
                  <div key={idx} style={{ color: '#94a3b8', fontSize: 11, padding: '4px 0', borderBottom: idx < events.length - 1 ? '1px solid #334155' : 'none' }}>
                    {e}
                  </div>
                ))}
              </div>
            )}
          </div>

          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: 8 }}>
            <button
              onClick={() => handleAction('Povečaj zračni tok')}
              style={{
                padding: 10,
                borderRadius: 4,
                border: 'none',
                background: '#3b82f6',
                color: '#fff',
                fontSize: 12,
                cursor: 'pointer',
                fontWeight: 'bold'
              }}
            >
              💨 Povečaj zračni tok
            </button>
            <button
              onClick={() => handleAction('Zamenjaj oblačila')}
              style={{
                padding: 10,
                borderRadius: 4,
                border: 'none',
                background: '#10b981',
                color: '#fff',
                fontSize: 12,
                cursor: 'pointer',
                fontWeight: 'bold'
              }}
            >
              👔 Zamenjaj oblačila
            </button>
            <button
              onClick={() => handleAction('Zaustavi proces')}
              style={{
                padding: 10,
                borderRadius: 4,
                border: 'none',
                background: '#ef4444',
                color: '#fff',
                fontSize: 12,
                cursor: 'pointer',
                fontWeight: 'bold'
              }}
            >
              ⏸️ Zaustavi proces
            </button>
            <button
              onClick={() => handleAction('Očisti prostor')}
              style={{
                padding: 10,
                borderRadius: 4,
                border: 'none',
                background: '#f59e0b',
                color: '#fff',
                fontSize: 12,
                cursor: 'pointer',
                fontWeight: 'bold'
              }}
            >
              🧹 Očisti prostor
            </button>
          </div>

          <div style={{ marginTop: 12, height: 30, background: '#1e293b', borderRadius: 4, overflow: 'hidden', position: 'relative' }}>
            <div
              style={{
                position: 'absolute',
                left: 0,
                top: 0,
                height: '100%',
                width: `${Math.min(100, (particleCount / limit) * 100)}%`,
                background: particleCount > limit ? 'linear-gradient(to right, #ef4444, #dc2626)' : 'linear-gradient(to right, #10b981, #22c55e)',
                transition: 'all 0.3s ease'
              }}
            />
            <div style={{ position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)', color: '#fff', fontSize: 11, fontWeight: 'bold', textShadow: '0 0 4px rgba(0,0,0,0.8)' }}>
              {((particleCount / limit) * 100).toFixed(1)}% limita
            </div>
          </div>
        </div>
      )}

      {gameOver && (
        <div style={{ textAlign: 'center', padding: 24 }}>
          <div style={{ fontSize: 48, marginBottom: 16 }}>
            {particleCount > limit ? '❌' : '🎉'}
          </div>
          <div style={{ color: '#e2e8f0', fontSize: 24, fontWeight: 'bold', marginBottom: 8 }}>
            {particleCount > limit ? 'Igra končana!' : 'Uspešno zaključeno!'}
          </div>
          <div style={{ color: '#94a3b8', fontSize: 14, marginBottom: 16 }}>
            Končni rezultat: <strong style={{ color: '#8b5cf6', fontSize: 20 }}>{score}</strong>
          </div>
          <div style={{ color: '#64748b', fontSize: 12, marginBottom: 16 }}>
            Delci/m³: {particleCount.toFixed(0)} / {limit.toLocaleString()}
          </div>
          <button
            onClick={() => {
              setGameOver(false)
              setIsPlaying(false)
            }}
            style={{
              padding: '12px 24px',
              borderRadius: 6,
              border: 'none',
              background: '#8b5cf6',
              color: '#fff',
              fontSize: 14,
              fontWeight: 'bold',
              cursor: 'pointer'
            }}
          >
            🔄 Igraj ponovno
          </button>
        </div>
      )}

      {!isPlaying && !gameOver && (
        <div style={{ marginTop: 16, padding: 12, background: '#1e293b', borderRadius: 6, color: '#94a3b8', fontSize: 12, lineHeight: 1.6 }}>
          <strong style={{ color: '#e2e8f0' }}>🎯 Cilj igre:</strong>
          <ul style={{ margin: '8px 0 0 0', paddingLeft: 20 }}>
            <li>Vzdržuj število delcev pod limitom razreda {targetClass} ({limit.toLocaleString()} delcev/m³)</li>
            <li>Ukrepaj hitro na naključne dogodke (vstop osebja, odpoved opreme, itd.)</li>
            <li>Izberi prave ukrepe za zmanjšanje kontaminacije</li>
            <li>Preživi 60 sekund brez prekoračitve limita</li>
          </ul>
        </div>
      )}
    </div>
  )
}

// 3D Rotating Cube for classifications
export function ClassificationCube() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let rafId = 0
    let rotation = 0

    const handleResize = () => {
      const dpr = window.devicePixelRatio || 1
      const rect = canvas.getBoundingClientRect()
      canvas.width = Math.max(1, Math.floor(rect.width * dpr))
      canvas.height = Math.max(1, Math.floor(300 * dpr))
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0)
    }

    const draw = () => {
      const { width, height } = canvas
      // Background
      ctx.fillStyle = 'rgba(15, 23, 42, 1)'
      ctx.fillRect(0, 0, width, height)

      // Centered rotating "cube" impression using two offset squares
      const size = Math.min(width, height) * 0.2
      ctx.save()
      ctx.translate(width / 2, height / 2)
      ctx.rotate(rotation)

      ctx.strokeStyle = '#7c3aed'
      ctx.lineWidth = 3
      ctx.globalAlpha = 1
      ctx.strokeRect(-size, -size, size * 2, size * 2)

      ctx.globalAlpha = 0.6
      ctx.translate(size * 0.3, size * 0.2)
      ctx.strokeStyle = '#a78bfa'
      ctx.strokeRect(-size, -size, size * 2, size * 2)
      ctx.restore()

      rotation += 0.01
      rafId = requestAnimationFrame(draw)
    }

    handleResize()
    window.addEventListener('resize', handleResize)
    draw()

    return () => {
      window.removeEventListener('resize', handleResize)
      cancelAnimationFrame(rafId)
    }
  }, [])

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        3D Klasifikacijska Kocka (2D prikaz)
      </h3>
      <div style={{ background: 'rgba(0, 0, 0, 0.3)', borderRadius: 12, overflow: 'hidden' }}>
        <canvas ref={canvasRef} style={{ width: '100%', height: 300, display: 'block' }} />
      </div>
    </div>
  )
}

// Count Card Component - Memoized to prevent flickering
const CountCard = React.memo(({ 
  label, 
  count, 
  limit, 
  isCompliant 
}: { 
  label: string
  count: number
  limit: number | null
  isCompliant: boolean 
}) => (
  <div style={{
    padding: 24,
    background: isCompliant ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)',
    border: `2px solid ${isCompliant ? '#22c55e' : '#ef4444'}`,
    borderRadius: 12,
    willChange: 'contents'
  }}>
    <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8, lineHeight: 1.2 }}>
      {label}
    </div>
    <div style={{ 
      fontSize: 32, 
      fontWeight: 800, 
      color: isCompliant ? '#22c55e' : '#ef4444', 
      fontFamily: 'monospace',
      marginBottom: 8,
      lineHeight: 1
    }}>
      {count.toLocaleString()}
    </div>
    <div style={{ fontSize: 11, color: '#cbd5e1', marginBottom: 4, lineHeight: 1.2 }}>
      Limit: {limit === null ? 'Ni določeno' : limit.toLocaleString()}/m³
    </div>
    <div style={{ fontSize: 10, color: isCompliant ? '#22c55e' : '#ef4444', fontWeight: 600 }}>
      {isCompliant ? '✓ V mejah' : '✗ Preseženo'}
    </div>
  </div>
))

// 1. PARTICLE COUNTER SIMULATION - Real-time particle counting
export function ParticleCounterSimulation() {
  const [selectedClass, setSelectedClass] = useState<'A' | 'B' | 'C' | 'D'>('A')
  const [state, setState] = useState<'at-rest' | 'in-operation'>('at-rest')
  const [count05, setCount05] = useState(0)
  const [count50, setCount50] = useState(0)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const lastUpdateRef = useRef(0)

  // Particle limits per class
  const limits = {
    'A': { atRest: { '0.5': 3520, '5.0': 0 }, inOperation: { '0.5': 3520, '5.0': 0 } },
    'B': { atRest: { '0.5': 3520, '5.0': 0 }, inOperation: { '0.5': 352000, '5.0': 2900 } },
    'C': { atRest: { '0.5': 352000, '5.0': 2900 }, inOperation: { '0.5': 3520000, '5.0': 29000 } },
    'D': { atRest: { '0.5': 3520000, '5.0': 29000 }, inOperation: { '0.5': null, '5.0': null } }
  }

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    const particles: Array<{ x: number; y: number; vx: number; vy: number; size: number }> = []
    const stateKey = state === 'at-rest' ? 'atRest' : 'inOperation'
    const limit = limits[selectedClass][stateKey]
    
    // Calculate particle density based on class and state
    let particleDensity = selectedClass === 'A' ? 5 : selectedClass === 'B' ? (state === 'at-rest' ? 5 : 50) : selectedClass === 'C' ? (state === 'at-rest' ? 50 : 150) : (state === 'at-rest' ? 150 : 200)

    // Create particles
    for (let i = 0; i < particleDensity; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        size: Math.random() < 0.95 ? 1.5 : 4 // 95% small (0.5μm), 5% large (5.0μm)
      })
    }

    let frameCount = 0
    const animate = () => {
      ctx.fillStyle = 'rgba(15, 23, 42, 0.1)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      let detected05 = 0
      let detected50 = 0

      particles.forEach(p => {
        p.x += p.vx
        p.y += p.vy

        // Bounce off walls
        if (p.x < 0 || p.x > canvas.width) p.vx *= -1
        if (p.y < 0 || p.y > canvas.height) p.vy *= -1

        // Count particles
        if (p.size < 3) detected05++
        else detected50++

        // Draw particle
        ctx.fillStyle = p.size < 3 ? '#3b82f6' : '#ef4444'
        ctx.globalAlpha = 0.6
        ctx.beginPath()
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2)
        ctx.fill()
      })

      // Update counts every 10 frames
      frameCount++
      if (frameCount % 30 === 0) {  // Reduced update frequency from 10 to 30 frames
        const now = Date.now()
        // Only update state every 500ms minimum
        if (now - lastUpdateRef.current > 500) {
          // Scale to per cubic meter (simulate sampling)
          setCount05(Math.floor(detected05 * (selectedClass === 'A' ? 100 : selectedClass === 'B' ? 1000 : selectedClass === 'C' ? 10000 : 20000)))
          setCount50(Math.floor(detected50 * (selectedClass === 'A' ? 0 : selectedClass === 'B' ? (state === 'at-rest' ? 0 : 200) : selectedClass === 'C' ? 500 : 1000)))
          lastUpdateRef.current = now
        }
      }

      requestAnimationFrame(animate)
    }

    animate()
  }, [selectedClass, state])

  const stateKey = state === 'at-rest' ? 'atRest' : 'inOperation'
  const currentLimit = limits[selectedClass][stateKey]
  const isCompliant05 = currentLimit['0.5'] === null || count05 <= currentLimit['0.5']
  const isCompliant50 = currentLimit['5.0'] === null || count50 <= currentLimit['5.0']

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        Simulacija Štetja Delcev
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Vizualizacija števila delcev v realnem času po razredih
      </p>

      {/* Class selector */}
      <div style={{ display: 'flex', gap: 12, marginBottom: 16 }}>
        {(['A', 'B', 'C', 'D'] as const).map(cls => (
          <motion.button
            key={cls}
            onClick={() => setSelectedClass(cls)}
            style={{
              flex: 1,
              padding: '12px',
              background: selectedClass === cls ? 'linear-gradient(135deg, #7c3aed, #06b6d4)' : 'rgba(255, 255, 255, 0.05)',
              border: selectedClass === cls ? '2px solid #7c3aed' : '2px solid rgba(255, 255, 255, 0.1)',
              borderRadius: 10,
              color: 'white',
              fontSize: 20,
              fontWeight: 700,
              cursor: 'pointer'
            }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            {cls}
          </motion.button>
        ))}
      </div>

      {/* State selector */}
      <div style={{ display: 'flex', gap: 12, marginBottom: 20 }}>
        <motion.button
          onClick={() => setState('at-rest')}
          style={{
            flex: 1,
            padding: '10px',
            background: state === 'at-rest' ? 'rgba(34, 197, 94, 0.2)' : 'rgba(255, 255, 255, 0.05)',
            border: state === 'at-rest' ? '2px solid #22c55e' : '2px solid rgba(255, 255, 255, 0.1)',
            borderRadius: 10,
            color: 'white',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer'
          }}
          whileHover={{ scale: 1.03 }}
          whileTap={{ scale: 0.97 }}
        >
          🛑 Pri mirovanju
        </motion.button>
        <motion.button
          onClick={() => setState('in-operation')}
          style={{
            flex: 1,
            padding: '10px',
            background: state === 'in-operation' ? 'rgba(249, 115, 22, 0.2)' : 'rgba(255, 255, 255, 0.05)',
            border: state === 'in-operation' ? '2px solid #f97316' : '2px solid rgba(255, 255, 255, 0.1)',
            borderRadius: 10,
            color: 'white',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer'
          }}
          whileHover={{ scale: 1.03 }}
          whileTap={{ scale: 0.97 }}
        >
          ⚙️ Pri delovanju
        </motion.button>
      </div>

      {/* Canvas */}
      <div style={{ background: 'rgba(0, 0, 0, 0.4)', borderRadius: 12, overflow: 'hidden', marginBottom: 20 }}>
        <canvas ref={canvasRef} width={600} height={400} style={{ width: '100%', height: 'auto', display: 'block' }} />
      </div>

      {/* Live counts */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20, marginBottom: 20 }}>
        <CountCard
          label="Delci ≥ 0.5μm"
          count={count05}
          limit={currentLimit['0.5']}
          isCompliant={isCompliant05}
        />
        <CountCard
          label="Delci ≥ 5.0μm"
          count={count50}
          limit={currentLimit['5.0']}
          isCompliant={isCompliant50}
        />
      </div>

      {/* Legend */}
      <div style={{
        marginTop: 20,
        padding: 16,
        background: 'rgba(59, 130, 246, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(59, 130, 246, 0.3)',
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>💡 Legenda:</strong>
        <div style={{ marginTop: 8 }}>
          <span style={{ color: '#3b82f6' }}>●</span> Modri delci = 0.5μm (95% vseh delcev) 
          <br />
          <span style={{ color: '#ef4444' }}>●</span> Rdeči delci = 5.0μm (5% vseh delcev)
        </div>
      </div>
    </div>
  )
}

// 2. CLASS COMPARISON CHART - Bar chart showing limits
export function ClassComparisonChart() {
  const [selectedState, setSelectedState] = useState<'at-rest' | 'in-operation'>('at-rest')
  const [selectedSize, setSelectedSize] = useState<'0.5' | '5.0'>('0.5')

  const data = {
    'at-rest': {
      '0.5': { A: 3520, B: 3520, C: 352000, D: 3520000 },
      '5.0': { A: 0, B: 0, C: 2900, D: 29000 }
    },
    'in-operation': {
      '0.5': { A: 3520, B: 352000, C: 3520000, D: null },
      '5.0': { A: 0, B: 2900, C: 29000, D: null }
    }
  }

  const currentData = data[selectedState][selectedSize]
  const maxValue = Math.max(...Object.values(currentData).filter((v): v is number => v !== null))

  const colors = { A: '#7c3aed', B: '#3b82f6', C: '#f59e0b', D: '#ef4444' }

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        Primerjava Mej po Razredih
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Vizualizacija dovoljenih mej delcev za vse razrede
      </p>

      {/* Controls */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginBottom: 24 }}>
        <div>
          <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Stanje:</div>
          <div style={{ display: 'flex', gap: 8 }}>
            {(['at-rest', 'in-operation'] as const).map(s => (
              <motion.button
                key={s}
                onClick={() => setSelectedState(s)}
                style={{
                  flex: 1,
                  padding: '10px',
                  background: selectedState === s ? 'rgba(124, 58, 237, 0.3)' : 'rgba(255, 255, 255, 0.05)',
                  border: selectedState === s ? '2px solid #7c3aed' : '2px solid rgba(255, 255, 255, 0.1)',
                  borderRadius: 10,
                  color: 'white',
                  fontSize: 13,
                  fontWeight: 600,
                  cursor: 'pointer'
                }}
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.97 }}
              >
                {s === 'at-rest' ? '🛑 Mirovanje' : '⚙️ Delovanje'}
              </motion.button>
            ))}
          </div>
        </div>

        <div>
          <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Velikost delcev:</div>
          <div style={{ display: 'flex', gap: 8 }}>
            {(['0.5', '5.0'] as const).map(size => (
              <motion.button
                key={size}
                onClick={() => setSelectedSize(size)}
                style={{
                  flex: 1,
                  padding: '10px',
                  background: selectedSize === size ? 'rgba(6, 182, 212, 0.3)' : 'rgba(255, 255, 255, 0.05)',
                  border: selectedSize === size ? '2px solid #06b6d4' : '2px solid rgba(255, 255, 255, 0.1)',
                  borderRadius: 10,
                  color: 'white',
                  fontSize: 13,
                  fontWeight: 600,
                  cursor: 'pointer'
                }}
                whileHover={{ scale: 1.03 }}
                whileTap={{ scale: 0.97 }}
              >
                ≥{size}μm
              </motion.button>
            ))}
          </div>
        </div>
      </div>

      {/* Bar Chart - LOGARITHMIC SCALE */}
      <div style={{ padding: 20, background: 'rgba(0, 0, 0, 0.3)', borderRadius: 12 }}>
        <svg width="100%" height="450" viewBox="0 0 600 450" style={{ overflow: 'visible' }}>
          {/* Grid lines with absolute values */}
          {[
            { value: 0, label: '0', y: 400 },
            { value: 3520, label: '3.5k', y: 330 },
            { value: 352000, label: '352k', y: 240 },
            { value: 3520000, label: '3.5M', y: 50 }
          ].map(({ value, label, y }) => (
            <g key={value}>
              <line
                x1="80" y1={y}
                x2="560" y2={y}
                stroke="#334155"
                strokeWidth="1"
                strokeDasharray="4,4"
                opacity="0.3"
              />
              <text x="70" y={y + 4} fill="#64748b" fontSize="11" textAnchor="end">
                {label}
              </text>
            </g>
          ))}

          {/* Bars with proper logarithmic scale */}
          {Object.entries(currentData).map(([cls, value], index) => {
            const x = 120 + index * 120
            
            // Proper logarithmic mapping
            let barHeight
            if (value === null || value === 0) {
              barHeight = 5
            } else {
              // Map values to their positions: 3520->70px, 352000->160px, 3520000->350px
              if (value <= 3520) {
                barHeight = (value / 3520) * 70
              } else if (value <= 352000) {
                barHeight = 70 + ((value - 3520) / (352000 - 3520)) * 90
              } else {
                barHeight = 160 + ((value - 352000) / (3520000 - 352000)) * 190
              }
            }
            
            const y = 400 - barHeight

            return (
              <g key={cls}>
                <motion.rect
                  x={x}
                  y={y}
                  width="80"
                  height={barHeight}
                  fill={colors[cls as keyof typeof colors]}
                  initial={{ height: 0, y: 400 }}
                  animate={{ height: barHeight, y }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  opacity="0.8"
                  rx="4"
                />
                
                {/* Value label */}
                <text
                  x={x + 40}
                  y={y - 10}
                  fill="#e6eef8"
                  fontSize="13"
                  fontWeight="700"
                  textAnchor="middle"
                >
                  {value === null ? 'N/A' : value >= 1000000 ? `${(value/1000000).toFixed(1)}M` : value >= 1000 ? `${(value/1000).toFixed(0)}k` : value}
                </text>

                {/* Class label */}
                <text
                  x={x + 40}
                  y="425"
                  fill="#e6eef8"
                  fontSize="20"
                  fontWeight="800"
                  textAnchor="middle"
                >
                  {cls}
                </text>
              </g>
            )
          })}

          {/* Axis labels */}
          <text x="300" y="445" fill="#94a3b8" fontSize="14" textAnchor="middle">
            Razred
          </text>
          <text x="30" y="225" fill="#94a3b8" fontSize="14" textAnchor="middle" transform="rotate(-90 30 225)">
            Delcev/m³ (log skala)
          </text>
        </svg>
      </div>

      {/* Info box */}
      <div style={{
        marginTop: 20,
        padding: 16,
        background: 'rgba(124, 58, 237, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)',
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>ℹ️ Logaritemska skala:</strong> Graf uporablja logaritemsko skalo za boljšo vizualizacijo velikega razpona vrednosti (od 0 do 3,5M delcev/m³).
        <br />
        {selectedSize === '5.0' && selectedState === 'at-rest' && (
          <>Razreda A in B zahtevata NIČ delcev velikosti 5.0μm pri mirovanju - absolutna strožja zahteva!</>
        )}
        {selectedSize === '0.5' && (
          <>Opazi eksponentno povečanje dovoljenih delcev od razreda A do D - vsak naslednji razred dovoli 10x do 100x več delcev.</>
        )}
        {selectedState === 'in-operation' && (
          <> Razred D pri delovanju nima določene meje, vendar je potrebno spremljanje!</>
        )}
      </div>
    </div>
  )
}

// 3. AT-REST vs IN-OPERATION COMPARISON
export function AtRestVsOperationComparison() {
  const [selectedClass, setSelectedClass] = useState<'A' | 'B' | 'C' | 'D'>('B')

  const data = {
    A: {
      atRest: { '0.5': 3520, '5.0': 0 },
      inOperation: { '0.5': 3520, '5.0': 0 },
      iso: 'ISO 5'
    },
    B: {
      atRest: { '0.5': 3520, '5.0': 0 },
      inOperation: { '0.5': 352000, '5.0': 2900 },
      iso: 'ISO 5 → ISO 7'
    },
    C: {
      atRest: { '0.5': 352000, '5.0': 2900 },
      inOperation: { '0.5': 3520000, '5.0': 29000 },
      iso: 'ISO 7 → ISO 8'
    },
    D: {
      atRest: { '0.5': 3520000, '5.0': 29000 },
      inOperation: { '0.5': null, '5.0': null },
      iso: 'ISO 8'
    }
  }

  const current = data[selectedClass]
  const increase05 = current.inOperation['0.5'] && current.atRest['0.5'] 
    ? (current.inOperation['0.5'] / current.atRest['0.5']).toFixed(0) 
    : 'N/A'
  const increase50 = current.inOperation['5.0'] && current.atRest['5.0'] 
    ? (current.inOperation['5.0'] / current.atRest['5.0']).toFixed(0) 
    : 'N/A'

  const colors = { A: '#7c3aed', B: '#3b82f6', C: '#f59e0b', D: '#ef4444' }

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        Primerjava: Mirovanje vs. Delovanje
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Kako prisotnost osebja vpliva na število delcev
      </p>

      {/* Class selector */}
      <div style={{ display: 'flex', gap: 12, marginBottom: 24 }}>
        {(['A', 'B', 'C', 'D'] as const).map(cls => (
          <motion.button
            key={cls}
            onClick={() => setSelectedClass(cls)}
            style={{
              flex: 1,
              padding: '16px',
              background: selectedClass === cls 
                ? `linear-gradient(135deg, ${colors[cls]}, ${colors[cls]}dd)` 
                : 'rgba(255, 255, 255, 0.05)',
              border: selectedClass === cls ? `2px solid ${colors[cls]}` : '2px solid rgba(255, 255, 255, 0.1)',
              borderRadius: 12,
              color: 'white',
              fontSize: 24,
              fontWeight: 800,
              cursor: 'pointer'
            }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            {cls}
          </motion.button>
        ))}
      </div>

      {/* ISO class info */}
      <div style={{
        textAlign: 'center',
        padding: 16,
        background: `${colors[selectedClass]}22`,
        borderRadius: 12,
        border: `2px solid ${colors[selectedClass]}66`,
        marginBottom: 24
      }}>
        <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 4 }}>Mednarodna klasifikacija</div>
        <div style={{ fontSize: 28, fontWeight: 800, color: colors[selectedClass] }}>
          {current.iso}
        </div>
      </div>

      {/* Comparison cards */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20 }}>
        {/* At Rest */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          style={{
            padding: 20,
            background: 'rgba(34, 197, 94, 0.1)',
            borderRadius: 12,
            border: '2px solid #22c55e'
          }}
        >
          <div style={{ fontSize: 16, color: '#22c55e', fontWeight: 700, marginBottom: 16, textAlign: 'center' }}>
            🛑 PRI MIROVANJU
          </div>

          <div style={{ marginBottom: 16 }}>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Delci ≥ 0.5μm</div>
            <div style={{ fontSize: 28, fontWeight: 800, color: '#e6eef8', fontFamily: 'monospace' }}>
              {current.atRest['0.5'].toLocaleString()}
            </div>
            <div style={{ fontSize: 11, color: '#cbd5e1' }}>delcev/m³</div>
          </div>

          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Delci ≥ 5.0μm</div>
            <div style={{ fontSize: 28, fontWeight: 800, color: '#e6eef8', fontFamily: 'monospace' }}>
              {current.atRest['5.0'].toLocaleString()}
            </div>
            <div style={{ fontSize: 11, color: '#cbd5e1' }}>delcev/m³</div>
          </div>

          <div style={{
            marginTop: 16,
            padding: 12,
            background: 'rgba(34, 197, 94, 0.1)',
            borderRadius: 8,
            fontSize: 12,
            color: '#cbd5e1'
          }}>
            ℹ️ Brez osebja, oprema vključena
          </div>
        </motion.div>

        {/* In Operation */}
        <motion.div
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          style={{
            padding: 20,
            background: 'rgba(249, 115, 22, 0.1)',
            borderRadius: 12,
            border: '2px solid #f97316'
          }}
        >
          <div style={{ fontSize: 16, color: '#f97316', fontWeight: 700, marginBottom: 16, textAlign: 'center' }}>
            ⚙️ PRI DELOVANJU
          </div>

          <div style={{ marginBottom: 16 }}>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Delci ≥ 0.5μm</div>
            <div style={{ fontSize: 28, fontWeight: 800, color: '#e6eef8', fontFamily: 'monospace' }}>
              {current.inOperation['0.5'] === null ? 'N/A' : current.inOperation['0.5'].toLocaleString()}
            </div>
            <div style={{ fontSize: 11, color: '#cbd5e1' }}>delcev/m³</div>
            {increase05 !== 'N/A' && increase05 !== '1' && (
              <div style={{ fontSize: 11, color: '#f97316', fontWeight: 600, marginTop: 4 }}>
                ↑ {increase05}x več
              </div>
            )}
          </div>

          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Delci ≥ 5.0μm</div>
            <div style={{ fontSize: 28, fontWeight: 800, color: '#e6eef8', fontFamily: 'monospace' }}>
              {current.inOperation['5.0'] === null ? 'N/A' : current.inOperation['5.0'].toLocaleString()}
            </div>
            <div style={{ fontSize: 11, color: '#cbd5e1' }}>delcev/m³</div>
            {current.inOperation['5.0'] !== null && current.atRest['5.0'] === 0 && (
              <div style={{ fontSize: 11, color: '#f97316', fontWeight: 600, marginTop: 4 }}>
                ↑ Od 0 do {current.inOperation['5.0'].toLocaleString()}
              </div>
            )}
          </div>

          <div style={{
            marginTop: 16,
            padding: 12,
            background: 'rgba(249, 115, 22, 0.1)',
            borderRadius: 8,
            fontSize: 12,
            color: '#cbd5e1'
          }}>
            ℹ️ Z osebjem in proizvodnjo
          </div>
        </motion.div>
      </div>

      {/* Key insights */}
      <div style={{
        marginTop: 20,
        padding: 16,
        background: 'rgba(124, 58, 237, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)',
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>💡 Ključni vpogledi za razred {selectedClass}:</strong>
        <br />
        {selectedClass === 'A' && (
          <>Razred A je EDINI, ki ima ENAKE zahteve pri mirovanju in delovanju - kritična aseptična cona!</>
        )}
        {selectedClass === 'B' && (
          <>Razred B dovoli {increase05}x več delcev 0.5μm pri delovanju. Delci 5.0μm: od 0 na {current.inOperation['5.0']?.toLocaleString()}!</>
        )}
        {selectedClass === 'C' && (
          <>Razred C dovoli {increase05}x več delcev 0.5μm in {increase50}x več delcev 5.0μm pri delovanju.</>
        )}
        {selectedClass === 'D' && (
          <>Razred D nima določenih mej pri delovanju, vendar je potrebno kontinuirano spremljanje za nadzor trendov.</>
        )}
      </div>
    </div>
  )
}

// Particle Flow Animation for Air Changes
// AIR CHANGE RATE SIMULATION - Interactive visualization of air change rates by cleanroom class
export function AirChangeRateSimulation() {
  const [selectedClass, setSelectedClass] = useState<'A' | 'B' | 'C' | 'D'>('A')
  const [airChanges, setAirChanges] = useState(750)
  const [showParticles, setShowParticles] = useState(true)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // Cleanroom class configurations
  const classConfigs = {
    A: {
      name: 'Razred A',
      type: 'Enosmerni (Laminarni) Tok',
      icon: '⬇️',
      color: '#22c55e',
      minACH: 500,
      maxACH: 1000,
      defaultACH: 750,
      velocity: '0.36 - 0.54 m/s',
      pattern: 'Unidirectional',
      description: 'Kritične aseptične operacije - laminarni pretok'
    },
    B: {
      name: 'Razred B',
      type: 'Enosmerni (Laminarni) Tok',
      icon: '⬇️',
      color: '#06b6d4',
      minACH: 500,
      maxACH: 1000,
      defaultACH: 750,
      velocity: '0.36 - 0.54 m/s',
      pattern: 'Unidirectional',
      description: 'Okolica za aseptično pripravo in polnjenje'
    },
    C: {
      name: 'Razred C',
      type: 'Turbulentno Mešanje',
      icon: '🌀',
      color: '#f59e0b',
      minACH: 20,
      maxACH: 40,
      defaultACH: 30,
      velocity: 'Ni specificirano',
      pattern: 'Turbulent',
      description: 'Manj kritične faze proizvodnje sterilnih izdelkov'
    },
    D: {
      name: 'Razred D',
      type: 'Turbulentno Mešanje',
      icon: '💨',
      color: '#ef4444',
      minACH: 10,
      maxACH: 20,
      defaultACH: 15,
      velocity: 'Ni specificirano',
      pattern: 'Turbulent',
      description: 'Podporne operacije za proizvodnjo sterilnih izdelkov'
    }
  }

  const currentConfig = classConfigs[selectedClass]

  // Set default ACH when class changes
  useEffect(() => {
    setAirChanges(currentConfig.defaultACH)
  }, [selectedClass, currentConfig.defaultACH])

  // Canvas particle animation
  useEffect(() => {
    if (!canvasRef.current || !showParticles) return

    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Adjust canvas to display size
    const rect = canvas.getBoundingClientRect()
    canvas.width = rect.width
    canvas.height = rect.height

    interface Particle {
      x: number
      y: number
      vx: number
      vy: number
      size: number
      age: number
      opacity: number
    }

    const particles: Particle[] = []

    // Calculate particle speed based on ACH
    const speedMultiplier = airChanges / currentConfig.defaultACH
    const particleSpeed = currentConfig.pattern === 'Unidirectional' ? 3 : 1.5

    // Create particles
    const particleCount = currentConfig.pattern === 'Unidirectional' ? 80 : 60
    for (let i = 0; i < particleCount; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: currentConfig.pattern === 'Unidirectional' ? (Math.random() - 0.5) * 0.5 : (Math.random() - 0.5) * 2,
        vy: currentConfig.pattern === 'Unidirectional' ? particleSpeed * speedMultiplier : (Math.random() - 0.5) * 2,
        size: 2 + Math.random() * 2,
        age: Math.random() * 100,
        opacity: 0.5 + Math.random() * 0.5
      })
    }

    let animationId: number

    const animate = () => {
      // Semi-transparent background for trail effect
      ctx.fillStyle = 'rgba(15, 23, 42, 0.15)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      particles.forEach((p, idx) => {
        // Update position
        p.x += p.vx * speedMultiplier
        p.y += p.vy * speedMultiplier
        p.age += 1

        // Pattern-specific behavior
        if (currentConfig.pattern === 'Unidirectional') {
          // Laminar flow - mostly downward with slight horizontal variation
          p.vy = particleSpeed * speedMultiplier + Math.sin(p.age * 0.05) * 0.3
          p.vx = Math.cos(p.age * 0.03) * 0.5

          // Reset from top when reaching bottom
          if (p.y > canvas.height) {
            p.y = -10
            p.x = Math.random() * canvas.width
            p.age = 0
          }
        } else {
          // Turbulent mixing - random motion
          p.vx += (Math.random() - 0.5) * 0.4 * speedMultiplier
          p.vy += (Math.random() - 0.5) * 0.4 * speedMultiplier

          // Damping
          p.vx *= 0.98
          p.vy *= 0.98

          // Wrap around edges
          if (p.y < 0) p.y = canvas.height
          if (p.y > canvas.height) p.y = 0
        }

        // Horizontal wrapping
        if (p.x < 0) p.x = canvas.width
        if (p.x > canvas.width) p.x = 0

        // Fade in/out based on age
        if (p.age < 20) {
          p.opacity = p.age / 20
        } else if (currentConfig.pattern === 'Unidirectional' && p.y > canvas.height - 50) {
          p.opacity = (canvas.height - p.y) / 50
        }

        // Draw particle with glow
        const gradient = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.size * 3)
        gradient.addColorStop(0, `${currentConfig.color}${Math.floor(p.opacity * 180).toString(16).padStart(2, '0')}`)
        gradient.addColorStop(1, `${currentConfig.color}00`)

        ctx.fillStyle = gradient
        ctx.beginPath()
        ctx.arc(p.x, p.y, p.size * 3, 0, Math.PI * 2)
        ctx.fill()

        // Core particle
        ctx.fillStyle = `${currentConfig.color}${Math.floor(p.opacity * 255).toString(16).padStart(2, '0')}`
        ctx.beginPath()
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2)
        ctx.fill()
      })

      animationId = requestAnimationFrame(animate)
    }

    animate()

    return () => {
      if (animationId) cancelAnimationFrame(animationId)
    }
  }, [selectedClass, airChanges, showParticles, currentConfig])

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        💨 Izmenjave Zraka po Razredih
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Simulacija različnih tipov pretoka zraka in izmenjav
      </p>

      {/* Class Selection */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 12, marginBottom: 24 }}>
        {(['A', 'B', 'C', 'D'] as const).map(cls => {
          const config = classConfigs[cls]
          return (
            <motion.button
              key={cls}
              onClick={() => setSelectedClass(cls)}
              style={{
                padding: 16,
                background: selectedClass === cls 
                  ? `linear-gradient(135deg, ${config.color}, ${config.color}dd)` 
                  : 'rgba(255, 255, 255, 0.05)',
                border: `2px solid ${selectedClass === cls ? config.color : 'rgba(255, 255, 255, 0.1)'}`,
                borderRadius: 12,
                cursor: 'pointer',
                textAlign: 'center'
              }}
              whileHover={{ scale: 1.03, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <div style={{ fontSize: 28, marginBottom: 4 }}>{config.icon}</div>
              <div style={{ fontSize: 16, color: '#e6eef8', fontWeight: 700, marginBottom: 2 }}>
                {config.name}
              </div>
              <div style={{ fontSize: 11, color: '#94a3b8' }}>
                {config.minACH}-{config.maxACH} ACH
              </div>
            </motion.button>
          )
        })}
      </div>

      {/* Current Class Info */}
      <motion.div
        key={selectedClass}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        style={{
          padding: 20,
          background: `linear-gradient(135deg, ${currentConfig.color}22, ${currentConfig.color}11)`,
          border: `2px solid ${currentConfig.color}`,
          borderRadius: 12,
          marginBottom: 24
        }}
      >
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Tip Pretoka</div>
            <div style={{ fontSize: 18, color: '#e6eef8', fontWeight: 700 }}>
              {currentConfig.type}
            </div>
          </div>
          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Hitrost Zraka</div>
            <div style={{ fontSize: 18, color: '#e6eef8', fontWeight: 700 }}>
              {currentConfig.velocity}
            </div>
          </div>
        </div>
        <div style={{ marginTop: 12, fontSize: 13, color: '#cbd5e1', lineHeight: 1.5 }}>
          {currentConfig.description}
        </div>
      </motion.div>

      {/* Air Changes Control */}
      <div style={{
        padding: 20,
        background: 'rgba(0, 0, 0, 0.4)',
        borderRadius: 12,
        border: '2px solid rgba(255, 255, 255, 0.1)',
        marginBottom: 24
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
          <div>
            <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 4 }}>
              Izmenjave Zraka na Uro (ACH)
            </div>
            <div style={{ fontSize: 32, color: currentConfig.color, fontWeight: 800 }}>
              {airChanges}
              <span style={{ fontSize: 16, color: '#94a3b8', fontWeight: 400, marginLeft: 8 }}>ACH</span>
            </div>
          </div>
          <div style={{ textAlign: 'right' }}>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Priporočeno</div>
            <div style={{ fontSize: 16, color: '#22c55e', fontWeight: 600 }}>
              {currentConfig.minACH} - {currentConfig.maxACH}
            </div>
          </div>
        </div>

        {/* Slider */}
        <input
          type="range"
          min={currentConfig.minACH - 10}
          max={currentConfig.maxACH + 20}
          value={airChanges}
          onChange={(e) => setAirChanges(Number(e.target.value))}
          style={{
            width: '100%',
            height: 8,
            borderRadius: 4,
            outline: 'none',
            background: `linear-gradient(to right, 
              ${currentConfig.color} 0%, 
              ${currentConfig.color} ${((airChanges - (currentConfig.minACH - 10)) / ((currentConfig.maxACH + 20) - (currentConfig.minACH - 10))) * 100}%, 
              rgba(255, 255, 255, 0.1) ${((airChanges - (currentConfig.minACH - 10)) / ((currentConfig.maxACH + 20) - (currentConfig.minACH - 10))) * 100}%, 
              rgba(255, 255, 255, 0.1) 100%)`,
            cursor: 'pointer'
          }}
        />

        {/* Status Indicator */}
        <div style={{ marginTop: 16, display: 'flex', alignItems: 'center', gap: 12 }}>
          {airChanges < currentConfig.minACH && (
            <div style={{
              padding: '8px 16px',
              background: 'rgba(239, 68, 68, 0.2)',
              border: '1px solid #ef4444',
              borderRadius: 8,
              fontSize: 13,
              color: '#fca5a5',
              display: 'flex',
              alignItems: 'center',
              gap: 8
            }}>
              ⚠️ Pod priporočenimi vrednostmi - nezadostna izmenjava
            </div>
          )}
          {airChanges >= currentConfig.minACH && airChanges <= currentConfig.maxACH && (
            <div style={{
              padding: '8px 16px',
              background: 'rgba(34, 197, 94, 0.2)',
              border: '1px solid #22c55e',
              borderRadius: 8,
              fontSize: 13,
              color: '#86efac',
              display: 'flex',
              alignItems: 'center',
              gap: 8
            }}>
              ✓ Znotraj priporočenih vrednosti - optimalno
            </div>
          )}
          {airChanges > currentConfig.maxACH && (
            <div style={{
              padding: '8px 16px',
              background: 'rgba(251, 191, 36, 0.2)',
              border: '1px solid #fbbf24',
              borderRadius: 8,
              fontSize: 13,
              color: '#fcd34d',
              display: 'flex',
              alignItems: 'center',
              gap: 8
            }}>
              ⚡ Nad priporočenimi vrednostmi - lahko energijsko neučinkovito
            </div>
          )}
        </div>
      </div>

      {/* Canvas Visualization */}
      <div style={{ position: 'relative', marginBottom: 20 }}>
        <div style={{
          position: 'absolute',
          top: 16,
          right: 16,
          zIndex: 10
        }}>
          <motion.button
            onClick={() => setShowParticles(!showParticles)}
            style={{
              padding: '8px 16px',
              background: showParticles ? 'rgba(34, 197, 94, 0.2)' : 'rgba(255, 255, 255, 0.1)',
              border: `1px solid ${showParticles ? '#22c55e' : 'rgba(255, 255, 255, 0.2)'}`,
              borderRadius: 8,
              color: 'white',
              fontSize: 12,
              fontWeight: 600,
              cursor: 'pointer'
            }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            {showParticles ? '👁️ Skrij Delce' : '👁️‍🗨️ Prikaži Delce'}
          </motion.button>
        </div>

        <canvas
          ref={canvasRef}
          style={{
            width: '100%',
            height: '400px',
            borderRadius: 12,
            background: 'rgba(15, 23, 42, 0.8)',
            border: `2px solid ${currentConfig.color}`
          }}
        />

        {/* Flow Pattern Label */}
        <div style={{
          position: 'absolute',
          bottom: 16,
          left: 16,
          padding: '8px 16px',
          background: 'rgba(0, 0, 0, 0.7)',
          borderRadius: 8,
          border: `1px solid ${currentConfig.color}`,
          fontSize: 13,
          color: '#e6eef8',
          fontWeight: 600
        }}>
          {currentConfig.icon} {currentConfig.type}
        </div>
      </div>

      {/* Comparison Table */}
      <div style={{
        padding: 20,
        background: 'rgba(0, 0, 0, 0.3)',
        borderRadius: 12,
        border: '2px solid rgba(255, 255, 255, 0.1)',
        marginBottom: 20
      }}>
        <div style={{ fontSize: 16, color: '#e6eef8', fontWeight: 700, marginBottom: 16 }}>
          📊 Primerjava Razredov
        </div>
        
        <div style={{ display: 'grid', gap: 12 }}>
          {(['A', 'B', 'C', 'D'] as const).map(cls => {
            const config = classConfigs[cls]
            return (
              <div
                key={cls}
                style={{
                  padding: 12,
                  background: selectedClass === cls ? `${config.color}22` : 'rgba(255, 255, 255, 0.03)',
                  border: `1px solid ${selectedClass === cls ? config.color : 'rgba(255, 255, 255, 0.1)'}`,
                  borderRadius: 8,
                  display: 'grid',
                  gridTemplateColumns: '80px 200px 150px 1fr',
                  gap: 12,
                  alignItems: 'center'
                }}
              >
                <div style={{ fontSize: 14, color: config.color, fontWeight: 700 }}>
                  {config.name}
                </div>
                <div style={{ fontSize: 12, color: '#94a3b8' }}>
                  {config.type}
                </div>
                <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>
                  {config.minACH}-{config.maxACH} ACH
                </div>
                <div style={{ fontSize: 11, color: '#64748b' }}>
                  {config.velocity}
                </div>
              </div>
            )
          })}
        </div>
      </div>

      {/* Info Box */}
      <div style={{
        padding: 16,
        background: 'rgba(59, 130, 246, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(59, 130, 246, 0.3)',
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>💡 Pomembno:</strong> Razreda A in B uporabljata <strong>enosmerni (laminarni) tok</strong> z najmanj 0,36 m/s, kar ustreza <strong>500-1000 ACH</strong>! To zagotavlja kontinuirano odstranjevanje delcev. Razreda C in D uporabljata <strong>turbulentno mešanje</strong> z nižjimi vrednostmi ACH (20-40 oziroma 10-20), kar je primerno za podporne operacije.
      </div>
    </div>
  )
}

// OLD AirFlowParticles - DEPRECATED - Replaced by AirChangeRateSimulation
export function AirFlowParticles() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    
    const particles: Array<{ x: number; y: number; vx: number; vy: number; size: number }> = []
    
    // Create particles
    for (let i = 0; i < 50; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 2,
        vy: -1 - Math.random() * 2,
        size: 2 + Math.random() * 3
      })
    }
    
    const animate = () => {
      ctx.fillStyle = 'rgba(15, 23, 42, 0.1)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)
      
      particles.forEach(p => {
        p.x += p.vx
        p.y += p.vy
        
        // Wrap around
        if (p.y < 0) p.y = canvas.height
        if (p.x < 0) p.x = canvas.width
        if (p.x > canvas.width) p.x = 0
        
        // Draw particle with glow
        const gradient = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.size * 2)
        gradient.addColorStop(0, 'rgba(124, 58, 237, 0.8)')
        gradient.addColorStop(1, 'rgba(124, 58, 237, 0)')
        
        ctx.fillStyle = gradient
        ctx.beginPath()
        ctx.arc(p.x, p.y, p.size * 2, 0, Math.PI * 2)
        ctx.fill()
        
        ctx.fillStyle = '#a78bfa'
        ctx.beginPath()
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2)
        ctx.fill()
      })
      
      requestAnimationFrame(animate)
    }
    
    animate()
  }, [])
  
  return <canvas ref={canvasRef} width={400} height={300} style={{ width: '100%', height: 'auto', borderRadius: 12 }} />
}

// 3D HVAC Room with Airflow (Complete Interactive Visualization)
export function AdvancedAirflowVisualization() {
  const containerRef = useRef<HTMLDivElement>(null)
  const [filterType, setFilterType] = useState<'HEPA' | 'ULPA'>('HEPA')
  const [airSpeed, setAirSpeed] = useState(0.45)
  const [showParticles, setShowParticles] = useState(true)
  const [roomClass, setRoomClass] = useState<'A' | 'B' | 'C' | 'D'>('A')

  useEffect(() => {
    if (!containerRef.current) return

    const width = containerRef.current.clientWidth
    const height = 500

    // Setup Three.js scene
    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x0f172a)
    
    const camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000)
    camera.position.set(8, 6, 12)
    camera.lookAt(0, 2, 0)

    const renderer = new THREE.WebGLRenderer({ antialias: true })
    renderer.setSize(width, height)
    renderer.shadowMap.enabled = true
    containerRef.current.appendChild(renderer.domElement)

    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5)
    scene.add(ambientLight)

    const topLight = new THREE.DirectionalLight(0xa78bfa, 0.8)
    topLight.position.set(0, 10, 0)
    topLight.castShadow = true
    scene.add(topLight)

    const sideLight = new THREE.DirectionalLight(0x7c3aed, 0.4)
    sideLight.position.set(5, 5, 5)
    scene.add(sideLight)

    // Room walls (transparent cleanroom)
    const wallMaterial = new THREE.MeshPhongMaterial({
      color: 0x334155,
      transparent: true,
      opacity: 0.15,
      side: THREE.DoubleSide,
      depthWrite: false
    })

    // Floor
    const floor = new THREE.Mesh(
      new THREE.PlaneGeometry(10, 10),
      new THREE.MeshStandardMaterial({ color: 0x1e293b, roughness: 0.8 })
    )
    floor.rotation.x = -Math.PI / 2
    floor.receiveShadow = true
    scene.add(floor)

    // Ceiling HEPA filter (grid pattern)
    const ceilingFilterGeometry = new THREE.PlaneGeometry(6, 6, 20, 20)
    const ceilingFilterMaterial = new THREE.MeshStandardMaterial({
      color: 0x7c3aed,
      wireframe: true,
      transparent: true,
      opacity: 0.4
    })
    const ceilingFilter = new THREE.Mesh(ceilingFilterGeometry, ceilingFilterMaterial)
    ceilingFilter.position.set(0, 5, 0)
    ceilingFilter.rotation.x = -Math.PI / 2
    scene.add(ceilingFilter)

    // Airflow particles
    const particleCount = showParticles ? 2000 : 0
    const particlesGeometry = new THREE.BufferGeometry()
    const positions = new Float32Array(particleCount * 3)
    const velocities = new Float32Array(particleCount * 3)

    for (let i = 0; i < particleCount; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 6
      positions[i * 3 + 1] = 5 + Math.random() * 0.5
      positions[i * 3 + 2] = (Math.random() - 0.5) * 6
      
      velocities[i * 3] = (Math.random() - 0.5) * 0.01
      velocities[i * 3 + 1] = -airSpeed * 0.05 * (0.8 + Math.random() * 0.4)
      velocities[i * 3 + 2] = (Math.random() - 0.5) * 0.01
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))

    const particleMaterial = new THREE.PointsMaterial({
      color: 0xa78bfa,
      size: 0.05,
      transparent: true,
      opacity: 0.7,
      blending: THREE.AdditiveBlending
    })

    const particleSystem = new THREE.Points(particlesGeometry, particleMaterial)
    scene.add(particleSystem)

    // Equipment (table/workstation)
    const table = new THREE.Mesh(
      new THREE.BoxGeometry(3, 0.1, 2),
      new THREE.MeshStandardMaterial({ color: 0x475569, metalness: 0.6, roughness: 0.4 })
    )
    table.position.set(0, 1, 0)
    table.castShadow = true
    scene.add(table)

    // Operator (simple representation)
    const operatorBody = new THREE.Mesh(
      new THREE.CylinderGeometry(0.3, 0.3, 1.5, 16),
      new THREE.MeshStandardMaterial({ color: 0x60a5fa, roughness: 0.6 })
    )
    operatorBody.position.set(-2, 0.75, 0)
    operatorBody.castShadow = true
    scene.add(operatorBody)

    const operatorHead = new THREE.Mesh(
      new THREE.SphereGeometry(0.25, 16, 16),
      new THREE.MeshStandardMaterial({ color: 0x93c5fd, roughness: 0.6 })
    )
    operatorHead.position.set(-2, 1.7, 0)
    operatorHead.castShadow = true
    scene.add(operatorHead)

    // Air return grilles (bottom)
    const returnGrilleGeometry = new THREE.PlaneGeometry(1.5, 0.3, 10, 2)
    const returnGrilleMaterial = new THREE.MeshStandardMaterial({
      color: 0x334155,
      wireframe: true,
      opacity: 0.6,
      transparent: true
    })
    
    const returnLeft = new THREE.Mesh(returnGrilleGeometry, returnGrilleMaterial)
    returnLeft.position.set(-3, 0.5, 0)
    returnLeft.rotation.y = Math.PI / 2
    scene.add(returnLeft)

    const returnRight = new THREE.Mesh(returnGrilleGeometry, returnGrilleMaterial)
    returnRight.position.set(3, 0.5, 0)
    returnRight.rotation.y = Math.PI / 2
    scene.add(returnRight)

    // Pressure indicators (visual cues)
    const pressureIndicators: THREE.Mesh[] = []
    for (let i = 0; i < 4; i++) {
      const indicator = new THREE.Mesh(
        new THREE.SphereGeometry(0.08, 16, 16),
        new THREE.MeshStandardMaterial({
          color: roomClass === 'A' ? 0x10b981 : 0xa78bfa,
          emissive: roomClass === 'A' ? 0x10b981 : 0x7c3aed,
          emissiveIntensity: 0.5
        })
      )
      const angle = (i / 4) * Math.PI * 2
      indicator.position.set(Math.cos(angle) * 4.8, 2.5, Math.sin(angle) * 4.8)
      scene.add(indicator)
      pressureIndicators.push(indicator)
    }

    let time = 0
    let mounted = true

    function animate() {
      if (!mounted) return

      time += 0.01

      // Animate particles (airflow)
      if (showParticles) {
        const positions = particleSystem.geometry.attributes.position!.array as Float32Array
        
        for (let i = 0; i < particleCount; i++) {
          positions[i * 3] += velocities[i * 3]
          positions[i * 3 + 1] += velocities[i * 3 + 1]
          positions[i * 3 + 2] += velocities[i * 3 + 2]

          // Reset particles at bottom
          if (positions[i * 3 + 1] < 0.2) {
            positions[i * 3] = (Math.random() - 0.5) * 6
            positions[i * 3 + 1] = 5
            positions[i * 3 + 2] = (Math.random() - 0.5) * 6
          }

          // Wrap around horizontally
          if (Math.abs(positions[i * 3]) > 3) {
            positions[i * 3] = -positions[i * 3] * 0.9
          }
          if (Math.abs(positions[i * 3 + 2]) > 3) {
            positions[i * 3 + 2] = -positions[i * 3 + 2] * 0.9
          }
        }
        
        particleSystem.geometry.attributes.position!.needsUpdate = true
      }

      // Animate ceiling filter (breathing effect)
      ceilingFilter.material.opacity = 0.35 + Math.sin(time) * 0.05
      ceilingFilter.position.y = 5 + Math.sin(time * 0.5) * 0.02

      // Animate pressure indicators (pulsing)
      pressureIndicators.forEach((ind, idx) => {
        ind.scale.setScalar(1 + Math.sin(time * 2 + idx) * 0.2)
      })

      // Rotate camera slightly
      camera.position.x = 8 * Math.cos(time * 0.1)
      camera.position.z = 12 * Math.sin(time * 0.1)
      camera.lookAt(0, 2, 0)

      renderer.render(scene, camera)
      requestAnimationFrame(animate)
    }

    animate()

    function handleResize() {
      if (!containerRef.current) return
      const w = containerRef.current.clientWidth
      camera.aspect = w / height
      camera.updateProjectionMatrix()
      renderer.setSize(w, height)
    }

    window.addEventListener('resize', handleResize)

    return () => {
      mounted = false
      window.removeEventListener('resize', handleResize)
      renderer.dispose()
      scene.clear()
      if (containerRef.current?.contains(renderer.domElement)) {
        containerRef.current.removeChild(renderer.domElement)
      }
    }
  }, [filterType, airSpeed, showParticles, roomClass])

  return (
    <div>
      <div ref={containerRef} style={{ width: '100%', borderRadius: 16, overflow: 'hidden', marginBottom: 20 }} />
      
      {/* Controls */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginTop: 20 }}>
        <div>
          <label style={{ display: 'block', marginBottom: 8, color: '#e6eef8', fontWeight: 600, fontSize: 14 }}>
            Room Class
          </label>
          <div style={{ display: 'flex', gap: 8 }}>
            {(['A', 'B', 'C', 'D'] as const).map(cls => (
              <button
                key={cls}
                onClick={() => setRoomClass(cls)}
                style={{
                  flex: 1,
                  padding: '10px',
                  background: roomClass === cls ? 'linear-gradient(135deg, #7c3aed, #a78bfa)' : 'rgba(255,255,255,0.05)',
                  border: roomClass === cls ? '2px solid #a78bfa' : '2px solid rgba(255,255,255,0.1)',
                  borderRadius: 8,
                  color: 'white',
                  cursor: 'pointer',
                  fontWeight: 600,
                  transition: 'all 0.3s'
                }}
              >
                {cls}
              </button>
            ))}
          </div>
        </div>

        <div>
          <label style={{ display: 'block', marginBottom: 8, color: '#e6eef8', fontWeight: 600, fontSize: 14 }}>
            Filter Type
          </label>
          <div style={{ display: 'flex', gap: 8 }}>
            {(['HEPA', 'ULPA'] as const).map(type => (
              <button
                key={type}
                onClick={() => setFilterType(type)}
                style={{
                  flex: 1,
                  padding: '10px',
                  background: filterType === type ? 'linear-gradient(135deg, #7c3aed, #a78bfa)' : 'rgba(255,255,255,0.05)',
                  border: filterType === type ? '2px solid #a78bfa' : '2px solid rgba(255,255,255,0.1)',
                  borderRadius: 8,
                  color: 'white',
                  cursor: 'pointer',
                  fontWeight: 600,
                  transition: 'all 0.3s'
                }}
              >
                {type}
              </button>
            ))}
          </div>
        </div>

        <div>
          <label style={{ display: 'block', marginBottom: 8, color: '#e6eef8', fontWeight: 600, fontSize: 14 }}>
            Air Velocity: {airSpeed.toFixed(2)} m/s
          </label>
          <input
            type="range"
            min="0.36"
            max="0.54"
            step="0.01"
            value={airSpeed}
            onChange={(e) => setAirSpeed(parseFloat(e.target.value))}
            style={{ width: '100%', accentColor: '#7c3aed' }}
          />
          <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: 12, color: 'var(--muted)', marginTop: 4 }}>
            <span>0.36 m/s</span>
            <span>0.54 m/s</span>
          </div>
        </div>

        <div>
          <label style={{ display: 'flex', alignItems: 'center', gap: 8, cursor: 'pointer', color: '#e6eef8', fontWeight: 600 }}>
            <input
              type="checkbox"
              checked={showParticles}
              onChange={(e) => setShowParticles(e.target.checked)}
              style={{ width: 20, height: 20, accentColor: '#7c3aed' }}
            />
            Show Airflow Particles
          </label>
          <p style={{ fontSize: 13, color: 'var(--muted)', marginTop: 8, marginLeft: 28 }}>
            Visualize air movement patterns in the cleanroom
          </p>
        </div>
      </div>

      {/* Info panel */}
      <div style={{
        marginTop: 20,
        padding: 16,
        background: 'rgba(124, 58, 237, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <h5 style={{ margin: '0 0 12px 0', color: '#e6eef8', fontSize: 15, fontWeight: 700 }}>
          🎯 Key Concepts
        </h5>
        <ul style={{ margin: 0, paddingLeft: 20, color: 'var(--muted)', fontSize: 14, lineHeight: 1.8 }}>
          <li><strong style={{ color: '#a78bfa' }}>Unidirectional Flow:</strong> Class A requires laminar airflow from ceiling to floor at 0.36-0.54 m/s</li>
          <li><strong style={{ color: '#a78bfa' }}>HEPA Filters:</strong> Remove 99.995% of particles ≥0.3 μm (H14 grade)</li>
          <li><strong style={{ color: '#a78bfa' }}>Particle Removal:</strong> Continuous top-to-bottom flow sweeps particles away from critical zone</li>
          <li><strong style={{ color: '#a78bfa' }}>Pressure Cascade:</strong> Higher pressure in cleaner rooms prevents contamination ingress</li>
        </ul>
      </div>
    </div>
  )
}

// Pressure Differential Gauge
// AIR LOCK SIMULATION - Interactive visualization of air lock types
export function AirLockSimulation() {
  const [airlockType, setAirlockType] = useState<'bubble' | 'sink' | 'cascade'>('bubble')
  const [leftDoorOpen, setLeftDoorOpen] = useState(false)
  const [rightDoorOpen, setRightDoorOpen] = useState(false)
  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number; vx: number; vy: number; room: 'left' | 'airlock' | 'right' }>>([])

  // Pressure configuration for each airlock type
  const pressureConfig = {
    bubble: { left: 0, airlock: 15, right: 0 },    // Airlock highest
    sink: { left: 15, airlock: 0, right: 15 },     // Airlock lowest
    cascade: { left: 20, airlock: 15, right: 10 }  // Gradual decrease
  }

  const currentPressure = pressureConfig[airlockType]

  // Particle simulation
  useEffect(() => {
    const interval = setInterval(() => {
      setParticles(prev => {
        let newParticles = [...prev]

        // Add new particles randomly
        if (Math.random() < 0.3) {
          const room = Math.random() < 0.5 ? 'left' : 'right'
          newParticles.push({
            id: Date.now() + Math.random(),
            x: room === 'left' ? 50 : 550,
            y: 100 + Math.random() * 100,
            vx: 0,
            vy: 0,
            room
          })
        }

        // Update particle positions based on pressure differences and door states
        newParticles = newParticles.map(p => {
          let { x, y, vx, vy, room } = p

          // Apply pressure-based forces
          if (room === 'left') {
            // Left room to airlock flow
            if (leftDoorOpen) {
              const pressureDiff = currentPressure.left - currentPressure.airlock
              if (pressureDiff > 0 && x < 200) {
                vx += pressureDiff * 0.05 // Flow into airlock
              } else if (pressureDiff < 0) {
                vx -= pressureDiff * 0.05 // Flow out from airlock
              }
            }
          } else if (room === 'airlock') {
            // Airlock to left room flow
            if (leftDoorOpen) {
              const pressureDiff = currentPressure.airlock - currentPressure.left
              if (pressureDiff > 0 && x > 200) {
                vx -= pressureDiff * 0.05
              } else if (pressureDiff < 0 && x < 200) {
                vx += Math.abs(pressureDiff) * 0.05
              }
            }
            // Airlock to right room flow
            if (rightDoorOpen) {
              const pressureDiff = currentPressure.airlock - currentPressure.right
              if (pressureDiff > 0 && x < 400) {
                vx += pressureDiff * 0.05
              } else if (pressureDiff < 0 && x > 400) {
                vx -= Math.abs(pressureDiff) * 0.05
              }
            }
          } else if (room === 'right') {
            // Right room to airlock flow
            if (rightDoorOpen) {
              const pressureDiff = currentPressure.right - currentPressure.airlock
              if (pressureDiff > 0 && x > 400) {
                vx -= pressureDiff * 0.05
              } else if (pressureDiff < 0) {
                vx += pressureDiff * 0.05
              }
            }
          }

          // Random brownian motion
          vx += (Math.random() - 0.5) * 0.5
          vy += (Math.random() - 0.5) * 0.5

          // Damping
          vx *= 0.95
          vy *= 0.95

          // Update position
          x += vx
          y += vy

          // Boundary constraints
          y = Math.max(50, Math.min(250, y))

          // Room transitions
          if (leftDoorOpen && x >= 200 && x <= 240 && room === 'left') {
            room = 'airlock'
          } else if (leftDoorOpen && x >= 160 && x < 200 && room === 'airlock') {
            room = 'left'
          } else if (rightDoorOpen && x >= 400 && x <= 440 && room === 'airlock') {
            room = 'right'
          } else if (rightDoorOpen && x >= 360 && x < 400 && room === 'right') {
            room = 'airlock'
          }

          // Keep particles within their rooms if doors closed
          if (!leftDoorOpen) {
            if (room === 'left') x = Math.min(180, x)
            if (room === 'airlock') x = Math.max(220, x)
          }
          if (!rightDoorOpen) {
            if (room === 'airlock') x = Math.min(380, x)
            if (room === 'right') x = Math.max(420, x)
          }

          // Remove particles that go out of bounds
          if (x < 0 || x > 600) return null

          return { ...p, x, y, vx, vy, room }
        }).filter(Boolean) as typeof newParticles

        // Limit particle count
        return newParticles.slice(-150)
      })
    }, 50)

    return () => clearInterval(interval)
  }, [airlockType, leftDoorOpen, rightDoorOpen, currentPressure])

  const airlockTypes = [
    {
      id: 'bubble' as const,
      name: '🫧 Mehurčasta Zapornica',
      shortName: 'Mehurčasta',
      description: 'Tlak v zapornici je višji od tlaka v obeh sosednjih prostorih',
      purpose: 'Preprečuje vstop kontaminantov iz katerekoli smeri',
      color: '#06b6d4',
      icon: '🫧'
    },
    {
      id: 'sink' as const,
      name: '🌊 Ponorna Zapornica',
      shortName: 'Ponorna',
      description: 'Tlak v zapornici je nižji od tlaka v obeh sosednjih prostorih',
      purpose: 'Omogoča izvoz kontaminantov iz zapornice',
      color: '#8b5cf6',
      icon: '🌊'
    },
    {
      id: 'cascade' as const,
      name: '📊 Kaskadna Zapornica',
      shortName: 'Kaskadna',
      description: 'Tlak v zapornici je med vrednostma tlakov sosednjih prostorov',
      purpose: 'Omogoča postopno spremembo tlaka',
      color: '#f59e0b',
      icon: '📊'
    }
  ]

  const currentType = airlockTypes.find(t => t.id === airlockType)!

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        🚪 Zračne Zapornice - Interaktivna Simulacija
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Izberi tip zapornice in simuliraj odpiranje vrat
      </p>

      {/* Airlock Type Selection */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: 12, marginBottom: 24 }}>
        {airlockTypes.map(type => (
          <motion.button
            key={type.id}
            onClick={() => setAirlockType(type.id)}
            style={{
              padding: 16,
              background: airlockType === type.id 
                ? `linear-gradient(135deg, ${type.color}, ${type.color}dd)` 
                : 'rgba(255, 255, 255, 0.05)',
              border: `2px solid ${airlockType === type.id ? type.color : 'rgba(255, 255, 255, 0.1)'}`,
              borderRadius: 12,
              cursor: 'pointer',
              textAlign: 'left'
            }}
            whileHover={{ scale: 1.02, y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <div style={{ fontSize: 24, marginBottom: 8 }}>{type.icon}</div>
            <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 700, marginBottom: 4 }}>
              {type.shortName}
            </div>
            <div style={{ fontSize: 11, color: '#94a3b8', lineHeight: 1.3 }}>
              {type.description}
            </div>
          </motion.button>
        ))}
      </div>

      {/* Current Type Info */}
      <motion.div
        key={airlockType}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        style={{
          padding: 16,
          background: `linear-gradient(135deg, ${currentType.color}22, ${currentType.color}11)`,
          border: `2px solid ${currentType.color}`,
          borderRadius: 12,
          marginBottom: 24
        }}
      >
        <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>
          <span style={{ fontSize: 32 }}>{currentType.icon}</span>
          <div>
            <div style={{ fontSize: 16, color: '#e6eef8', fontWeight: 700 }}>
              {currentType.name}
            </div>
            <div style={{ fontSize: 13, color: '#94a3b8' }}>
              {currentType.purpose}
            </div>
          </div>
        </div>
      </motion.div>

      {/* Simulation Canvas */}
      <div style={{
        background: 'rgba(0, 0, 0, 0.4)',
        borderRadius: 12,
        padding: 20,
        marginBottom: 24,
        border: '2px solid rgba(255, 255, 255, 0.1)'
      }}>
        <svg viewBox="0 0 600 300" style={{ width: '100%', height: 'auto' }}>
          {/* Left Room (Uncontrolled) */}
          <rect x="0" y="50" width="200" height="200" fill="rgba(71, 85, 105, 0.3)" stroke="#475569" strokeWidth="2" />
          <text x="100" y="40" fill="#94a3b8" fontSize="14" fontWeight="600" textAnchor="middle">
            Nekontroliran Prostor
          </text>
          <text x="100" y="270" fill="#ef4444" fontSize="20" fontWeight="700" textAnchor="middle">
            {currentPressure.left} Pa
          </text>

          {/* Left Door */}
          <motion.rect
            x="190"
            y={leftDoorOpen ? 80 : 50}
            width="20"
            height={leftDoorOpen ? 50 : 200}
            fill={leftDoorOpen ? '#22c55e' : '#64748b'}
            animate={{ 
              y: leftDoorOpen ? 80 : 50,
              height: leftDoorOpen ? 50 : 200,
              fill: leftDoorOpen ? '#22c55e' : '#64748b'
            }}
            transition={{ duration: 0.3 }}
          />

          {/* Airlock */}
          <rect x="210" y="50" width="180" height="200" fill={`${currentType.color}33`} stroke={currentType.color} strokeWidth="3" />
          <text x="300" y="40" fill="#e6eef8" fontSize="14" fontWeight="700" textAnchor="middle">
            ZRAČNA ZAPORNICA
          </text>
          <text x="300" y="270" fill={currentType.color} fontSize="24" fontWeight="800" textAnchor="middle">
            {currentPressure.airlock} Pa
          </text>

          {/* Right Door */}
          <motion.rect
            x="390"
            y={rightDoorOpen ? 80 : 50}
            width="20"
            height={rightDoorOpen ? 50 : 200}
            fill={rightDoorOpen ? '#22c55e' : '#64748b'}
            animate={{ 
              y: rightDoorOpen ? 80 : 50,
              height: rightDoorOpen ? 50 : 200,
              fill: rightDoorOpen ? '#22c55e' : '#64748b'
            }}
            transition={{ duration: 0.3 }}
          />

          {/* Right Room (Cleanroom) */}
          <rect x="410" y="50" width="190" height="200" fill="rgba(34, 197, 94, 0.2)" stroke="#22c55e" strokeWidth="2" />
          <text x="505" y="40" fill="#94a3b8" fontSize="14" fontWeight="600" textAnchor="middle">
            Čisti Prostor
          </text>
          <text x="505" y="270" fill="#22c55e" fontSize="20" fontWeight="700" textAnchor="middle">
            {currentPressure.right} Pa
          </text>

          {/* Particles */}
          {particles.map(p => (
            <motion.circle
              key={p.id}
              cx={p.x}
              cy={p.y}
              r="2.5"
              fill={
                p.room === 'left' ? '#ef4444' : 
                p.room === 'airlock' ? currentType.color : 
                '#22c55e'
              }
              opacity="0.8"
              initial={{ opacity: 0, scale: 0 }}
              animate={{ opacity: 0.8, scale: 1 }}
              transition={{ duration: 0.2 }}
            />
          ))}

          {/* Pressure arrows */}
          {airlockType === 'bubble' && (
            <>
              {/* Arrow from airlock to left */}
              <motion.path
                d="M 250 150 L 220 150"
                stroke="#06b6d4"
                strokeWidth="3"
                fill="none"
                markerEnd="url(#arrowhead-left)"
                opacity={leftDoorOpen ? 1 : 0.3}
                animate={{ opacity: leftDoorOpen ? [0.3, 1, 0.3] : 0.3 }}
                transition={{ duration: 2, repeat: Infinity }}
              />
              {/* Arrow from airlock to right */}
              <motion.path
                d="M 350 150 L 380 150"
                stroke="#06b6d4"
                strokeWidth="3"
                fill="none"
                markerEnd="url(#arrowhead-right)"
                opacity={rightDoorOpen ? 1 : 0.3}
                animate={{ opacity: rightDoorOpen ? [0.3, 1, 0.3] : 0.3 }}
                transition={{ duration: 2, repeat: Infinity }}
              />
            </>
          )}

          {airlockType === 'sink' && (
            <>
              {/* Arrow from left to airlock */}
              <motion.path
                d="M 180 150 L 220 150"
                stroke="#8b5cf6"
                strokeWidth="3"
                fill="none"
                markerEnd="url(#arrowhead-right)"
                opacity={leftDoorOpen ? 1 : 0.3}
                animate={{ opacity: leftDoorOpen ? [0.3, 1, 0.3] : 0.3 }}
                transition={{ duration: 2, repeat: Infinity }}
              />
              {/* Arrow from right to airlock */}
              <motion.path
                d="M 420 150 L 390 150"
                stroke="#8b5cf6"
                strokeWidth="3"
                fill="none"
                markerEnd="url(#arrowhead-left)"
                opacity={rightDoorOpen ? 1 : 0.3}
                animate={{ opacity: rightDoorOpen ? [0.3, 1, 0.3] : 0.3 }}
                transition={{ duration: 2, repeat: Infinity }}
              />
            </>
          )}

          {airlockType === 'cascade' && (
            <>
              {/* Arrow from left to airlock */}
              <motion.path
                d="M 180 150 L 220 150"
                stroke="#f59e0b"
                strokeWidth="3"
                fill="none"
                markerEnd="url(#arrowhead-right)"
                opacity={leftDoorOpen ? 1 : 0.3}
                animate={{ opacity: leftDoorOpen ? [0.3, 1, 0.3] : 0.3 }}
                transition={{ duration: 2, repeat: Infinity }}
              />
              {/* Arrow from airlock to right */}
              <motion.path
                d="M 350 150 L 380 150"
                stroke="#f59e0b"
                strokeWidth="3"
                fill="none"
                markerEnd="url(#arrowhead-right)"
                opacity={rightDoorOpen ? 1 : 0.3}
                animate={{ opacity: rightDoorOpen ? [0.3, 1, 0.3] : 0.3 }}
                transition={{ duration: 2, repeat: Infinity }}
              />
            </>
          )}

          {/* Arrow markers */}
          <defs>
            <marker id="arrowhead-right" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
              <polygon points="0 0, 10 3, 0 6" fill="currentColor" />
            </marker>
            <marker id="arrowhead-left" markerWidth="10" markerHeight="10" refX="1" refY="3" orient="auto">
              <polygon points="10 0, 0 3, 10 6" fill="currentColor" />
            </marker>
          </defs>
        </svg>
      </div>

      {/* Door Controls */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginBottom: 24 }}>
        <motion.button
          onClick={() => setLeftDoorOpen(!leftDoorOpen)}
          style={{
            padding: '16px 24px',
            background: leftDoorOpen 
              ? 'linear-gradient(135deg, #22c55e, #16a34a)' 
              : 'rgba(255, 255, 255, 0.1)',
            border: `2px solid ${leftDoorOpen ? '#22c55e' : 'rgba(255, 255, 255, 0.2)'}`,
            borderRadius: 12,
            color: 'white',
            fontSize: 16,
            fontWeight: 600,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: 8
          }}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {leftDoorOpen ? '🔓 Zapri Leva Vrata' : '🔒 Odpri Leva Vrata'}
        </motion.button>

        <motion.button
          onClick={() => setRightDoorOpen(!rightDoorOpen)}
          style={{
            padding: '16px 24px',
            background: rightDoorOpen 
              ? 'linear-gradient(135deg, #22c55e, #16a34a)' 
              : 'rgba(255, 255, 255, 0.1)',
            border: `2px solid ${rightDoorOpen ? '#22c55e' : 'rgba(255, 255, 255, 0.2)'}`,
            borderRadius: 12,
            color: 'white',
            fontSize: 16,
            fontWeight: 600,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: 8
          }}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {rightDoorOpen ? '🔓 Zapri Desna Vrata' : '🔒 Odpri Desna Vrata'}
        </motion.button>
      </div>

      {/* Particle Legend */}
      <div style={{
        padding: 16,
        background: 'rgba(0, 0, 0, 0.3)',
        borderRadius: 12,
        border: '2px solid rgba(255, 255, 255, 0.1)',
        marginBottom: 20
      }}>
        <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 600, marginBottom: 12 }}>
          🔬 Legenda Delcev
        </div>
        <div style={{ display: 'flex', gap: 24 }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
            <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#ef4444' }} />
            <span style={{ fontSize: 13, color: '#94a3b8' }}>Kontaminanti</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
            <div style={{ width: 12, height: 12, borderRadius: '50%', background: currentType.color }} />
            <span style={{ fontSize: 13, color: '#94a3b8' }}>Zapornica</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
            <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#22c55e' }} />
            <span style={{ fontSize: 13, color: '#94a3b8' }}>Čist prostor</span>
          </div>
        </div>
      </div>

      {/* Info Box */}
      <div style={{
        padding: 16,
        background: `linear-gradient(135deg, ${currentType.color}22, ${currentType.color}11)`,
        borderRadius: 12,
        border: `1px solid ${currentType.color}`,
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>💡 Opomba:</strong> Opazuj kako se delci gibljejo glede na tip zapornice in odprtost vrat. 
        {airlockType === 'bubble' && ' Mehurčasta zapornica potiska delce v obe smeri.'}
        {airlockType === 'sink' && ' Ponorna zapornica vleče delce vase iz obeh strani.'}
        {airlockType === 'cascade' && ' Kaskadna zapornica omogoča enosmeren pretok od višjega k nižjemu tlaku.'}
      </div>
    </div>
  )
}

// OLD PressureGauge - DEPRECATED - Replaced by AirLockSimulation
export function PressureGauge() {
  const [pressure, setPressure] = useState(15)
  
  useEffect(() => {
    const interval = setInterval(() => {
      setPressure(10 + Math.random() * 10)
    }, 2000)
    return () => clearInterval(interval)
  }, [])
  
  const angle = (pressure / 20) * 180 - 90
  
  return (
    <div style={{ width: '100%', maxWidth: 300, margin: '0 auto' }}>
      <svg viewBox="0 0 200 120" style={{ width: '100%', height: 'auto' }}>
        {/* Gauge background */}
        <path
          d="M 20 100 A 80 80 0 0 1 180 100"
          fill="none"
          stroke="#1e293b"
          strokeWidth="20"
          strokeLinecap="round"
        />
        
        {/* Colored segments */}
        <path
          d="M 20 100 A 80 80 0 0 1 100 20"
          fill="none"
          stroke="#ef4444"
          strokeWidth="20"
          strokeLinecap="round"
          opacity="0.3"
        />
        <path
          d="M 100 20 A 80 80 0 0 1 180 100"
          fill="none"
          stroke="#10b981"
          strokeWidth="20"
          strokeLinecap="round"
          opacity="0.3"
        />
        
        {/* Needle */}
        <motion.g
          initial={{ rotate: -90 }}
          animate={{ rotate: angle }}
          transition={{ type: 'spring', stiffness: 50, damping: 15 }}
          style={{ transformOrigin: '100px 100px' }}
        >
          <line
            x1="100"
            y1="100"
            x2="100"
            y2="35"
            stroke="#7c3aed"
            strokeWidth="3"
            strokeLinecap="round"
          />
          <circle cx="100" cy="100" r="8" fill="#7c3aed" />
        </motion.g>
        
        {/* Labels */}
        <text x="30" y="110" fill="#94a3b8" fontSize="12" fontFamily="Inter">0</text>
        <text x="170" y="110" fill="#94a3b8" fontSize="12" fontFamily="Inter">20</text>
        <text x="100" y="110" fill="#94a3b8" fontSize="14" fontFamily="Inter" textAnchor="middle">Pa</text>
      </svg>
      <motion.div
        key={pressure}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        style={{ textAlign: 'center', marginTop: 10, fontSize: 24, fontWeight: 700, color: '#7c3aed' }}
      >
        {pressure.toFixed(1)} Pa
      </motion.div>
    </div>
  )
}

// HEPA Filter Efficiency Chart
export function HepaEfficiencyChart() {
  const [selectedFilter, setSelectedFilter] = useState<'H13' | 'H14' | 'U15'>('H14')
  const [particleSize, setParticleSize] = useState(0.3)
  const [showInfo, setShowInfo] = useState(false)
  
  const filterData = {
    'H13': { efficiency: 99.95, color: '#3b82f6', minEfficiency: 99.95 },
    'H14': { efficiency: 99.995, color: '#7c3aed', minEfficiency: 99.995 },
    'U15': { efficiency: 99.9995, color: '#ec4899', minEfficiency: 99.9995 }
  }
  
  const current = filterData[selectedFilter]
  
  // Efficiency curve data (MPPS - Most Penetrating Particle Size at 0.3μm)
  const efficiencyBySize = [
    { size: 0.1, eff: 99.97 },
    { size: 0.2, eff: 99.90 },
    { size: 0.3, eff: current.minEfficiency }, // MPPS - lowest efficiency
    { size: 0.5, eff: 99.998 },
    { size: 1.0, eff: 99.999 },
    { size: 5.0, eff: 99.9999 }
  ]
  
  return (
    <div style={{padding: 24, background: 'rgba(15, 23, 42, 0.6)', borderRadius: 16}}>
      <h3 style={{color: '#e6eef8', marginTop: 0, marginBottom: 24, fontSize: 20}}>
        🔬 HEPA Filter Učinkovitost
      </h3>
      
      {/* Filter Selection */}
      <div style={{marginBottom: 24, display: 'flex', gap: 12, justifyContent: 'center'}}>
        {(['H13', 'H14', 'U15'] as const).map(filter => (
          <motion.button
            key={filter}
            onClick={() => setSelectedFilter(filter)}
            style={{
              flex: 1,
              padding: '16px 24px',
              background: selectedFilter === filter 
                ? `linear-gradient(135deg, ${filterData[filter].color}, ${filterData[filter].color}dd)` 
                : 'rgba(255, 255, 255, 0.05)',
              border: selectedFilter === filter 
                ? `2px solid ${filterData[filter].color}` 
                : '2px solid rgba(255, 255, 255, 0.1)',
              borderRadius: 12,
              color: 'white',
              cursor: 'pointer',
              fontWeight: 600,
              fontSize: 16,
              transition: 'all 0.3s',
              position: 'relative',
              overflow: 'hidden'
            }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <div style={{fontSize: 18, marginBottom: 4}}>{filter}</div>
            <div style={{fontSize: 12, opacity: 0.8}}>
              ≥ {filterData[filter].minEfficiency}%
            </div>
            {selectedFilter === filter && (
              <motion.div
                layoutId="selectedFilter"
                style={{
                  position: 'absolute',
                  inset: 0,
                  background: `${filterData[filter].color}22`,
                  borderRadius: 10
                }}
              />
            )}
          </motion.button>
        ))}
      </div>

      {/* Main Efficiency Display */}
      <motion.div
        key={selectedFilter}
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        style={{
          textAlign: 'center',
          padding: 40,
          background: `linear-gradient(135deg, ${current.color}22, ${current.color}11)`,
          borderRadius: 16,
          border: `2px solid ${current.color}66`,
          marginBottom: 32
        }}
      >
        <div style={{fontSize: 14, color: '#94a3b8', marginBottom: 12, textTransform: 'uppercase', letterSpacing: '0.1em'}}>
          Minimalna Učinkovitost Filtra
        </div>
        <motion.div
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ type: 'spring', stiffness: 200 }}
          style={{
            fontSize: 72,
            fontWeight: 800,
            color: current.color,
            lineHeight: 1,
            marginBottom: 8,
            textShadow: `0 0 40px ${current.color}88`
          }}
        >
          {current.minEfficiency}%
        </motion.div>
        <div style={{fontSize: 14, color: '#cbd5e1'}}>
          pri najbolj prodorni velikosti delcev (MPPS 0.3μm)
        </div>
      </motion.div>

      {/* Efficiency Curve Graph */}
      <div style={{marginBottom: 24}}>
        <div style={{fontSize: 14, color: '#e6eef8', marginBottom: 16, fontWeight: 600}}>
          Učinkovitost glede na velikost delcev:
        </div>
        
        <svg width="100%" height="280" viewBox="0 0 600 280" style={{background: 'rgba(0,0,0,0.3)', borderRadius: 12, padding: 16}}>
          {/* Grid lines - fewer lines for clarity */}
          {[99, 99.9, 99.99, 99.999].map((val, i) => {
            const y = 230 - ((val - 99) / 0.999) * 200
            return (
              <g key={val}>
                <line
                  x1="100" y1={y}
                  x2="560" y2={y}
                  stroke="#334155"
                  strokeWidth="1"
                  strokeDasharray="4,4"
                  opacity="0.3"
                />
                <text
                  x="90" y={y + 4}
                  fill="#94a3b8"
                  fontSize="12"
                  textAnchor="end"
                  fontFamily="monospace"
                >
                  {val}%
                </text>
              </g>
            )
          })}
          
          {/* X-axis labels */}
          {efficiencyBySize.map((point, i) => {
            const x = 100 + (i / (efficiencyBySize.length - 1)) * 460
            return (
              <text
                key={point.size}
                x={x}
                y="260"
                fill="#94a3b8"
                fontSize="12"
                textAnchor="middle"
              >
                {point.size}μm
              </text>
            )
          })}
          
          {/* Efficiency curve */}
          <motion.path
            d={efficiencyBySize.map((point, i) => {
              const x = 100 + (i / (efficiencyBySize.length - 1)) * 460
              const y = 230 - ((point.eff - 99) / 0.999) * 200
              return i === 0 ? `M ${x} ${y}` : `L ${x} ${y}`
            }).join(' ')}
            fill="none"
            stroke={current.color}
            strokeWidth="3"
            initial={{ pathLength: 0, opacity: 0 }}
            animate={{ pathLength: 1, opacity: 1 }}
            transition={{ duration: 1.5, ease: 'easeInOut' }}
          />
          
          {/* Area under curve */}
          <motion.path
            d={`${efficiencyBySize.map((point, i) => {
              const x = 100 + (i / (efficiencyBySize.length - 1)) * 460
              const y = 230 - ((point.eff - 99) / 0.999) * 200
              return i === 0 ? `M ${x} ${y}` : `L ${x} ${y}`
            }).join(' ')} L 560 230 L 100 230 Z`}
            fill={`${current.color}22`}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1, delay: 0.5 }}
          />
          
          {/* Data points */}
          {efficiencyBySize.map((point, i) => {
            const x = 100 + (i / (efficiencyBySize.length - 1)) * 460
            const y = 230 - ((point.eff - 99) / 0.999) * 200
            const isMPPS = point.size === 0.3
            
            return (
              <motion.g
                key={point.size}
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: 0.5 + i * 0.1, type: 'spring' }}
              >
                <circle
                  cx={x}
                  cy={y}
                  r={isMPPS ? 8 : 6}
                  fill={isMPPS ? '#ef4444' : current.color}
                  stroke={isMPPS ? '#fca5a5' : '#fff'}
                  strokeWidth="2"
                />
                {isMPPS && (
                  <text
                    x={x}
                    y={y - 20}
                    fill="#ef4444"
                    fontSize="11"
                    fontWeight="bold"
                    textAnchor="middle"
                  >
                    MPPS ↓
                  </text>
                )}
              </motion.g>
            )
          })}
          
          {/* Axes */}
          <line x1="80" y1="200" x2="560" y2="200" stroke="#475569" strokeWidth="2"/>
          <line x1="80" y1="20" x2="80" y2="200" stroke="#475569" strokeWidth="2"/>
          
          {/* Axis labels */}
          <text x="320" y="248" fill="#e6eef8" fontSize="13" textAnchor="middle" fontWeight="600">
            Velikost delcev (μm)
          </text>
          <text x="35" y="110" fill="#e6eef8" fontSize="13" textAnchor="middle" fontWeight="600" transform="rotate(-90 35 110)">
            Učinkovitost (%)
          </text>
        </svg>
      </div>

      {/* Info Box */}
      <div style={{
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 16,
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <div style={{fontSize: 13, color: '#cbd5e1', lineHeight: 1.8}}>
          <strong style={{color: '#e6eef8'}}>💡 MPPS (Most Penetrating Particle Size):</strong> 
          {' '}Delci okoli 0.3 μm so najtežje ujeti, ker so preveliki za učinkovito Brownovo gibanje, 
          hkrati pa premajhni za prestrezanje ali vztrajnost. To je kritična točka za testiranje filtrov.
          <br/><br/>
          <strong style={{color: '#e6eef8'}}>Razred {selectedFilter}:</strong> 
          {' '}{selectedFilter === 'H13' && 'Primeren za manj kritične aplikacije (razred C/D).'}
          {selectedFilter === 'H14' && 'Standard za razrede A in B - najčistejši proizvodni prostori.'}
          {selectedFilter === 'U15' && 'Ultra nizko prodiranje - za najbolj kritične aplikacije.'}
        </div>
      </div>
    </div>
  )
}

// 3D HEPA Filter Mechanisms Visualization
export function HepaFilterMechanisms3D() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [selectedMechanism, setSelectedMechanism] = useState<'inertia' | 'interception' | 'diffusion' | 'all'>('all')

  useEffect(() => {
    if (!canvasRef.current) return

    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x0f172a)

    const camera = new THREE.PerspectiveCamera(60, 800 / 600, 0.1, 1000)
    camera.position.set(0, 0, 15)

    const renderer = new THREE.WebGLRenderer({ 
      canvas: canvasRef.current,
      antialias: true,
      alpha: true
    })
    renderer.setSize(800, 600)
    renderer.setPixelRatio(window.devicePixelRatio)

    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5)
    scene.add(ambientLight)
    
    const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8)
    directionalLight1.position.set(5, 5, 5)
    scene.add(directionalLight1)
    
    const directionalLight2 = new THREE.DirectionalLight(0x7c3aed, 0.4)
    directionalLight2.position.set(-5, -5, 5)
    scene.add(directionalLight2)

    // Create filter fibers (cylindrical mesh)
    const fiberGroup = new THREE.Group()
    const fiberMaterial = new THREE.MeshStandardMaterial({ 
      color: 0x64748b,
      metalness: 0.3,
      roughness: 0.7
    })

    // Create multiple vertical and horizontal fibers
    for (let i = 0; i < 8; i++) {
      // Vertical fibers
      const vGeometry = new THREE.CylinderGeometry(0.15, 0.15, 12, 8)
      const vFiber = new THREE.Mesh(vGeometry, fiberMaterial)
      vFiber.position.x = (i - 3.5) * 1.5
      fiberGroup.add(vFiber)

      // Horizontal fibers (rotated)
      const hGeometry = new THREE.CylinderGeometry(0.15, 0.15, 12, 8)
      const hFiber = new THREE.Mesh(hGeometry, fiberMaterial)
      hFiber.rotation.z = Math.PI / 2
      hFiber.position.y = (i - 3.5) * 1.5
      fiberGroup.add(hFiber)
    }

    // Add some diagonal fibers for complexity
    for (let i = 0; i < 4; i++) {
      const dGeometry = new THREE.CylinderGeometry(0.12, 0.12, 14, 8)
      const dFiber = new THREE.Mesh(dGeometry, fiberMaterial)
      dFiber.rotation.z = Math.PI / 4
      dFiber.position.x = (i - 1.5) * 2
      fiberGroup.add(dFiber)
    }

    fiberGroup.position.z = 0
    scene.add(fiberGroup)

    // Particle systems for each mechanism
    interface Particle {
      mesh: THREE.Mesh
      velocity: THREE.Vector3
      type: 'inertia' | 'interception' | 'diffusion'
      age: number
      brownianOffset: THREE.Vector3
      captured: boolean
    }

    const particles: Particle[] = []

    // Create particles
    const createParticle = (type: 'inertia' | 'interception' | 'diffusion') => {
      let size: number
      let color: number
      let speed: number

      if (type === 'inertia') {
        size = 0.4 // Large particles
        color = 0xef4444 // Red
        speed = 0.15
      } else if (type === 'interception') {
        size = 0.25 // Medium particles
        color = 0xf59e0b // Orange
        speed = 0.12
      } else {
        size = 0.12 // Small particles
        color = 0x3b82f6 // Blue
        speed = 0.08
      }

      const geometry = new THREE.SphereGeometry(size, 16, 16)
      const material = new THREE.MeshStandardMaterial({ 
        color,
        emissive: color,
        emissiveIntensity: 0.3,
        metalness: 0.5,
        roughness: 0.5
      })
      const mesh = new THREE.Mesh(geometry, material)

      // Start from left side
      mesh.position.x = -12
      mesh.position.y = (Math.random() - 0.5) * 8
      mesh.position.z = (Math.random() - 0.5) * 2

      const particle: Particle = {
        mesh,
        velocity: new THREE.Vector3(speed, 0, 0),
        type,
        age: 0,
        brownianOffset: new THREE.Vector3(0, 0, 0),
        captured: false
      }

      scene.add(mesh)
      particles.push(particle)
    }

    // Generate particles periodically
    let particleTimer = 0
    const spawnInterval = 30 // frames between spawns

    // Animation loop
    let animationId: number
    const animate = () => {
      animationId = requestAnimationFrame(animate)

      // Spawn new particles
      particleTimer++
      if (particleTimer >= spawnInterval) {
        if (selectedMechanism === 'all' || selectedMechanism === 'inertia') {
          createParticle('inertia')
        }
        if (selectedMechanism === 'all' || selectedMechanism === 'interception') {
          createParticle('interception')
        }
        if (selectedMechanism === 'all' || selectedMechanism === 'diffusion') {
          createParticle('diffusion')
        }
        particleTimer = 0
      }

      // Update particles
      particles.forEach((particle, index) => {
        if (particle.captured) {
          // Fade out captured particles
          const mat = particle.mesh.material as THREE.MeshStandardMaterial
          mat.opacity -= 0.02
          mat.transparent = true
          if (mat.opacity <= 0) {
            scene.remove(particle.mesh)
            particles.splice(index, 1)
          }
          return
        }

        particle.age++

        // Remove particles that went too far
        if (particle.mesh.position.x > 15 || particle.age > 1000) {
          scene.remove(particle.mesh)
          particles.splice(index, 1)
          return
        }

        // Different behavior based on mechanism
        if (particle.type === 'inertia') {
          // Large particles: straight trajectory, hit fibers directly
          particle.mesh.position.add(particle.velocity)
          
          // Check collision with fibers
          fiberGroup.children.forEach((fiber) => {
            const distance = particle.mesh.position.distanceTo(fiber.position)
            if (distance < 0.6) {
              particle.captured = true
              // Stick to fiber
              particle.velocity.set(0, 0, 0)
            }
          })
        } else if (particle.type === 'interception') {
          // Medium particles: follow airflow but get intercepted
          particle.mesh.position.add(particle.velocity)
          
          // Slight curve around fibers, but not enough
          fiberGroup.children.forEach((fiber) => {
            const toFiber = new THREE.Vector3().subVectors(fiber.position, particle.mesh.position)
            const distance = toFiber.length()
            
            if (distance < 1.5) {
              // Try to avoid, but trajectory not sharp enough
              const avoidForce = toFiber.normalize().multiplyScalar(-0.005)
              particle.velocity.add(avoidForce)
            }
            
            if (distance < 0.5) {
              particle.captured = true
              particle.velocity.set(0, 0, 0)
            }
          })
        } else {
          // Diffusion: Brownian motion (random walk)
          // Random velocity changes
          particle.brownianOffset.x += (Math.random() - 0.5) * 0.1
          particle.brownianOffset.y += (Math.random() - 0.5) * 0.1
          particle.brownianOffset.z += (Math.random() - 0.5) * 0.05
          
          // Damping
          particle.brownianOffset.multiplyScalar(0.95)
          
          const combinedVelocity = new THREE.Vector3()
            .addVectors(particle.velocity, particle.brownianOffset)
          
          particle.mesh.position.add(combinedVelocity)
          
          // Check collision with fibers
          fiberGroup.children.forEach((fiber) => {
            const distance = particle.mesh.position.distanceTo(fiber.position)
            if (distance < 0.4) {
              particle.captured = true
              particle.velocity.set(0, 0, 0)
              particle.brownianOffset.set(0, 0, 0)
            }
          })
        }
      })

      // Gentle rotation of filter for better view
      fiberGroup.rotation.y = Math.sin(Date.now() * 0.0003) * 0.1
      fiberGroup.rotation.x = Math.cos(Date.now() * 0.0002) * 0.05

      renderer.render(scene, camera)
    }

    animate()

    return () => {
      cancelAnimationFrame(animationId)
      renderer.dispose()
      scene.clear()
    }
  }, [selectedMechanism])

  const mechanisms = [
    { 
      id: 'all' as const, 
      name: 'Vsi mehanizmi', 
      color: '#8b5cf6',
      icon: '🔬'
    },
    { 
      id: 'inertia' as const, 
      name: 'Vztrajnost', 
      color: '#ef4444',
      icon: '🔴',
      description: 'Veliki delci (>1μm) ne sledijo toku zraka in trčijo v vlakna'
    },
    { 
      id: 'interception' as const, 
      name: 'Prestrezanje', 
      color: '#f59e0b',
      icon: '🟠',
      description: 'Srednji delci se ujamejo ob stiku z vlakni'
    },
    { 
      id: 'diffusion' as const, 
      name: 'Brownovo gibanje', 
      color: '#3b82f6',
      icon: '🔵',
      description: 'Najmanjši delci (<0.1μm) naključno trčijo v vlakna'
    }
  ]

  return (
    <div style={{padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16}}>
      <h3 style={{color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700}}>
        Mehanizmi Delovanja HEPA Filtra
      </h3>
      <p style={{color: '#94a3b8', marginBottom: 24, fontSize: 14}}>
        Interaktivna 3D vizualizacija treh različnih načinov ujemanja delcev
      </p>

      {/* Mechanism selector */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(160px, 1fr))',
        gap: 12,
        marginBottom: 24
      }}>
        {mechanisms.map(mech => (
          <motion.button
            key={mech.id}
            onClick={() => setSelectedMechanism(mech.id)}
            style={{
              padding: '12px 16px',
              background: selectedMechanism === mech.id 
                ? `linear-gradient(135deg, ${mech.color}, ${mech.color}dd)` 
                : 'rgba(255, 255, 255, 0.05)',
              border: selectedMechanism === mech.id 
                ? `2px solid ${mech.color}` 
                : '2px solid rgba(255, 255, 255, 0.1)',
              borderRadius: 10,
              color: 'white',
              cursor: 'pointer',
              fontWeight: 600,
              fontSize: 13,
              textAlign: 'left',
              transition: 'all 0.3s'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{fontSize: 20, marginBottom: 4}}>{mech.icon} {mech.name}</div>
            {mech.description && (
              <div style={{fontSize: 11, opacity: 0.8, marginTop: 4}}>
                {mech.description}
              </div>
            )}
          </motion.button>
        ))}
      </div>

      {/* 3D Canvas */}
      <div style={{
        background: 'rgba(0, 0, 0, 0.4)',
        borderRadius: 12,
        overflow: 'hidden',
        border: '2px solid rgba(124, 58, 237, 0.3)',
        marginBottom: 20
      }}>
        <canvas 
          ref={canvasRef} 
          style={{ 
            width: '100%', 
            height: 'auto',
            display: 'block'
          }} 
        />
      </div>

      {/* Legend */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
        gap: 16,
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 20,
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <div>
          <div style={{display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8}}>
            <div style={{width: 16, height: 16, borderRadius: '50%', background: '#ef4444'}}></div>
            <strong style={{color: '#e6eef8', fontSize: 14}}>Veliki delci (Vztrajnost)</strong>
          </div>
          <p style={{color: '#94a3b8', fontSize: 12, lineHeight: 1.6}}>
            Velikost {'>'} 1 μm. Masa preprečuje sledenje toku zraka, direkten trk v vlakna.
          </p>
        </div>

        <div>
          <div style={{display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8}}>
            <div style={{width: 14, height: 14, borderRadius: '50%', background: '#f59e0b'}}></div>
            <strong style={{color: '#e6eef8', fontSize: 14}}>Srednji delci (Prestrezanje)</strong>
          </div>
          <p style={{color: '#94a3b8', fontSize: 12, lineHeight: 1.6}}>
            Velikost 0.3-1 μm. Sledijo toku, vendar premajhni polmer zavoja povzroči stik z vlakni.
          </p>
        </div>

        <div>
          <div style={{display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8}}>
            <div style={{width: 12, height: 12, borderRadius: '50%', background: '#3b82f6'}}></div>
            <strong style={{color: '#e6eef8', fontSize: 14}}>Majhni delci (Difuzija)</strong>
          </div>
          <p style={{color: '#94a3b8', fontSize: 12, lineHeight: 1.6}}>
            Velikost {'<'} 0.1 μm. Naključno Brownovo gibanje poveča verjetnost trka z vlaknom.
          </p>
        </div>
      </div>

      {/* Scientific explanation */}
      <div style={{
        marginTop: 20,
        padding: 16,
        background: 'rgba(59, 130, 246, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(59, 130, 246, 0.3)'
      }}>
        <div style={{fontSize: 13, color: '#cbd5e1', lineHeight: 1.8}}>
          <strong style={{color: '#e6eef8'}}>💡 Zakaj HEPA filtri delujejo tako učinkovito:</strong>
          <br/>
          Kombinacija vseh treh mehanizmov zagotavlja, da so zajeti delci vseh velikosti. 
          Najtežje ujeti so delci okoli 0.3 μm (MPPS - Most Penetrating Particle Size), 
          kjer nihče od treh mehanizmov ni optimalno učinkovit. Zato se filter testira 
          ravno pri tej velikosti delcev - če doseže 99.995% (H14) pri MPPS, je še bolj 
          učinkovit pri vseh drugih velikostih.
        </div>
      </div>
    </div>
  )
}

// HEPA FILTER INTEGRITY TEST - Interactive 3D Scanning Simulation
export function HepaIntegrityTestSimulation() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [testPhase, setTestPhase] = useState<'ready' | 'scanning' | 'complete'>('ready')
  const [scanProgress, setScanProgress] = useState(0)
  const [defectsFound, setDefectsFound] = useState<Array<{ x: number; y: number; type: string; severity: string }>>([])
  const [aerosolFlow, setAerosolFlow] = useState(false)
  const [upstream, setUpstream] = useState(100)
  const [downstream, setDownstream] = useState(0)

  const startTest = () => {
    setTestPhase('scanning')
    setScanProgress(0)
    setDefectsFound([])
    setAerosolFlow(true)
    
    // Simulate finding defects during scan
    const defectInterval = setInterval(() => {
      if (Math.random() < 0.15) { // 15% chance to find defect
        const newDefect = {
          x: Math.random() * 500 + 50,
          y: Math.random() * 300 + 100,
          type: Math.random() < 0.5 ? 'Luknja' : 'Uhajanje',
          severity: Math.random() < 0.3 ? 'Critical' : 'Minor'
        }
        setDefectsFound(prev => [...prev, newDefect])
      }
    }, 800)

    // Progress simulation
    let progress = 0
    const progressInterval = setInterval(() => {
      progress += 2
      setScanProgress(progress)
      
      // Simulate downstream readings
      const leakage = defectsFound.length * 0.02 + Math.random() * 0.01
      setDownstream(leakage * 100)
      
      if (progress >= 100) {
        clearInterval(progressInterval)
        clearInterval(defectInterval)
        setTestPhase('complete')
        setAerosolFlow(false)
      }
    }, 100)
  }

  const resetTest = () => {
    setTestPhase('ready')
    setScanProgress(0)
    setDefectsFound([])
    setAerosolFlow(false)
    setUpstream(100)
    setDownstream(0)
  }

  useEffect(() => {
    if (!canvasRef.current) return

    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x0a0e1a)

    const camera = new THREE.PerspectiveCamera(50, 600 / 400, 0.1, 1000)
    camera.position.set(0, 0, 20)

    const renderer = new THREE.WebGLRenderer({ 
      canvas: canvasRef.current,
      antialias: true,
      alpha: true
    })
    renderer.setSize(600, 400)
    renderer.setPixelRatio(window.devicePixelRatio)

    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4)
    scene.add(ambientLight)
    
    const spotLight = new THREE.SpotLight(0x7c3aed, 1)
    spotLight.position.set(0, 10, 10)
    scene.add(spotLight)

    // Create HEPA filter frame
    const frameGeometry = new THREE.BoxGeometry(12, 8, 0.5)
    const frameMaterial = new THREE.MeshStandardMaterial({ 
      color: 0x64748b,
      metalness: 0.7,
      roughness: 0.3
    })
    const frame = new THREE.Mesh(frameGeometry, frameMaterial)
    scene.add(frame)

    // Filter media (pleated surface)
    const filterGeometry = new THREE.PlaneGeometry(11, 7, 30, 20)
    const filterMaterial = new THREE.MeshStandardMaterial({ 
      color: 0xf8fafc,
      side: THREE.DoubleSide,
      transparent: true,
      opacity: 0.9
    })
    
    // Add pleating effect
    const positions = filterGeometry.attributes.position as any
    for (let i = 0; i < positions.count; i++) {
      const x = positions.getX(i)
      positions.setZ(i, Math.sin(x * 2) * 0.3)
    }
    positions.needsUpdate = true
    
    const filter = new THREE.Mesh(filterGeometry, filterMaterial)
    filter.position.z = 0.1
    scene.add(filter)

    // Scanning probe
    const probeGeometry = new THREE.CylinderGeometry(0.15, 0.15, 3, 16)
    const probeMaterial = new THREE.MeshStandardMaterial({ 
      color: 0x06b6d4,
      emissive: 0x06b6d4,
      emissiveIntensity: 0.5,
      metalness: 0.8,
      roughness: 0.2
    })
    const probe = new THREE.Mesh(probeGeometry, probeMaterial)
    probe.position.set(-6, 0, 3)
    probe.rotation.z = Math.PI / 2
    scene.add(probe)

    // Scanning laser beam
    const beamGeometry = new THREE.CylinderGeometry(0.05, 0.05, 3, 8)
    const beamMaterial = new THREE.MeshBasicMaterial({ 
      color: 0x10b981,
      transparent: true,
      opacity: 0.6
    })
    const beam = new THREE.Mesh(beamGeometry, beamMaterial)
    beam.position.set(-6, 0, 1.5)
    beam.rotation.z = Math.PI / 2
    scene.add(beam)

    // Aerosol particles (upstream)
    const upstreamParticles: THREE.Points[] = []
    if (aerosolFlow) {
      const particleGeometry = new THREE.BufferGeometry()
      const particleCount = 500
      const positions = new Float32Array(particleCount * 3)
      
      for (let i = 0; i < particleCount; i++) {
        positions[i * 3] = (Math.random() - 0.5) * 12
        positions[i * 3 + 1] = (Math.random() - 0.5) * 8
        positions[i * 3 + 2] = -10 + Math.random() * 8
      }
      
      particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))
      
      const particleMaterial = new THREE.PointsMaterial({
        color: 0xfbbf24,
        size: 0.1,
        transparent: true,
        opacity: 0.8
      })
      
      const particles = new THREE.Points(particleGeometry, particleMaterial)
      scene.add(particles)
      upstreamParticles.push(particles)
    }

    // Defect markers
    const defectMarkers: THREE.Mesh[] = []
    defectsFound.forEach(defect => {
      const markerGeometry = new THREE.SphereGeometry(0.2, 16, 16)
      const markerMaterial = new THREE.MeshBasicMaterial({ 
        color: defect.severity === 'Critical' ? 0xef4444 : 0xf59e0b,
        transparent: true,
        opacity: 0.8
      })
      const marker = new THREE.Mesh(markerGeometry, markerMaterial)
      
      // Map 2D screen coordinates to 3D filter surface
      const x = (defect.x - 300) / 50
      const y = (200 - defect.y) / 50
      marker.position.set(x, y, 0.5)
      scene.add(marker)
      defectMarkers.push(marker)
    })

    // Animation loop
    let animationId: number
    let time = 0
    
    const animate = () => {
      animationId = requestAnimationFrame(animate)
      time += 0.01

      // Animate scanning probe
      if (testPhase === 'scanning') {
        const progress = scanProgress / 100
        probe.position.x = -6 + progress * 12
        probe.position.y = Math.sin(progress * Math.PI * 4) * 3
        beam.position.x = probe.position.x
        beam.position.y = probe.position.y
        
        // Pulse beam
        const beamMat = beam.material as THREE.MeshBasicMaterial
        beamMat.opacity = 0.4 + Math.sin(time * 10) * 0.2
      }

      // Animate particles
      upstreamParticles.forEach(particles => {
        const positions = particles.geometry.attributes.position as any
        for (let i = 0; i < positions.count; i++) {
          let z = positions.getZ(i)
          z += 0.05
          if (z > 0) z = -10
          positions.setZ(i, z)
        }
        positions.needsUpdate = true
      })

      // Pulse defect markers
      defectMarkers.forEach((marker, i) => {
        marker.scale.setScalar(1 + Math.sin(time * 5 + i) * 0.3)
      })

      // Gentle filter rotation for better view
      filter.rotation.y = Math.sin(time * 0.3) * 0.05

      renderer.render(scene, camera)
    }

    animate()

    return () => {
      cancelAnimationFrame(animationId)
      renderer.dispose()
      scene.clear()
    }
  }, [testPhase, scanProgress, defectsFound, aerosolFlow])

  const testResult = testPhase === 'complete' 
    ? (defectsFound.length === 0 ? 'PASSED' : defectsFound.some(d => d.severity === 'Critical') ? 'FAILED' : 'WARNING')
    : null

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        🔬 Preskus Celovitosti HEPA Filtra
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Interaktivna simulacija skeniranja filtra z aerosoli (PAO)
      </p>

      {/* Control panel */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: testPhase === 'ready' ? '1fr' : '1fr 1fr 1fr', 
        gap: 16, 
        marginBottom: 24 
      }}>
        {testPhase === 'ready' && (
          <motion.button
            onClick={startTest}
            style={{
              padding: '16px 32px',
              background: 'linear-gradient(135deg, #10b981, #059669)',
              border: '2px solid #34d399',
              borderRadius: 12,
              color: 'white',
              fontSize: 18,
              fontWeight: 700,
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 12
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <span style={{ fontSize: 24 }}>🚀</span>
            <span>Začni Preskus Celovitosti</span>
          </motion.button>
        )}

        {testPhase !== 'ready' && (
          <>
            <div style={{
              padding: 16,
              background: 'rgba(251, 191, 36, 0.1)',
              border: '2px solid #fbbf24',
              borderRadius: 12
            }}>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Upstream (PAO)</div>
              <div style={{ fontSize: 32, fontWeight: 800, color: '#fbbf24', fontFamily: 'monospace' }}>
                {upstream.toFixed(0)}%
              </div>
              <div style={{ fontSize: 11, color: '#cbd5e1' }}>Koncentracija aerosola</div>
            </div>

            <div style={{
              padding: 16,
              background: downstream > 0.05 ? 'rgba(239, 68, 68, 0.1)' : 'rgba(34, 197, 94, 0.1)',
              border: `2px solid ${downstream > 0.05 ? '#ef4444' : '#22c55e'}`,
              borderRadius: 12
            }}>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Downstream</div>
              <div style={{ 
                fontSize: 32, 
                fontWeight: 800, 
                color: downstream > 0.05 ? '#ef4444' : '#22c55e', 
                fontFamily: 'monospace' 
              }}>
                {downstream.toFixed(3)}%
              </div>
              <div style={{ fontSize: 11, color: '#cbd5e1' }}>Prodiranje aerosola</div>
            </div>

            <div style={{
              padding: 16,
              background: 'rgba(124, 58, 237, 0.1)',
              border: '2px solid #7c3aed',
              borderRadius: 12
            }}>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Napake Najdene</div>
              <div style={{ fontSize: 32, fontWeight: 800, color: '#7c3aed', fontFamily: 'monospace' }}>
                {defectsFound.length}
              </div>
              <div style={{ fontSize: 11, color: '#cbd5e1' }}>
                {defectsFound.filter(d => d.severity === 'Critical').length} kritičnih
              </div>
            </div>
          </>
        )}
      </div>

      {/* 3D Canvas */}
      <div style={{
        position: 'relative',
        background: 'rgba(0, 0, 0, 0.4)',
        borderRadius: 12,
        overflow: 'hidden',
        border: '2px solid rgba(124, 58, 237, 0.3)',
        marginBottom: 20
      }}>
        <canvas 
          ref={canvasRef} 
          style={{ 
            width: '100%', 
            height: 'auto',
            display: 'block'
          }} 
        />
        
        {/* Scanning progress overlay */}
        {testPhase === 'scanning' && (
          <div style={{
            position: 'absolute',
            top: 16,
            left: 16,
            right: 16,
            background: 'rgba(0, 0, 0, 0.7)',
            padding: 12,
            borderRadius: 8,
            backdropFilter: 'blur(10px)'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
              <span style={{ color: '#e6eef8', fontSize: 14, fontWeight: 600 }}>
                🔍 Skeniranje v teku...
              </span>
              <span style={{ color: '#06b6d4', fontSize: 14, fontWeight: 700 }}>
                {scanProgress}%
              </span>
            </div>
            <div style={{
              width: '100%',
              height: 8,
              background: 'rgba(255, 255, 255, 0.1)',
              borderRadius: 4,
              overflow: 'hidden'
            }}>
              <motion.div
                style={{
                  height: '100%',
                  background: 'linear-gradient(90deg, #06b6d4, #7c3aed)',
                  borderRadius: 4
                }}
                initial={{ width: 0 }}
                animate={{ width: `${scanProgress}%` }}
              />
            </div>
          </div>
        )}

        {/* Defects overlay */}
        {defectsFound.map((defect, i) => (
          <motion.div
            key={i}
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            style={{
              position: 'absolute',
              left: defect.x,
              top: defect.y,
              width: 20,
              height: 20,
              borderRadius: '50%',
              background: defect.severity === 'Critical' ? '#ef4444' : '#f59e0b',
              border: '2px solid white',
              boxShadow: `0 0 20px ${defect.severity === 'Critical' ? '#ef4444' : '#f59e0b'}`,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: 12,
              fontWeight: 'bold',
              color: 'white',
              animation: 'pulse-defect 1s infinite'
            }}
          >
            !
          </motion.div>
        ))}
      </div>

      {/* Results panel */}
      {testPhase === 'complete' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{
            padding: 24,
            background: testResult === 'PASSED' 
              ? 'rgba(34, 197, 94, 0.1)' 
              : testResult === 'FAILED' 
              ? 'rgba(239, 68, 68, 0.1)' 
              : 'rgba(245, 158, 11, 0.1)',
            border: `2px solid ${
              testResult === 'PASSED' 
                ? '#22c55e' 
                : testResult === 'FAILED' 
                ? '#ef4444' 
                : '#f59e0b'
            }`,
            borderRadius: 12,
            marginBottom: 20
          }}
        >
          <div style={{ textAlign: 'center', marginBottom: 16 }}>
            <div style={{ fontSize: 48, marginBottom: 8 }}>
              {testResult === 'PASSED' ? '✅' : testResult === 'FAILED' ? '❌' : '⚠️'}
            </div>
            <div style={{ 
              fontSize: 32, 
              fontWeight: 800, 
              color: testResult === 'PASSED' ? '#22c55e' : testResult === 'FAILED' ? '#ef4444' : '#f59e0b'
            }}>
              {testResult === 'PASSED' ? 'PRESKUS USPEŠEN' : testResult === 'FAILED' ? 'PRESKUS NEUSPEŠEN' : 'OPOZORILO'}
            </div>
          </div>

          <div style={{ fontSize: 14, color: '#cbd5e1', lineHeight: 1.6, marginBottom: 16 }}>
            {testResult === 'PASSED' && (
              <>Filter je prešel preskus celovitosti. Ni bilo odkritih napak ali uhajanja. 
              Filter je primeren za uporabo v razredih A in B.</>
            )}
            {testResult === 'FAILED' && (
              <>Filter NI prešel preskusa celovitosti. Odkrite so bile kritične napake, 
              ki povzročajo prekomerno uhajanje aerosola. Filter mora biti zamenjan.</>
            )}
            {testResult === 'WARNING' && (
              <>Filter je pokazal manjše nepravilnosti. Potrebna je dodatna preiskava 
              in odločitev o nadaljnji uporabi na podlagi analize tveganja.</>
            )}
          </div>

          {/* Defects list */}
          {defectsFound.length > 0 && (
            <div style={{ 
              background: 'rgba(0, 0, 0, 0.3)', 
              padding: 16, 
              borderRadius: 8,
              marginBottom: 16
            }}>
              <div style={{ fontSize: 14, fontWeight: 600, color: '#e6eef8', marginBottom: 12 }}>
                Odkrite napake:
              </div>
              {defectsFound.map((defect, i) => (
                <div 
                  key={i}
                  style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between',
                    padding: '8px 12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: 6,
                    marginBottom: 8
                  }}
                >
                  <span style={{ color: '#cbd5e1', fontSize: 13 }}>
                    {i + 1}. {defect.type} na poziciji ({Math.round(defect.x)}, {Math.round(defect.y)})
                  </span>
                  <span style={{ 
                    color: defect.severity === 'Critical' ? '#ef4444' : '#f59e0b',
                    fontSize: 13,
                    fontWeight: 600
                  }}>
                    {defect.severity === 'Critical' ? '🔴 Kritično' : '🟡 Manjše'}
                  </span>
                </div>
              ))}
            </div>
          )}

          <button
            onClick={resetTest}
            style={{
              width: '100%',
              padding: '12px',
              background: 'rgba(124, 58, 237, 0.2)',
              border: '2px solid #7c3aed',
              borderRadius: 10,
              color: 'white',
              fontSize: 16,
              fontWeight: 600,
              cursor: 'pointer'
            }}
          >
            🔄 Ponovi Preskus
          </button>
        </motion.div>
      )}

      {/* Educational info */}
      <div style={{
        padding: 16,
        background: 'rgba(59, 130, 246, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(59, 130, 246, 0.3)',
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>💡 O preskusu celovitosti:</strong>
        <br />
        <br />
        <strong>PAO test (Poli-Alfa-Olefin):</strong> Uporablja se aerosol PAO olja, ki ustvarja delce 
        velikosti okoli 0.3 μm (MPPS). Merimo koncentracijo upstream (pred filtrom) in downstream (za filtrom).
        <br /><br />
        <strong>Skeniranje:</strong> Sonda se premika po celotni površini filtra v grid vzorcu, 
        da odkrije lokalne napake - luknje, razpoke ali uhajanje ob tesnilih.
        <br /><br />
        <strong>Sprejemljivi kriteriji:</strong> Za filter razreda H14 je maksimalno dovoljeno lokalno 
        prodiranje 0.005% (5 ppm). Vsaka kritična napaka zahteva zamenjavo filtra.
      </div>

      <style>{`
        @keyframes pulse-defect {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.3); }
        }
      `}</style>
    </div>
  )
}

// Monitoring Methods Simulator (Lesson 106)
export function MonitoringMethodsSimulator() {
  const [grade, setGrade] = useState<'A' | 'B' | 'C' | 'D'>('B')
  const [method, setMethod] = useState<'active-air' | 'settle-plate' | 'contact-plate' | 'swab' | 'glove'>('active-air')
  const [scenario, setScenario] = useState<'normal' | 'people' | 'after-cleaning' | 'intervention' | 'equipment' | 'door-open' | 'filter-leak'>('normal')

  // Method-specific parameters
  const [volume, setVolume] = useState(1) // m3 for active air
  const [exposure, setExposure] = useState(60) // minutes for settle plate
  const [area, setArea] = useState(25) // cm2 for contact/swab

  // Simplified action limits inspired by EU GMP Annex 1 (in operation)
  // Note: values are simplified for training purposes
  const limits = {
    'active-air': { A: 1, B: 10, C: 100, D: 200 }, // CFU per m3
    'settle-plate': { A: 1, B: 5, C: 50, D: 100 }, // CFU per 4h (90mm)
    'contact-plate': { A: 1, B: 5, C: 25, D: 50 }, // CFU per plate (55mm)
    'swab': { A: 1, B: 5, C: 25, D: 50 }, // CFU per swab (~25 cm2)
    'glove': { A: 1, B: 5, C: 10, D: 20 } // CFU per glove
  } as const

  // Base background contamination rates per grade (arbitrary training values)
  const baseRate = { A: 0.2, B: 2, C: 15, D: 40 } // CFU per m3 equivalent

  // Scenario multipliers
  const scenarioFactor = {
    normal: 1,
    people: 3,
    'after-cleaning': 0.6,
    intervention: 5,
    equipment: 2.5,
    'door-open': 4,
    'filter-leak': 20
  } as const

  // Poisson sampler
  function samplePoisson(lambda: number) {
    const L = Math.exp(-lambda)
    let k = 0
    let p = 1
    do {
      k++
      p *= Math.random()
    } while (p > L)
    return k - 1
  }

  // Compute expected CFU for current method/params
  function expectedCFU() {
    const ratePerM3 = baseRate[grade] * scenarioFactor[scenario]
    switch (method) {
      case 'active-air':
        return ratePerM3 * volume // linear with sampled volume
      case 'settle-plate': {
        // Convert air rate to settle plate via deposition factor; scale to 4h reference
        const deposition = 0.02 // fraction that settles to a plate
        const scale = Math.min(exposure, 240) / 240 // normalize to 4h
        return ratePerM3 * deposition * scale * 100 // tuned scalar for realistic integers
      }
      case 'contact-plate':
      case 'swab': {
        // Convert air rate to surface contamination proxy by area
        const surfaceFactor = 0.15 // arbitrary mapping
        return ratePerM3 * surfaceFactor * (area / 25)
      }
      case 'glove': {
        const touchFactor = 0.1
        return ratePerM3 * touchFactor
      }
    }
  }

  const limit = limits[method][grade]
  const mean = expectedCFU()
  const cfu = Math.max(0, samplePoisson(Math.max(0.001, mean)))

  let status: 'ok' | 'alert' | 'action' = 'ok'
  if (cfu > limit) status = 'action'
  else if (cfu > limit * 0.6) status = 'alert'

  const colors = { ok: '#22c55e', alert: '#f59e0b', action: '#ef4444' }

  return (
    <div style={{ padding: 16, background: 'rgba(236, 72, 153, 0.08)', borderRadius: 12, border: '1px solid rgba(236, 72, 153, 0.25)' }}>
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
        {/* Controls */}
        <div>
          <div style={{ marginBottom: 12, color: '#e6eef8', fontWeight: 700 }}>Nastavitve</div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
            <div>
              <label style={{ color: '#94a3b8', fontSize: 12 }}>Razred</label>
              <select value={grade} onChange={e => setGrade(e.target.value as any)} style={{ width: '100%', padding: 8, borderRadius: 8, background: '#0b1220', color: '#e6eef8', border: '1px solid #334155' }}>
                <option value="A">A</option>
                <option value="B">B</option>
                <option value="C">C</option>
                <option value="D">D</option>
              </select>
            </div>
            <div>
              <label style={{ color: '#94a3b8', fontSize: 12 }}>Metoda</label>
              <select value={method} onChange={e => setMethod(e.target.value as any)} style={{ width: '100%', padding: 8, borderRadius: 8, background: '#0b1220', color: '#e6eef8', border: '1px solid #334155' }}>
                <option value="active-air">Aktivno vzorčenje zraka</option>
                <option value="settle-plate">Sedimentacijske plošče</option>
                <option value="contact-plate">Odtisne plošče (RODAC)</option>
                <option value="swab">Brisi površin</option>
                <option value="glove">Odtisi rokavic</option>
              </select>
            </div>
            <div>
              <label style={{ color: '#94a3b8', fontSize: 12 }}>Scenarij</label>
              <select value={scenario} onChange={e => setScenario(e.target.value as any)} style={{ width: '100%', padding: 8, borderRadius: 8, background: '#0b1220', color: '#e6eef8', border: '1px solid #334155' }}>
                <option value="normal">Normalno delovanje</option>
                <option value="people">Prisotnost oseb</option>
                <option value="equipment">Delovanje opreme</option>
                <option value="after-cleaning">Takoj po čiščenju</option>
                <option value="intervention">Intervencija/odpiranje opreme</option>
                <option value="door-open">Odprta vrata</option>
                <option value="filter-leak">Puščanje filtra</option>
              </select>
            </div>

            {/* Parametri metode */}
            {method === 'active-air' && (
              <div>
                <label style={{ color: '#94a3b8', fontSize: 12 }}>Volumen vzorca (m³)</label>
                <input type="range" min={0.25} max={2} step={0.25} value={volume} onChange={e => setVolume(parseFloat(e.target.value))} style={{ width: '100%' }} />
                <div style={{ color: '#cbd5e1', fontSize: 12 }}>{volume.toFixed(2)} m³</div>
              </div>
            )}

            {method === 'settle-plate' && (
              <div>
                <label style={{ color: '#94a3b8', fontSize: 12 }}>Čas izpostavitve (min)</label>
                <input type="range" min={15} max={240} step={15} value={exposure} onChange={e => setExposure(parseInt(e.target.value))} style={{ width: '100%' }} />
                <div style={{ color: '#cbd5e1', fontSize: 12 }}>{exposure} min</div>
              </div>
            )}

            {(method === 'contact-plate' || method === 'swab') && (
              <div>
                <label style={{ color: '#94a3b8', fontSize: 12 }}>Površina (cm²)</label>
                <input type="range" min={10} max={100} step={5} value={area} onChange={e => setArea(parseInt(e.target.value))} style={{ width: '100%' }} />
                <div style={{ color: '#cbd5e1', fontSize: 12 }}>{area} cm²</div>
              </div>
            )}
          </div>

          {/* Info box */}
          <div style={{ marginTop: 12, padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)', color: '#94a3b8', fontSize: 13, lineHeight: 1.5 }}>
            <strong style={{ color: '#e6eef8' }}>Meja ukrepanja (Action limit):</strong> {limit} CFU {method === 'active-air' ? '/ m³' : method === 'settle-plate' ? '/ 4h plošča' : '/ vzorec'}
          </div>
        </div>

        {/* Visualization/result */}
        <div>
          <div style={{ marginBottom: 12, color: '#e6eef8', fontWeight: 700 }}>Rezultat simulacije</div>
          <div style={{ padding: 16, background: 'rgba(255,255,255,0.04)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
              <div style={{ width: 14, height: 14, borderRadius: 999, background: colors[status] }} />
              <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>
                {status === 'ok' ? 'SKLADNO' : status === 'alert' ? 'OPOZORILO' : 'PRESEŽENO (UKREPAJ)'}
              </div>
            </div>

            <div style={{ marginTop: 12 }}>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>CFU</div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                <div style={{ flex: 1, height: 14, background: 'rgba(255,255,255,0.06)', borderRadius: 8, overflow: 'hidden' }}>
                  <div style={{ width: `${Math.min(100, (cfu / limit) * 100)}%`, height: '100%', background: colors[status], transition: 'width 300ms ease' }} />
                </div>
                <div style={{ color: '#e6eef8', fontWeight: 700 }}>{cfu}</div>
              </div>
              <div style={{ marginTop: 4, fontSize: 12, color: '#94a3b8' }}>Meja: {limit}</div>
            </div>

            {/* Small grid heatmap simulation */}
            <div style={{ marginTop: 16 }}>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Prostorska razpršenost (naključno)</div>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(10, 1fr)', gap: 4 }}>
                {Array.from({ length: 50 }).map((_, i) => {
                  const local = samplePoisson(Math.max(0.05, mean / 4))
                  const level = local === 0 ? 0 : local > limit / 2 ? 2 : 1
                  const bg = level === 0 ? 'rgba(34,197,94,0.15)' : level === 1 ? 'rgba(245,158,11,0.25)' : 'rgba(239,68,68,0.35)'
                  return <div key={i} style={{ height: 12, borderRadius: 3, background: bg }} />
                })}
              </div>
            </div>
          </div>

          {/* Educational notes */}
          <div style={{ marginTop: 12, padding: 12, background: 'rgba(236, 72, 153, 0.08)', borderRadius: 8, border: '1px solid rgba(236, 72, 153, 0.25)', color: '#cbd5e1', fontSize: 13, lineHeight: 1.55 }}>
            <strong style={{ color: '#fbcfe8' }}>Opombe:</strong>
            <ul style={{ margin: '8px 0 0 18px' }}>
              <li>Aktivno vzorčenje izraža CFU na m³; sedimentacijske plošče so odvisne od časa izpostavitve (referenca 4h).</li>
              <li>Kontaktne plošče in brisi predstavljajo površinsko kontaminacijo; interpretacija po mejah za posamezen razred.</li>
              <li>Scenariji simulirajo tipične vplive (prisotnost oseb, oprema, posegi, puščanje filtra).</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}

// Microbiological Growth Animation
export function MicrobeGrowth() {
  const [colonies, setColonies] = useState<Array<{ x: number; y: number; size: number; color: string }>>([])
  
  useEffect(() => {
    const newColonies = []
    for (let i = 0; i < 15; i++) {
      newColonies.push({
        x: Math.random() * 280 + 10,
        y: Math.random() * 180 + 10,
        size: Math.random() * 20 + 10,
        color: Math.random() > 0.5 ? '#10b981' : '#f59e0b'
      })
    }
    setColonies(newColonies)
  }, [])
  
  return (
    <svg viewBox="0 0 300 200" style={{ width: '100%', height: 'auto', background: 'rgba(15, 23, 42, 0.5)', borderRadius: 12 }}>
      {/* Petri dish */}
      <circle cx="150" cy="100" r="90" fill="#1e293b" stroke="#475569" strokeWidth="2" />
      
      {/* Growth medium */}
      <circle cx="150" cy="100" r="85" fill="#0f172a" opacity="0.8" />
      
      {/* Colonies */}
      {colonies.map((colony, i) => (
        <motion.circle
          key={i}
          cx={colony.x}
          cy={colony.y}
          r={colony.size}
          fill={colony.color}
          initial={{ scale: 0, opacity: 0 }}
          animate={{ scale: 1, opacity: 0.7 }}
          transition={{
            delay: i * 0.1,
            duration: 0.5,
            type: 'spring'
          }}
        />
      ))}
      
      <text x="150" y="195" fill="#94a3b8" fontSize="12" textAnchor="middle" fontFamily="Inter">
        Kolonijske Enote
      </text>
    </svg>
  )
}

// Sterilization Process Timeline
export function SterilizationTimeline() {
  const [currentStep, setCurrentStep] = useState(0)
  
  const steps = [
    { label: 'Čiščenje', icon: '🧹', color: '#3b82f6' },
    { label: 'Razkuževanje', icon: '🧪', color: '#8b5cf6' },
    { label: 'Sterilizacija', icon: '🔥', color: '#ef4444' },
    { label: 'Validacija', icon: '✓', color: '#10b981' }
  ]
  
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentStep(prev => (prev + 1) % steps.length)
    }, 2500)
    return () => clearInterval(interval)
  }, [])
  
  return (
    <div style={{ padding: 20 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', position: 'relative' }}>
        {/* Progress line */}
        <motion.div
          style={{
            position: 'absolute',
            top: 30,
            left: 0,
            height: 4,
            background: 'linear-gradient(90deg, #7c3aed, #a78bfa)',
            borderRadius: 2,
            zIndex: 0
          }}
          initial={{ width: '0%' }}
          animate={{ width: `${(currentStep / (steps.length - 1)) * 100}%` }}
          transition={{ duration: 0.5 }}
        />
        
        {steps.map((step, i) => (
          <motion.div
            key={i}
            style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              zIndex: 1,
              position: 'relative'
            }}
            initial={{ scale: 0.8, opacity: 0.5 }}
            animate={{
              scale: i === currentStep ? 1.2 : 0.9,
              opacity: i <= currentStep ? 1 : 0.4
            }}
            transition={{ duration: 0.3 }}
          >
            <motion.div
              style={{
                width: 60,
                height: 60,
                borderRadius: '50%',
                background: i <= currentStep ? step.color : '#334155',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 28,
                border: i === currentStep ? '3px solid #fff' : '3px solid transparent',
                boxShadow: i === currentStep ? `0 0 20px ${step.color}` : 'none'
              }}
            >
              {step.icon}
            </motion.div>
            <div style={{ marginTop: 10, fontSize: 12, color: '#e2e8f0', textAlign: 'center', fontWeight: 600 }}>
              {step.label}
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  )
}

// Installation Qualification (IQ) Simulator (Lesson 109)
export function InstallationQualificationSimulator() {
  const [activeStep, setActiveStep] = useState<'installation' | 'documentation' | 'calibration' | 'materials' | 'safety' | 'training'>('installation')
  const [installationChecks, setInstallationChecks] = useState<Record<string, boolean>>({
    location: false,
    level: false,
    utilities: false,
    connections: false,
    clearance: false
  })
  const [documentation, setDocumentation] = useState<Array<{ doc: string; status: 'verified' | 'pending' | 'missing' }>>([
    { doc: 'Operating Manual', status: 'verified' },
    { doc: 'Maintenance Procedures', status: 'verified' },
    { doc: 'Spare Parts List', status: 'pending' },
    { doc: 'Electrical Schematics', status: 'verified' },
    { doc: 'Software Documentation', status: 'missing' }
  ])
  const [calibrationCerts, setCalibrationCerts] = useState<Array<{ instrument: string; certNo: string; expiry: string; valid: boolean }>>([
    { instrument: 'Pressure Sensor', certNo: 'CAL-2025-001', expiry: '2026-01-15', valid: true },
    { instrument: 'Temperature Probe', certNo: 'CAL-2025-002', expiry: '2026-02-20', valid: true },
    { instrument: 'Flow Meter', certNo: 'CAL-2024-089', expiry: '2025-03-10', valid: false },
    { instrument: 'Particle Counter', certNo: 'CAL-2025-003', expiry: '2026-04-12', valid: true }
  ])
  const [materialsChecked, setMaterialsChecked] = useState(0)
  const [safetyTests, setSafetyTests] = useState<Record<string, 'pass' | 'fail' | 'pending'>>({
    emergency: 'pending',
    interlock: 'pending',
    alarm: 'pending',
    shutdown: 'pending'
  })
  const [trainingCompleted, setTrainingCompleted] = useState<Array<{ person: string; role: string; completed: boolean }>>([
    { person: 'Operator A', role: 'Production', completed: false },
    { person: 'Operator B', role: 'Production', completed: false },
    { person: 'Technician C', role: 'Maintenance', completed: false },
    { person: 'Supervisor D', role: 'QA', completed: false }
  ])

  const canvasRef = useRef<HTMLCanvasElement>(null)

  // 3D Equipment installation visualization
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let rotation = 0

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      
      rotation += 0.008

      // Draw 3D HVAC unit being installed
      const centerX = 150
      const centerY = 100

      // Base platform
      ctx.fillStyle = '#334155'
      ctx.fillRect(centerX - 80, centerY + 40, 160, 10)

      // Equipment body (3D cube effect)
      const size = 60
      const x = centerX + Math.sin(rotation) * 15
      const y = centerY + Math.cos(rotation) * 5
      
      // Front face
      ctx.fillStyle = '#0284c7'
      ctx.fillRect(x - size/2, y - size/2, size, size)
      
      // Top face (isometric)
      ctx.fillStyle = '#0ea5e9'
      ctx.beginPath()
      ctx.moveTo(x - size/2, y - size/2)
      ctx.lineTo(x, y - size/2 - 20)
      ctx.lineTo(x + size/2, y - size/2)
      ctx.lineTo(x + size/2, y - size/2)
      ctx.fill()

      // Side face
      ctx.fillStyle = '#075985'
      ctx.beginPath()
      ctx.moveTo(x + size/2, y - size/2)
      ctx.lineTo(x + size/2 + 15, y - size/2 + 10)
      ctx.lineTo(x + size/2 + 15, y + size/2 + 10)
      ctx.lineTo(x + size/2, y + size/2)
      ctx.fill()

      // Installation progress indicator
      const installProgress = Object.values(installationChecks).filter(Boolean).length / Object.keys(installationChecks).length
      ctx.fillStyle = installProgress === 1 ? '#22c55e' : '#fbbf24'
      ctx.fillRect(centerX - 80, centerY + 60, 160 * installProgress, 8)
      ctx.strokeStyle = '#475569'
      ctx.strokeRect(centerX - 80, centerY + 60, 160, 8)

      // Labels
      ctx.font = 'bold 11px Inter'
      ctx.fillStyle = '#cbd5e1'
      ctx.textAlign = 'center'
      ctx.fillText('HVAC Unit', centerX, centerY + 85)
      ctx.fillText(`${Math.round(installProgress * 100)}% Installed`, centerX, centerY + 100)

      // Installation tools around equipment
      const tools = [
        { icon: '🔧', angle: rotation * 2, radius: 80 },
        { icon: '📏', angle: rotation * 2 + Math.PI / 2, radius: 80 },
        { icon: '🔌', angle: rotation * 2 + Math.PI, radius: 80 },
        { icon: '⚙️', angle: rotation * 2 + Math.PI * 1.5, radius: 80 }
      ]

      ctx.font = '20px Arial'
      tools.forEach(tool => {
        const tx = centerX + Math.cos(tool.angle) * tool.radius
        const ty = centerY + Math.sin(tool.angle) * tool.radius
        ctx.fillText(tool.icon, tx - 10, ty + 10)
      })

      requestAnimationFrame(animate)
    }

    animate()
  }, [installationChecks])

  const steps = {
    installation: {
      icon: '🏗️',
      title: 'Namestitev opreme',
      color: '#06b6d4',
      desc: 'Fizična namestitev in kontrola pozicioniranja'
    },
    documentation: {
      icon: '📚',
      title: 'Dokumentacija',
      color: '#0284c7',
      desc: 'Preverjanje priloženih dokumentov in navodil'
    },
    calibration: {
      icon: '📊',
      title: 'Kalibracija',
      color: '#0369a1',
      desc: 'Kontrola kalibracijskih certifikatov instrumentov'
    },
    materials: {
      icon: '🔩',
      title: 'Materiali',
      color: '#075985',
      desc: 'Preverjanje materialov in komponent'
    },
    safety: {
      icon: '🛡️',
      title: 'Varnost',
      color: '#0c4a6e',
      desc: 'Preskušanje varnostnih sistemov'
    },
    training: {
      icon: '👨‍🏫',
      title: 'Usposabljanje',
      color: '#082f49',
      desc: 'Usposabljanje osebja za upravljanje'
    }
  }

  const installProgress = Object.values(installationChecks).filter(Boolean).length
  const docProgress = documentation.filter(d => d.status === 'verified').length
  const calibProgress = calibrationCerts.filter(c => c.valid).length
  const safetyProgress = Object.values(safetyTests).filter(s => s === 'pass').length
  const trainingProgress = trainingCompleted.filter(t => t.completed).length

  return (
    <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
      {/* Step navigation */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(110px, 1fr))', gap: 8, marginBottom: 20 }}>
        {Object.entries(steps).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActiveStep(key as any)}
            style={{
              padding: 10,
              background: activeStep === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeStep === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 8,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 20, marginBottom: 4 }}>{val.icon}</div>
            <div style={{ fontSize: 10, color: '#e6eef8', fontWeight: 600, lineHeight: 1.2 }}>{val.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '380px 1fr', gap: 16 }}>
        {/* Left: 3D Visualization + Overall Progress */}
        <div>
          <div style={{ marginBottom: 12, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Vizualizacija namestitve</div>
          <canvas
            ref={canvasRef}
            width={300}
            height={220}
            style={{
              width: '100%',
              height: 'auto',
              background: 'rgba(0,0,0,0.3)',
              borderRadius: 12,
              border: '1px solid rgba(6, 182, 212, 0.3)'
            }}
          />

          {/* Overall IQ Progress Dashboard */}
          <div style={{ marginTop: 16, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 13, color: '#67e8f9', fontWeight: 700, marginBottom: 12 }}>IQ Napredek</div>
            {[
              { label: '🏗️ Namestitev', progress: installProgress, total: 5, color: '#06b6d4' },
              { label: '📚 Dokumentacija', progress: docProgress, total: 5, color: '#0284c7' },
              { label: '📊 Kalibracija', progress: calibProgress, total: 4, color: '#0369a1' },
              { label: '🔩 Materiali', progress: materialsChecked, total: 10, color: '#075985' },
              { label: '🛡️ Varnost', progress: safetyProgress, total: 4, color: '#0c4a6e' },
              { label: '👨‍🏫 Usposabljanje', progress: trainingProgress, total: 4, color: '#082f49' }
            ].map((item, i) => (
              <div key={i} style={{ marginBottom: 10 }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>
                  <span style={{ fontSize: 11, color: '#cbd5e1' }}>{item.label}</span>
                  <span style={{ fontSize: 11, color: '#e6eef8', fontWeight: 600 }}>{item.progress}/{item.total}</span>
                </div>
                <div style={{ height: 6, background: 'rgba(255,255,255,0.06)', borderRadius: 4, overflow: 'hidden' }}>
                  <motion.div
                    style={{ height: '100%', background: item.color, borderRadius: 4 }}
                    initial={{ width: 0 }}
                    animate={{ width: `${(item.progress / item.total) * 100}%` }}
                    transition={{ duration: 0.5 }}
                  />
                </div>
              </div>
            ))}

            <div style={{ marginTop: 14, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, textAlign: 'center' }}>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Skupni IQ napredek</div>
              <div style={{ fontSize: 22, color: '#67e8f9', fontWeight: 700 }}>
                {Math.round(((installProgress + docProgress + calibProgress + materialsChecked + safetyProgress + trainingProgress) / 32) * 100)}%
              </div>
            </div>
          </div>
        </div>

        {/* Right: Active step content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div
              key={activeStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', minHeight: 400 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                  <div style={{ fontSize: 36 }}>{steps[activeStep].icon}</div>
                  <div>
                    <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>{steps[activeStep].title}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 2 }}>{steps[activeStep].desc}</div>
                  </div>
                </div>

                {activeStep === 'installation' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Kontrolna lista namestitve</div>
                    {[
                      { key: 'location', label: '📍 Lokacija skladno z načrtom', detail: 'P&ID diagram, layout' },
                      { key: 'level', label: '📏 Nivelacija in stabilnost', detail: 'Vibracijska analiza, nivoji' },
                      { key: 'utilities', label: '⚡ Priključki na napajanje', detail: 'Elektrika, voda, zrak' },
                      { key: 'connections', label: '🔌 Kanali in cevi povezani', detail: 'Supply/return/exhaust' },
                      { key: 'clearance', label: '↔️ Dostopnost za vzdrževanje', detail: 'Minimalno 60 cm prostor' }
                    ].map(item => (
                      <label
                        key={item.key}
                        style={{
                          display: 'flex',
                          alignItems: 'flex-start',
                          padding: 12,
                          marginBottom: 8,
                          background: installationChecks[item.key] ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.02)',
                          border: `1px solid ${installationChecks[item.key] ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                          borderRadius: 8,
                          cursor: 'pointer'
                        }}
                      >
                        <input
                          type="checkbox"
                          checked={installationChecks[item.key]}
                          onChange={() => setInstallationChecks(prev => ({ ...prev, [item.key]: !prev[item.key] }))}
                          style={{ marginRight: 10, marginTop: 3, width: 16, height: 16 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{item.label}</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>{item.detail}</div>
                        </div>
                        {installationChecks[item.key] && <span style={{ fontSize: 18, color: '#06b6d4' }}>✓</span>}
                      </label>
                    ))}

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>💡 IQ kriterij:</strong> Vsi instalacijski koraki morajo biti dokončani in podpisani s strani QA, Engineering in Vendor predstavnika.
                    </div>
                  </div>
                )}

                {activeStep === 'documentation' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Preverjanje dokumentacije</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {documentation.map((doc, i) => {
                        const statusConfig = {
                          verified: { color: '#22c55e', icon: '✅', label: 'Preverjen' },
                          pending: { color: '#f59e0b', icon: '⏳', label: 'V pregledu' },
                          missing: { color: '#ef4444', icon: '❌', label: 'Manjka' }
                        }
                        const config = statusConfig[doc.status]

                        return (
                          <motion.div
                            key={i}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: i * 0.08 }}
                            style={{
                              padding: 12,
                              background: 'rgba(255,255,255,0.03)',
                              borderRadius: 8,
                              border: `1px solid ${config.color}33`,
                              display: 'flex',
                              alignItems: 'center',
                              gap: 12
                            }}
                          >
                            <div style={{ fontSize: 24 }}>{config.icon}</div>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{doc.doc}</div>
                              <div style={{ fontSize: 11, color: config.color, marginTop: 2 }}>{config.label}</div>
                            </div>
                            <select
                              value={doc.status}
                              onChange={(e) => {
                                const updated = [...documentation]
                                updated[i].status = e.target.value as any
                                setDocumentation(updated)
                              }}
                              style={{
                                padding: 6,
                                borderRadius: 6,
                                background: '#0b1220',
                                color: '#e6eef8',
                                border: '1px solid #334155',
                                fontSize: 11
                              }}
                            >
                              <option value="verified">Preverjen</option>
                              <option value="pending">V pregledu</option>
                              <option value="missing">Manjka</option>
                            </select>
                          </motion.div>
                        )
                      })}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📋 Zahteve:</strong> Vsi dokumenti morajo biti v angleškem/slovenskem jeziku, ažurirani in odobreni. Manjkajoči dokumenti blokirajo zaključek IQ.
                    </div>
                  </div>
                )}

                {activeStep === 'calibration' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Kalibracija certifikati</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {calibrationCerts.map((cert, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.1 }}
                          style={{
                            padding: 12,
                            background: cert.valid ? 'rgba(34,197,94,0.1)' : 'rgba(239,68,68,0.1)',
                            borderRadius: 8,
                            border: `1px solid ${cert.valid ? '#22c55e' : '#ef4444'}33`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 8 }}>
                            <div style={{ fontSize: 20 }}>{cert.valid ? '✅' : '❌'}</div>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{cert.instrument}</div>
                              <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Cert. No: {cert.certNo}</div>
                            </div>
                          </div>
                          <div style={{ display: 'flex', gap: 12, fontSize: 11 }}>
                            <div>
                              <span style={{ color: '#94a3b8' }}>Poteče: </span>
                              <span style={{ color: cert.valid ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>{cert.expiry}</span>
                            </div>
                            <div>
                              <span style={{ color: cert.valid ? '#22c55e' : '#ef4444', fontWeight: 700 }}>
                                {cert.valid ? 'VELJAVEN' : 'POTEKEL'}
                              </span>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📊 Kalibracija:</strong> Vsi instrumenti morajo imeti veljavne kalibracijske certifikate (ISO 17025 akreditirana laboratorija). Re-kalibracija letno ali po priporočilih proizvajalca.
                    </div>
                  </div>
                )}

                {activeStep === 'materials' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Kontrola materialov in komponent</div>
                    <div style={{ padding: 20, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', textAlign: 'center' }}>
                      <div style={{ fontSize: 48, marginBottom: 12 }}>🔩</div>
                      <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 700, marginBottom: 8 }}>
                        Preverjeni materiali: {materialsChecked}/10
                      </div>
                      <div style={{ height: 12, background: 'rgba(255,255,255,0.06)', borderRadius: 8, overflow: 'hidden', marginBottom: 16 }}>
                        <motion.div
                          style={{ height: '100%', background: 'linear-gradient(90deg, #075985, #0ea5e9)', borderRadius: 8 }}
                          animate={{ width: `${(materialsChecked / 10) * 100}%` }}
                          transition={{ duration: 0.4 }}
                        />
                      </div>
                      <button
                        onClick={() => setMaterialsChecked(prev => Math.min(10, prev + 1))}
                        disabled={materialsChecked >= 10}
                        style={{
                          padding: '12px 24px',
                          background: materialsChecked >= 10 ? 'rgba(34,197,94,0.3)' : 'linear-gradient(135deg, #075985, #0ea5e9)',
                          border: 'none',
                          borderRadius: 8,
                          color: '#e6eef8',
                          fontSize: 13,
                          fontWeight: 600,
                          cursor: materialsChecked >= 10 ? 'not-allowed' : 'pointer',
                          marginRight: 8
                        }}
                      >
                        {materialsChecked >= 10 ? '✅ Vsi preverjeni' : '➕ Preveri naslednji'}
                      </button>
                      {materialsChecked > 0 && (
                        <button
                          onClick={() => setMaterialsChecked(0)}
                          style={{
                            padding: '12px 24px',
                            background: 'rgba(239,68,68,0.2)',
                            border: '1px solid rgba(239,68,68,0.3)',
                            borderRadius: 8,
                            color: '#fca5a5',
                            fontSize: 13,
                            fontWeight: 600,
                            cursor: 'pointer'
                          }}
                        >
                          🔄 Ponastavi
                        </button>
                      )}
                    </div>

                    <div style={{ marginTop: 12 }}>
                      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Primeri preverjanja:</div>
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8 }}>
                        {[
                          '✓ HEPA filter - razred H14',
                          '✓ Tesnila - FDA odobrena',
                          '✓ Cevi - 316L nerjavno jeklo',
                          '✓ Ventili - sanitarna izvedba'
                        ].map((item, i) => (
                          <div key={i} style={{ padding: 8, background: 'rgba(255,255,255,0.02)', borderRadius: 6, fontSize: 11, color: '#cbd5e1' }}>
                            {item}
                          </div>
                        ))}
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🔩 Materiali:</strong> Vsi materiali morajo imeti CoC (Certificate of Conformity) in biti skladni z GMP zahtevami. Posebna pozornost pri kontaktnih površinah (316L SS, FDA approved).
                    </div>
                  </div>
                )}

                {activeStep === 'safety' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Varnostni sistemi</div>
                    {[
                      { key: 'emergency', label: '🚨 Emergency Stop', detail: 'Preskus ustavljanja v sili' },
                      { key: 'interlock', label: '🔒 Door Interlocks', detail: 'Zaklepanje vrat pri delovanju' },
                      { key: 'alarm', label: '🔔 Alarms & Warnings', detail: 'Zvočni/vizualni alarmi' },
                      { key: 'shutdown', label: '⚡ Safe Shutdown', detail: 'Varen zaustavni postopek' }
                    ].map(item => (
                      <div
                        key={item.key}
                        style={{
                          padding: 12,
                          marginBottom: 10,
                          background: 'rgba(255,255,255,0.03)',
                          borderRadius: 8,
                          border: '1px solid rgba(255,255,255,0.08)'
                        }}
                      >
                        <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 8 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, flex: 1 }}>{item.label}</div>
                          <div style={{ display: 'flex', gap: 6 }}>
                            <button
                              onClick={() => setSafetyTests(prev => ({ ...prev, [item.key]: 'pass' }))}
                              style={{
                                padding: '6px 14px',
                                background: safetyTests[item.key] === 'pass' ? 'linear-gradient(135deg, #22c55e, #16a34a)' : 'rgba(34,197,94,0.2)',
                                border: safetyTests[item.key] === 'pass' ? '2px solid #22c55e' : '1px solid rgba(34,197,94,0.3)',
                                borderRadius: 6,
                                color: '#e6eef8',
                                fontSize: 11,
                                fontWeight: 600,
                                cursor: 'pointer'
                              }}
                            >
                              ✅ Pass
                            </button>
                            <button
                              onClick={() => setSafetyTests(prev => ({ ...prev, [item.key]: 'fail' }))}
                              style={{
                                padding: '6px 14px',
                                background: safetyTests[item.key] === 'fail' ? 'linear-gradient(135deg, #ef4444, #dc2626)' : 'rgba(239,68,68,0.2)',
                                border: safetyTests[item.key] === 'fail' ? '2px solid #ef4444' : '1px solid rgba(239,68,68,0.3)',
                                borderRadius: 6,
                                color: '#e6eef8',
                                fontSize: 11,
                                fontWeight: 600,
                                cursor: 'pointer'
                              }}
                            >
                              ❌ Fail
                            </button>
                          </div>
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8' }}>{item.detail}</div>
                        {safetyTests[item.key] === 'pass' && (
                          <div style={{ marginTop: 6, fontSize: 11, color: '#6ee7b7', fontWeight: 600 }}>✓ Test opravljen uspešno</div>
                        )}
                        {safetyTests[item.key] === 'fail' && (
                          <div style={{ marginTop: 6, fontSize: 11, color: '#fca5a5', fontWeight: 600 }}>✗ Test ni uspel - potrebna korekcija</div>
                        )}
                      </div>
                    ))}

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🛡️ Varnost:</strong> Vsi varnostni sistemi morajo opraviti teste pred operativno uporabo. Dokumentacija mora vsebovati protokole testov z datumi in podpisi.
                    </div>
                  </div>
                )}

                {activeStep === 'training' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Usposabljanje osebja</div>
                    {trainingCompleted.map((person, i) => (
                      <label
                        key={i}
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          padding: 12,
                          marginBottom: 8,
                          background: person.completed ? 'rgba(34,197,94,0.1)' : 'rgba(255,255,255,0.02)',
                          border: `1px solid ${person.completed ? '#22c55e' : 'rgba(255,255,255,0.08)'}`,
                          borderRadius: 8,
                          cursor: 'pointer'
                        }}
                      >
                        <input
                          type="checkbox"
                          checked={person.completed}
                          onChange={() => {
                            const updated = [...trainingCompleted]
                            updated[i].completed = !updated[i].completed
                            setTrainingCompleted(updated)
                          }}
                          style={{ marginRight: 10, width: 16, height: 16 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{person.person}</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Vloga: {person.role}</div>
                        </div>
                        {person.completed && (
                          <div style={{ fontSize: 11, color: '#22c55e', fontWeight: 700 }}>✓ Usposobljen</div>
                        )}
                      </label>
                    ))}

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Vsebina usposabljanja (IQ faza):</div>
                      <div style={{ display: 'grid', gap: 6 }}>
                        {[
                          '• Pregled opreme in funkcionalnost',
                          '• Postopki za vklop/izklop',
                          '• Varnostni sistemi in emergency stop',
                          '• Osnovno vzdrževanje in čiščenje',
                          '• Alarmni sistemi in odziv',
                          '• Dokumentiranje in logiranje'
                        ].map((item, i) => (
                          <div key={i} style={{ fontSize: 11, color: '#cbd5e1', paddingLeft: 8 }}>
                            {item}
                          </div>
                        ))}
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>👨‍🏫 Usposabljanje:</strong> Vse osebje mora opraviti usposabljanje in podpisati potrdilo. IQ ni zaključen brez dokumentiranih usposabljanj.
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Operational Qualification (OQ) Simulator (Lesson 109)
export function OperationalQualificationSimulator() {
  const [activeModule, setActiveModule] = useState<'functions' | 'operating-range' | 'alarms' | 'abnormal' | 'documentation'>('functions')
  const [functionTests, setFunctionTests] = useState<Array<{ id: string; name: string; parameter: string; tested: boolean; result: 'pass' | 'fail' | 'pending' }>>([
    { id: 'airflow', name: 'Pretok zraka', parameter: '20 ACH', tested: false, result: 'pending' },
    { id: 'pressure', name: 'Tlačna razlika', parameter: '≥15 Pa', tested: false, result: 'pending' },
    { id: 'temperature', name: 'Temperatura', parameter: '20-24°C', tested: false, result: 'pending' },
    { id: 'humidity', name: 'Vlažnost', parameter: '45-55% RH', tested: false, result: 'pending' },
    { id: 'hepa', name: 'HEPA filtri', parameter: '≥99.995%', tested: false, result: 'pending' },
    { id: 'lighting', name: 'Osvetlitev', parameter: '≥600 lux', tested: false, result: 'pending' }
  ])

  const [operatingRangeData, setOperatingRangeData] = useState<Array<{ parameter: string; min: number; target: number; max: number; current: number }>>([
    { parameter: 'Temperatura (°C)', min: 20, target: 22, max: 24, current: 22 },
    { parameter: 'Vlažnost (% RH)', min: 45, target: 50, max: 55, current: 50 },
    { parameter: 'Tlak (Pa)', min: 15, target: 20, max: 30, current: 20 },
    { parameter: 'ACH', min: 20, target: 25, max: 30, current: 25 }
  ])

  const [alarmTests, setAlarmTests] = useState<Array<{ alarm: string; trigger: string; status: 'not-tested' | 'triggered' | 'verified' }>>([
    { alarm: '🌡️ High Temperature', trigger: '>24°C', status: 'not-tested' },
    { alarm: '🌡️ Low Temperature', trigger: '<20°C', status: 'not-tested' },
    { alarm: '💧 High Humidity', trigger: '>55% RH', status: 'not-tested' },
    { alarm: '📉 Pressure Loss', trigger: '<15 Pa', status: 'not-tested' },
    { alarm: '🔴 HEPA Failure', trigger: '<99.995%', status: 'not-tested' },
    { alarm: '⚡ Power Failure', trigger: 'Mains lost', status: 'not-tested' }
  ])

  const [abnormalConditions, setAbnormalConditions] = useState<Array<{ scenario: string; expected: string; tested: boolean; outcome: 'correct' | 'incorrect' | 'pending' }>>([
    { scenario: 'Odpiranje vrat med delovanjem', expected: 'Alarm + visual warning', tested: false, outcome: 'pending' },
    { scenario: 'Izpad električne energije', expected: 'UPS aktivacija + safe shutdown', tested: false, outcome: 'pending' },
    { scenario: 'Filter zamašitev (>250 Pa)', expected: 'Filter change alarm', tested: false, outcome: 'pending' },
    { scenario: 'Temperatura >26°C za >5 min', expected: 'Critical alarm + notification', tested: false, outcome: 'pending' },
    { scenario: 'Simultani alarmi (3+)', expected: 'Priority alarm hierarchy', tested: false, outcome: 'pending' }
  ])

  const [documentation, setDocumentation] = useState({
    protocol: false,
    datasheets: false,
    deviations: false,
    approval: false
  })

  const canvasRef = useRef<HTMLCanvasElement>(null)

  // 3D visualization of equipment operating
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let time = 0
    let particlePhase = 0

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      time += 0.02
      particlePhase += 0.05

      // Draw cleanroom chamber
      const chamberX = 150
      const chamberY = 110

      // Chamber walls (3D perspective)
      ctx.fillStyle = '#1e293b'
      ctx.fillRect(chamberX - 70, chamberY - 50, 140, 100)
      
      // Top face (isometric)
      ctx.fillStyle = '#334155'
      ctx.beginPath()
      ctx.moveTo(chamberX - 70, chamberY - 50)
      ctx.lineTo(chamberX, chamberY - 70)
      ctx.lineTo(chamberX + 70, chamberY - 50)
      ctx.lineTo(chamberX + 70, chamberY - 50)
      ctx.fill()

      // Right face
      ctx.fillStyle = '#0f172a'
      ctx.beginPath()
      ctx.moveTo(chamberX + 70, chamberY - 50)
      ctx.lineTo(chamberX + 90, chamberY - 35)
      ctx.lineTo(chamberX + 90, chamberY + 65)
      ctx.lineTo(chamberX + 70, chamberY + 50)
      ctx.fill()

      // HEPA filter (top)
      ctx.fillStyle = '#0ea5e9'
      ctx.fillRect(chamberX - 50, chamberY - 65, 100, 10)
      ctx.strokeStyle = '#67e8f9'
      ctx.lineWidth = 2
      ctx.strokeRect(chamberX - 50, chamberY - 65, 100, 10)

      // Airflow particles (animated)
      ctx.fillStyle = '#67e8f9'
      for (let i = 0; i < 20; i++) {
        const x = chamberX - 40 + (i % 10) * 9
        const y = chamberY - 55 + ((particlePhase + i * 0.3) % 2) * 50
        const size = 2 + Math.sin(particlePhase + i) * 1
        ctx.globalAlpha = 0.6 - (y - (chamberY - 55)) / 100
        ctx.beginPath()
        ctx.arc(x, y, size, 0, Math.PI * 2)
        ctx.fill()
      }
      ctx.globalAlpha = 1

      // Operating parameters display
      const testedCount = functionTests.filter(f => f.tested).length
      const passCount = functionTests.filter(f => f.result === 'pass').length
      
      // Status indicator
      const statusColor = passCount === functionTests.length ? '#22c55e' : testedCount > 0 ? '#fbbf24' : '#94a3b8'
      ctx.fillStyle = statusColor
      ctx.beginPath()
      ctx.arc(chamberX, chamberY, 15, 0, Math.PI * 2)
      ctx.fill()
      
      // Pulsing effect
      ctx.strokeStyle = statusColor
      ctx.lineWidth = 2
      ctx.globalAlpha = 0.5 + Math.sin(time * 3) * 0.3
      ctx.beginPath()
      ctx.arc(chamberX, chamberY, 20 + Math.sin(time * 3) * 5, 0, Math.PI * 2)
      ctx.stroke()
      ctx.globalAlpha = 1

      // Labels
      ctx.font = 'bold 12px Inter'
      ctx.fillStyle = '#cbd5e1'
      ctx.textAlign = 'center'
      ctx.fillText('OQ Testing', chamberX, chamberY + 75)
      ctx.font = '11px Inter'
      ctx.fillText(`${testedCount}/${functionTests.length} Functions`, chamberX, chamberY + 90)

      // Sensors around chamber
      const sensors = [
        { icon: '🌡️', pos: { x: chamberX - 90, y: chamberY - 20 }, label: 'T' },
        { icon: '💧', pos: { x: chamberX - 90, y: chamberY + 20 }, label: 'RH' },
        { icon: '📊', pos: { x: chamberX + 100, y: chamberY - 20 }, label: 'P' },
        { icon: '🌀', pos: { x: chamberX + 100, y: chamberY + 20 }, label: 'ACH' }
      ]

      ctx.font = '16px Arial'
      sensors.forEach((sensor, i) => {
        const pulse = Math.sin(time * 2 + i * Math.PI / 2) * 0.15 + 1
        ctx.save()
        ctx.translate(sensor.pos.x, sensor.pos.y)
        ctx.scale(pulse, pulse)
        ctx.fillText(sensor.icon, -8, 8)
        ctx.restore()
      })

      requestAnimationFrame(animate)
    }

    animate()
  }, [functionTests])

  const modules = {
    functions: { icon: '⚙️', title: 'Funkcijski testi', color: '#06b6d4' },
    'operating-range': { icon: '📈', title: 'Območje uporabe', color: '#0284c7' },
    alarms: { icon: '🔔', title: 'Alarmi', color: '#0369a1' },
    abnormal: { icon: '⚠️', title: 'Nenormalni pogoji', color: '#075985' },
    documentation: { icon: '📄', title: 'Dokumentacija', color: '#0c4a6e' }
  }

  const handleFunctionTest = (id: string) => {
    setFunctionTests(prev => prev.map(f => 
      f.id === id 
        ? { ...f, tested: true, result: Math.random() > 0.1 ? 'pass' : 'fail' }
        : f
    ))
  }

  const handleAlarmTest = (index: number) => {
    setAlarmTests(prev => prev.map((alarm, i) => 
      i === index 
        ? { ...alarm, status: alarm.status === 'not-tested' ? 'triggered' : alarm.status === 'triggered' ? 'verified' : 'not-tested' }
        : alarm
    ))
  }

  const handleAbnormalTest = (index: number) => {
    setAbnormalConditions(prev => prev.map((cond, i) => 
      i === index 
        ? { ...cond, tested: true, outcome: Math.random() > 0.15 ? 'correct' : 'incorrect' }
        : cond
    ))
  }

  const totalProgress = 
    (functionTests.filter(f => f.result === 'pass').length / functionTests.length) * 25 +
    (alarmTests.filter(a => a.status === 'verified').length / alarmTests.length) * 25 +
    (abnormalConditions.filter(c => c.outcome === 'correct').length / abnormalConditions.length) * 25 +
    (Object.values(documentation).filter(Boolean).length / Object.keys(documentation).length) * 25

  return (
    <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
      {/* Module navigation */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: 8, marginBottom: 20 }}>
        {Object.entries(modules).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActiveModule(key as any)}
            style={{
              padding: 10,
              background: activeModule === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeModule === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 8,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 20, marginBottom: 4 }}>{val.icon}</div>
            <div style={{ fontSize: 10, color: '#e6eef8', fontWeight: 600, lineHeight: 1.2 }}>{val.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '350px 1fr', gap: 16 }}>
        {/* Left: 3D Visualization + Progress */}
        <div>
          <div style={{ marginBottom: 12, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Operativno Testiranje</div>
          <canvas
            ref={canvasRef}
            width={320}
            height={200}
            style={{
              width: '100%',
              height: 'auto',
              background: 'rgba(0,0,0,0.3)',
              borderRadius: 12,
              border: '1px solid rgba(6, 182, 212, 0.3)'
            }}
          />

          {/* OQ Progress Dashboard */}
          <div style={{ marginTop: 16, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 13, color: '#67e8f9', fontWeight: 700, marginBottom: 12 }}>OQ Napredek</div>
            
            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 11, color: '#cbd5e1', marginBottom: 4 }}>⚙️ Funkcijski testi</div>
              <div style={{ display: 'flex', gap: 4 }}>
                {functionTests.map((f, i) => (
                  <div
                    key={i}
                    style={{
                      flex: 1,
                      height: 8,
                      borderRadius: 4,
                      background: f.result === 'pass' ? '#22c55e' : f.result === 'fail' ? '#ef4444' : 'rgba(255,255,255,0.1)'
                    }}
                  />
                ))}
              </div>
            </div>

            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 11, color: '#cbd5e1', marginBottom: 4 }}>🔔 Alarmi</div>
              <div style={{ display: 'flex', gap: 4 }}>
                {alarmTests.map((a, i) => (
                  <div
                    key={i}
                    style={{
                      flex: 1,
                      height: 8,
                      borderRadius: 4,
                      background: a.status === 'verified' ? '#22c55e' : a.status === 'triggered' ? '#f59e0b' : 'rgba(255,255,255,0.1)'
                    }}
                  />
                ))}
              </div>
            </div>

            <div style={{ marginBottom: 12 }}>
              <div style={{ fontSize: 11, color: '#cbd5e1', marginBottom: 4 }}>⚠️ Nenormalni pogoji</div>
              <div style={{ display: 'flex', gap: 4 }}>
                {abnormalConditions.map((c, i) => (
                  <div
                    key={i}
                    style={{
                      flex: 1,
                      height: 8,
                      borderRadius: 4,
                      background: c.outcome === 'correct' ? '#22c55e' : c.outcome === 'incorrect' ? '#ef4444' : 'rgba(255,255,255,0.1)'
                    }}
                  />
                ))}
              </div>
            </div>

            <div style={{ marginTop: 14, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, textAlign: 'center' }}>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Skupni OQ napredek</div>
              <div style={{ fontSize: 24, color: '#67e8f9', fontWeight: 700 }}>
                {Math.round(totalProgress)}%
              </div>
              <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 4 }}>
                {totalProgress === 100 ? '✅ OQ zaključen' : totalProgress > 75 ? '🔄 Skoraj končano' : '⚙️ V teku'}
              </div>
            </div>
          </div>
        </div>

        {/* Right: Active module content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div
              key={activeModule}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', minHeight: 450 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                  <div style={{ fontSize: 36 }}>{modules[activeModule].icon}</div>
                  <div>
                    <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>{modules[activeModule].title}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 2 }}>
                      {activeModule === 'functions' && 'Testiranje vseh funkcij opreme'}
                      {activeModule === 'operating-range' && 'Preverjanje delovanja v celotnem območju'}
                      {activeModule === 'alarms' && 'Testiranje alarmov in varnostnih sistemov'}
                      {activeModule === 'abnormal' && 'Preverjanje odzivov na nenormalne pogoje'}
                      {activeModule === 'documentation' && 'Dokumentiranje rezultatov preskusov'}
                    </div>
                  </div>
                </div>

                {activeModule === 'functions' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Funkcijski preskusi</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {functionTests.map((test, i) => (
                        <motion.div
                          key={test.id}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.05 }}
                          style={{
                            padding: 12,
                            background: test.result === 'pass' ? 'rgba(34,197,94,0.1)' : test.result === 'fail' ? 'rgba(239,68,68,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `1px solid ${test.result === 'pass' ? '#22c55e' : test.result === 'fail' ? '#ef4444' : 'rgba(255,255,255,0.08)'}`,
                            display: 'flex',
                            alignItems: 'center',
                            gap: 12
                          }}
                        >
                          <div style={{ flex: 1 }}>
                            <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{test.name}</div>
                            <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>
                              Target: <span style={{ color: '#67e8f9', fontWeight: 600 }}>{test.parameter}</span>
                            </div>
                          </div>
                          {!test.tested ? (
                            <button
                              onClick={() => handleFunctionTest(test.id)}
                              style={{
                                padding: '8px 16px',
                                background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                border: 'none',
                                borderRadius: 6,
                                color: '#e6eef8',
                                fontSize: 11,
                                fontWeight: 600,
                                cursor: 'pointer'
                              }}
                            >
                              🧪 Test
                            </button>
                          ) : (
                            <div style={{ 
                              padding: '8px 16px', 
                              background: test.result === 'pass' ? '#22c55e' : '#ef4444',
                              borderRadius: 6,
                              fontSize: 11,
                              fontWeight: 700,
                              color: '#fff'
                            }}>
                              {test.result === 'pass' ? '✅ PASS' : '❌ FAIL'}
                            </div>
                          )}
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>⚙️ OQ Funkcije:</strong> Vsaka funkcija mora biti testirana v nominalnih pogojih. Rezultati morajo biti znotraj specifikacij (±5% toleranca). Minimalno 3 meritve na funkcijo.
                    </div>
                  </div>
                )}

                {activeModule === 'operating-range' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Testiranje v celotnem območju uporabe</div>
                    {operatingRangeData.map((param, i) => (
                      <div key={i} style={{ marginBottom: 16, padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>{param.parameter}</div>
                        
                        <div style={{ position: 'relative', height: 40, background: 'rgba(0,0,0,0.2)', borderRadius: 8, overflow: 'hidden' }}>
                          {/* Operating range bar */}
                          <div style={{
                            position: 'absolute',
                            left: '0%',
                            width: '100%',
                            height: '100%',
                            background: 'linear-gradient(90deg, rgba(34,197,94,0.2) 0%, rgba(34,197,94,0.4) 50%, rgba(34,197,94,0.2) 100%)'
                          }} />
                          
                          {/* Min/Max markers */}
                          <div style={{ position: 'absolute', left: '0%', top: 0, bottom: 0, width: 2, background: '#94a3b8' }} />
                          <div style={{ position: 'absolute', right: '0%', top: 0, bottom: 0, width: 2, background: '#94a3b8' }} />
                          
                          {/* Target marker */}
                          <div style={{
                            position: 'absolute',
                            left: `${((param.target - param.min) / (param.max - param.min)) * 100}%`,
                            top: '50%',
                            transform: 'translate(-50%, -50%)',
                            width: 3,
                            height: '80%',
                            background: '#67e8f9'
                          }} />
                          
                          {/* Current value indicator */}
                          <motion.div
                            animate={{
                              left: `${((param.current - param.min) / (param.max - param.min)) * 100}%`
                            }}
                            style={{
                              position: 'absolute',
                              top: '50%',
                              transform: 'translate(-50%, -50%)',
                              width: 12,
                              height: 12,
                              borderRadius: '50%',
                              background: '#22c55e',
                              border: '2px solid #fff',
                              boxShadow: '0 0 10px rgba(34,197,94,0.5)'
                            }}
                          />
                        </div>

                        <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 6, fontSize: 10, color: '#94a3b8' }}>
                          <span>Min: {param.min}</span>
                          <span style={{ color: '#67e8f9', fontWeight: 600 }}>Target: {param.target}</span>
                          <span>Max: {param.max}</span>
                        </div>

                        <div style={{ marginTop: 8 }}>
                          <input
                            type="range"
                            min={param.min}
                            max={param.max}
                            step={0.1}
                            value={param.current}
                            onChange={(e) => {
                              const updated = [...operatingRangeData]
                              updated[i].current = parseFloat(e.target.value)
                              setOperatingRangeData(updated)
                            }}
                            style={{ width: '100%' }}
                          />
                          <div style={{ fontSize: 11, color: '#e6eef8', fontWeight: 600, textAlign: 'center', marginTop: 4 }}>
                            Current: {param.current.toFixed(1)}
                          </div>
                        </div>
                      </div>
                    ))}

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📈 Območje uporabe:</strong> Oprema mora delovati stabilno v celotnem definiranem območju. Test na min, target, in max vrednostih. Dokumentacija 3 meritev na točko.
                    </div>
                  </div>
                )}

                {activeModule === 'alarms' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Testiranje alarmov in varnostnih sistemov</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {alarmTests.map((alarm, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: i * 0.06 }}
                          style={{
                            padding: 12,
                            background: alarm.status === 'verified' ? 'rgba(34,197,94,0.1)' : alarm.status === 'triggered' ? 'rgba(245,158,11,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `1px solid ${alarm.status === 'verified' ? '#22c55e' : alarm.status === 'triggered' ? '#f59e0b' : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>
                            <div style={{ fontSize: 20 }}>{alarm.alarm.split(' ')[0]}</div>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{alarm.alarm}</div>
                              <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Trigger: {alarm.trigger}</div>
                            </div>
                            <button
                              onClick={() => handleAlarmTest(i)}
                              style={{
                                padding: '8px 16px',
                                background: alarm.status === 'verified' ? 'rgba(34,197,94,0.3)' : alarm.status === 'triggered' ? 'rgba(245,158,11,0.8)' : 'linear-gradient(135deg, #ef4444, #dc2626)',
                                border: 'none',
                                borderRadius: 6,
                                color: '#fff',
                                fontSize: 11,
                                fontWeight: 600,
                                cursor: 'pointer'
                              }}
                            >
                              {alarm.status === 'not-tested' ? '🔔 Trigger' : alarm.status === 'triggered' ? '✓ Verify' : '✅ Verified'}
                            </button>
                          </div>
                          {alarm.status === 'triggered' && (
                            <div style={{ fontSize: 11, color: '#fbbf24', fontWeight: 600, paddingLeft: 32 }}>
                              ⚠️ Alarm sprožen - preveri vizualno/zvočno signalizacijo
                            </div>
                          )}
                          {alarm.status === 'verified' && (
                            <div style={{ fontSize: 11, color: '#6ee7b7', fontWeight: 600, paddingLeft: 32 }}>
                              ✓ Alarm verificiran - delovanje pravilno
                            </div>
                          )}
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🔔 Alarmi:</strong> Vsak alarm mora biti sprožen in verificiran. Preveriti: zvočna signalizacija, vizualna indikacija, logiranje v sistem, odzivni čas (&lt;5 sec).
                    </div>
                  </div>
                )}

                {activeModule === 'abnormal' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Odziv na nenormalne pogoje</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {abnormalConditions.map((cond, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.07 }}
                          style={{
                            padding: 12,
                            background: cond.outcome === 'correct' ? 'rgba(34,197,94,0.1)' : cond.outcome === 'incorrect' ? 'rgba(239,68,68,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `1px solid ${cond.outcome === 'correct' ? '#22c55e' : cond.outcome === 'incorrect' ? '#ef4444' : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600, marginBottom: 6 }}>
                            <span style={{ color: '#fbbf24', marginRight: 6 }}>⚠️</span>
                            Scenarij: {cond.scenario}
                          </div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 8, paddingLeft: 24 }}>
                            Pričakovan odziv: <span style={{ color: '#67e8f9' }}>{cond.expected}</span>
                          </div>
                          {!cond.tested ? (
                            <button
                              onClick={() => handleAbnormalTest(i)}
                              style={{
                                padding: '8px 16px',
                                background: 'linear-gradient(135deg, #f59e0b, #d97706)',
                                border: 'none',
                                borderRadius: 6,
                                color: '#fff',
                                fontSize: 11,
                                fontWeight: 600,
                                cursor: 'pointer',
                                marginLeft: 24
                              }}
                            >
                              🧪 Simuliraj scenarij
                            </button>
                          ) : (
                            <div style={{ paddingLeft: 24, fontSize: 11, fontWeight: 600 }}>
                              {cond.outcome === 'correct' ? (
                                <span style={{ color: '#6ee7b7' }}>✅ Odziv pravilen - sistem deluje po pričakovanjih</span>
                              ) : (
                                <span style={{ color: '#fca5a5' }}>❌ Odziv nepravilen - potrebna korekcija</span>
                              )}
                            </div>
                          )}
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>⚠️ Nenormalni pogoji:</strong> Sistem mora pravilno reagirati na vse nenormalne pogoje. Dokumentirati: trigger event, response time, alarm activation, return to normal.
                    </div>
                  </div>
                )}

                {activeModule === 'documentation' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>OQ Dokumentacija</div>
                    
                    <div style={{ display: 'grid', gap: 12 }}>
                      <label style={{
                        padding: 14,
                        background: documentation.protocol ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.03)',
                        borderRadius: 8,
                        border: `2px solid ${documentation.protocol ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: 12
                      }}>
                        <input
                          type="checkbox"
                          checked={documentation.protocol}
                          onChange={() => setDocumentation(prev => ({ ...prev, protocol: !prev.protocol }))}
                          style={{ marginTop: 3, width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                            📋 OQ Protokol
                          </div>
                          <div style={{ fontSize: 11, color: '#94a3b8', lineHeight: 1.5 }}>
                            Dokument s testnimi procedurami, acceptance criteria, in podpisnimi listi. Vsebuje: Namen, obseg, odgovornosti, postopki, acceptance criteria.
                          </div>
                        </div>
                      </label>

                      <label style={{
                        padding: 14,
                        background: documentation.datasheets ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.03)',
                        borderRadius: 8,
                        border: `2px solid ${documentation.datasheets ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: 12
                      }}>
                        <input
                          type="checkbox"
                          checked={documentation.datasheets}
                          onChange={() => setDocumentation(prev => ({ ...prev, datasheets: !prev.datasheets }))}
                          style={{ marginTop: 3, width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                            📊 Test Data Sheets
                          </div>
                          <div style={{ fontSize: 11, color: '#94a3b8', lineHeight: 1.5 }}>
                            Raw data iz vseh testov: meritve, časi, rezultati, odstopanja. Vsak test mora imeti datum, izvajalca, in opombe.
                          </div>
                        </div>
                      </label>

                      <label style={{
                        padding: 14,
                        background: documentation.deviations ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.03)',
                        borderRadius: 8,
                        border: `2px solid ${documentation.deviations ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: 12
                      }}>
                        <input
                          type="checkbox"
                          checked={documentation.deviations}
                          onChange={() => setDocumentation(prev => ({ ...prev, deviations: !prev.deviations }))}
                          style={{ marginTop: 3, width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                            ⚠️ Deviation Reports
                          </div>
                          <div style={{ fontSize: 11, color: '#94a3b8', lineHeight: 1.5 }}>
                            Dokumentacija vseh odstopanj od protokola ali failed testov. Vsebuje: root cause analysis, corrective actions, retest results.
                          </div>
                        </div>
                      </label>

                      <label style={{
                        padding: 14,
                        background: documentation.approval ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.03)',
                        borderRadius: 8,
                        border: `2px solid ${documentation.approval ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'flex-start',
                        gap: 12
                      }}>
                        <input
                          type="checkbox"
                          checked={documentation.approval}
                          onChange={() => setDocumentation(prev => ({ ...prev, approval: !prev.approval }))}
                          style={{ marginTop: 3, width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                            ✍️ Approval Signatures
                          </div>
                          <div style={{ fontSize: 11, color: '#94a3b8', lineHeight: 1.5 }}>
                            Podpisi QA, Engineering, Production Manager, in Management. Vsak podpis mora imeti datum in razlog odobritve.
                          </div>
                        </div>
                      </label>
                    </div>

                    {Object.values(documentation).every(Boolean) && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        style={{
                          marginTop: 16,
                          padding: 16,
                          background: 'rgba(34,197,94,0.15)',
                          borderRadius: 12,
                          border: '2px solid #22c55e',
                          textAlign: 'center'
                        }}
                      >
                        <div style={{ fontSize: 48, marginBottom: 8 }}>✅</div>
                        <div style={{ fontSize: 14, color: '#6ee7b7', fontWeight: 700 }}>
                          OQ Dokumentacija Popolna
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 4 }}>
                          Vsi dokumenti pripravljeni za arhiviranje in PQ fazo
                        </div>
                      </motion.div>
                    )}

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📄 Dokumentacija:</strong> Vsi OQ dokumenti morajo biti v skladu z SOP-i. Hrambe: minimalno 10 let (EU GMP) ali lifetime of equipment + 1 year (FDA).
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Performance Qualification (PQ) Simulator (Lesson 109)
export function PerformanceQualificationSimulator() {
  const [activePhase, setActivePhase] = useState<'production-conditions' | 'real-materials' | 'extended-period' | 'consistency' | 'capability'>('production-conditions')
  const [productionBatches, setProductionBatches] = useState<Array<{ batch: string; temp: number; humidity: number; pressure: number; particles: number; status: 'pass' | 'fail' | 'pending' }>>([
    { batch: 'PQ-001', temp: 22.1, humidity: 49, pressure: 18, particles: 120, status: 'pending' },
    { batch: 'PQ-002', temp: 22.4, humidity: 51, pressure: 19, particles: 95, status: 'pending' },
    { batch: 'PQ-003', temp: 21.8, humidity: 48, pressure: 17, particles: 110, status: 'pending' }
  ])
  
  const [realMaterials, setRealMaterials] = useState<Array<{ material: string; specification: string; verified: boolean; batchNo: string }>>([
    { material: 'API (Active Ingredient)', specification: 'Ph. Eur. Grade', verified: false, batchNo: 'API-2025-001' },
    { material: 'Excipients', specification: 'GMP Certified', verified: false, batchNo: 'EXC-2025-042' },
    { material: 'Packaging Material', specification: 'FDA Approved', verified: false, batchNo: 'PKG-2025-089' },
    { material: 'Cleaning Agents', specification: 'Validated', verified: false, batchNo: 'CLN-2025-015' }
  ])

  const [timeline, setTimeline] = useState({
    startDate: new Date('2025-10-01'),
    currentDay: 1,
    totalDays: 30,
    isRunning: false
  })

  const [consistencyData, setConsistencyData] = useState<Array<{ day: number; yield: number; purity: number; contamination: number }>>([
    { day: 1, yield: 98.2, purity: 99.8, contamination: 5 },
    { day: 5, yield: 98.5, purity: 99.7, contamination: 8 },
    { day: 10, yield: 98.1, purity: 99.9, contamination: 3 },
    { day: 15, yield: 98.7, purity: 99.8, contamination: 6 },
    { day: 20, yield: 98.3, purity: 99.8, contamination: 4 },
    { day: 25, yield: 98.6, purity: 99.9, contamination: 7 },
    { day: 30, yield: 98.4, purity: 99.8, contamination: 5 }
  ])

  const [capabilityMetrics, setCapabilityMetrics] = useState({
    cpk: 1.67,
    cp: 1.85,
    sigma: 5.2,
    defectRate: 0.02,
    mtbf: 2400,
    availability: 98.5
  })

  const canvasRef = useRef<HTMLCanvasElement>(null)

  // 3D visualization of production line
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let time = 0
    let productionFlow = 0

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      time += 0.015
      productionFlow += 0.03

      // Production line conveyor (3D perspective)
      const conveyorY = 120
      
      // Conveyor belt
      ctx.fillStyle = '#334155'
      ctx.fillRect(20, conveyorY, 280, 40)
      
      // Belt lines (moving)
      ctx.strokeStyle = '#475569'
      ctx.lineWidth = 2
      for (let i = 0; i < 15; i++) {
        const x = 20 + ((i * 20 + productionFlow * 50) % 280)
        ctx.beginPath()
        ctx.moveTo(x, conveyorY + 10)
        ctx.lineTo(x, conveyorY + 30)
        ctx.stroke()
      }

      // Production units (moving boxes)
      for (let i = 0; i < 3; i++) {
        const boxX = 50 + ((i * 100 + productionFlow * 50) % 260)
        const boxY = conveyorY - 30
        
        // Box shadow
        ctx.fillStyle = 'rgba(0,0,0,0.3)'
        ctx.fillRect(boxX + 3, conveyorY + 3, 30, 30)
        
        // Box body
        ctx.fillStyle = '#0ea5e9'
        ctx.fillRect(boxX, boxY, 30, 30)
        
        // Box top (3D effect)
        ctx.fillStyle = '#38bdf8'
        ctx.beginPath()
        ctx.moveTo(boxX, boxY)
        ctx.lineTo(boxX + 15, boxY - 10)
        ctx.lineTo(boxX + 45, boxY - 10)
        ctx.lineTo(boxX + 30, boxY)
        ctx.fill()
        
        // Box side
        ctx.fillStyle = '#0284c7'
        ctx.beginPath()
        ctx.moveTo(boxX + 30, boxY)
        ctx.lineTo(boxX + 45, boxY - 10)
        ctx.lineTo(boxX + 45, boxY + 20)
        ctx.lineTo(boxX + 30, boxY + 30)
        ctx.fill()
      }

      // Monitoring station (left)
      ctx.fillStyle = '#1e293b'
      ctx.fillRect(20, 40, 60, 50)
      ctx.fillStyle = '#0ea5e9'
      ctx.fillRect(25, 45, 50, 35)
      
      // Screen display
      ctx.font = 'bold 9px monospace'
      ctx.fillStyle = '#67e8f9'
      ctx.fillText('MONITOR', 30, 57)
      ctx.fillText(`T: ${(22 + Math.sin(time * 2) * 0.3).toFixed(1)}°C`, 28, 70)
      ctx.fillText(`RH: ${(50 + Math.sin(time * 1.5) * 2).toFixed(0)}%`, 28, 78)

      // Quality control station (right)
      ctx.fillStyle = '#1e293b'
      ctx.fillRect(240, 40, 60, 50)
      ctx.fillStyle = '#22c55e'
      ctx.fillRect(245, 45, 50, 35)
      
      ctx.font = 'bold 9px monospace'
      ctx.fillStyle = '#6ee7b7'
      ctx.fillText('QC PASS', 250, 57)
      ctx.fillText(`Yield: 98.${Math.floor(Math.random() * 9)}%`, 248, 70)
      ctx.fillText(`Cpk: 1.67`, 255, 78)

      // Process indicators
      const indicators = [
        { x: 100, y: 30, label: '⚙️', active: Math.sin(time * 3) > 0 },
        { x: 160, y: 30, label: '🔬', active: Math.sin(time * 2.5) > 0 },
        { x: 220, y: 30, label: '✓', active: Math.sin(time * 2) > 0 }
      ]

      ctx.font = '20px Arial'
      indicators.forEach(ind => {
        ctx.globalAlpha = ind.active ? 1 : 0.3
        ctx.fillText(ind.label, ind.x - 10, ind.y + 10)
      })
      ctx.globalAlpha = 1

      // Status bar
      const passedBatches = productionBatches.filter(b => b.status === 'pass').length
      ctx.fillStyle = '#0f172a'
      ctx.fillRect(20, 170, 280, 15)
      ctx.fillStyle = '#22c55e'
      ctx.fillRect(20, 170, (passedBatches / productionBatches.length) * 280, 15)
      
      ctx.font = 'bold 10px Inter'
      ctx.fillStyle = '#e6eef8'
      ctx.textAlign = 'center'
      ctx.fillText(`PQ Progress: ${passedBatches}/${productionBatches.length} Batches`, 160, 181)
      ctx.textAlign = 'left'

      requestAnimationFrame(animate)
    }

    animate()
  }, [productionBatches])

  const phases = {
    'production-conditions': { icon: '🏭', title: 'Proizvodni pogoji', color: '#06b6d4' },
    'real-materials': { icon: '📦', title: 'Pravi materiali', color: '#0284c7' },
    'extended-period': { icon: '📅', title: 'Daljše obdobje', color: '#0369a1' },
    'consistency': { icon: '📊', title: 'Konsistentnost', color: '#075985' },
    'capability': { icon: '🎯', title: 'Zmogljivost', color: '#0c4a6e' }
  }

  const validateBatch = (index: number) => {
    setProductionBatches(prev => prev.map((batch, i) => {
      if (i === index) {
        const tempOk = batch.temp >= 20 && batch.temp <= 24
        const humidityOk = batch.humidity >= 45 && batch.humidity <= 55
        const pressureOk = batch.pressure >= 15
        const particlesOk = batch.particles <= 200
        return { ...batch, status: (tempOk && humidityOk && pressureOk && particlesOk) ? 'pass' : 'fail' }
      }
      return batch
    }))
  }

  const startTimeline = () => {
    if (timeline.isRunning) return
    setTimeline(prev => ({ ...prev, isRunning: true }))
    
    const interval = setInterval(() => {
      setTimeline(prev => {
        if (prev.currentDay >= prev.totalDays) {
          clearInterval(interval)
          return { ...prev, isRunning: false }
        }
        return { ...prev, currentDay: prev.currentDay + 1 }
      })
    }, 100)
  }

  const totalProgress = 
    (productionBatches.filter(b => b.status === 'pass').length / productionBatches.length) * 20 +
    (realMaterials.filter(m => m.verified).length / realMaterials.length) * 20 +
    (timeline.currentDay / timeline.totalDays) * 20 +
    (consistencyData.length > 0 ? 20 : 0) +
    (capabilityMetrics.cpk >= 1.33 ? 20 : 0)

  return (
    <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
      {/* Phase navigation */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: 8, marginBottom: 20 }}>
        {Object.entries(phases).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActivePhase(key as any)}
            style={{
              padding: 10,
              background: activePhase === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activePhase === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 8,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 20, marginBottom: 4 }}>{val.icon}</div>
            <div style={{ fontSize: 10, color: '#e6eef8', fontWeight: 600, lineHeight: 1.2 }}>{val.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '330px 1fr', gap: 16 }}>
        {/* Left: 3D Production Line + Progress */}
        <div>
          <div style={{ marginBottom: 12, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Proizvodna Linija</div>
          <canvas
            ref={canvasRef}
            width={320}
            height={200}
            style={{
              width: '100%',
              height: 'auto',
              background: 'rgba(0,0,0,0.3)',
              borderRadius: 12,
              border: '1px solid rgba(6, 182, 212, 0.3)'
            }}
          />

          {/* PQ Progress Dashboard */}
          <div style={{ marginTop: 16, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 13, color: '#67e8f9', fontWeight: 700, marginBottom: 12 }}>PQ Napredek</div>
            
            {[
              { label: '🏭 Proizvodni pogoji', value: productionBatches.filter(b => b.status === 'pass').length, total: productionBatches.length, color: '#06b6d4' },
              { label: '📦 Pravi materiali', value: realMaterials.filter(m => m.verified).length, total: realMaterials.length, color: '#0284c7' },
              { label: '📅 Časovno obdobje', value: timeline.currentDay, total: timeline.totalDays, color: '#0369a1' },
              { label: '📊 Konsistentnost', value: consistencyData.length, total: 7, color: '#075985' },
              { label: '🎯 Zmogljivost (Cpk)', value: capabilityMetrics.cpk >= 1.33 ? 1 : 0, total: 1, color: '#0c4a6e' }
            ].map((item, i) => (
              <div key={i} style={{ marginBottom: 10 }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>
                  <span style={{ fontSize: 11, color: '#cbd5e1' }}>{item.label}</span>
                  <span style={{ fontSize: 11, color: '#e6eef8', fontWeight: 600 }}>{item.value}/{item.total}</span>
                </div>
                <div style={{ height: 6, background: 'rgba(255,255,255,0.06)', borderRadius: 4, overflow: 'hidden' }}>
                  <motion.div
                    style={{ height: '100%', background: item.color, borderRadius: 4 }}
                    initial={{ width: 0 }}
                    animate={{ width: `${(item.value / item.total) * 100}%` }}
                    transition={{ duration: 0.5 }}
                  />
                </div>
              </div>
            ))}

            <div style={{ marginTop: 14, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, textAlign: 'center' }}>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Skupni PQ napredek</div>
              <div style={{ fontSize: 24, color: '#67e8f9', fontWeight: 700 }}>
                {Math.round(totalProgress)}%
              </div>
              <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 4 }}>
                {totalProgress === 100 ? '✅ PQ uspešen' : totalProgress > 80 ? '🔄 V finalizaciji' : '⚙️ V izvajanju'}
              </div>
            </div>
          </div>
        </div>

        {/* Right: Active phase content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div
              key={activePhase}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', minHeight: 450 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                  <div style={{ fontSize: 36 }}>{phases[activePhase].icon}</div>
                  <div>
                    <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>{phases[activePhase].title}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 2 }}>
                      {activePhase === 'production-conditions' && 'Testiranje pod realnimi proizvodnimi pogoji'}
                      {activePhase === 'real-materials' && 'Uporaba pravih materialov in procesov'}
                      {activePhase === 'extended-period' && 'Izvajanje skozi daljše časovno obdobje'}
                      {activePhase === 'consistency' && 'Potrditev konsistentnosti rezultatov'}
                      {activePhase === 'capability' && 'Dokaz zmogljivosti in sposobnosti sistema'}
                    </div>
                  </div>
                </div>

                {activePhase === 'production-conditions' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Proizvodne šarže pod realnimi pogoji</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {productionBatches.map((batch, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.08 }}
                          style={{
                            padding: 12,
                            background: batch.status === 'pass' ? 'rgba(34,197,94,0.1)' : batch.status === 'fail' ? 'rgba(239,68,68,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `1px solid ${batch.status === 'pass' ? '#22c55e' : batch.status === 'fail' ? '#ef4444' : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', marginBottom: 10 }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 700 }}>{batch.batch}</div>
                              <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 2 }}>Proizvodni batch v realnih pogojih</div>
                            </div>
                            {batch.status === 'pending' ? (
                              <button
                                onClick={() => validateBatch(i)}
                                style={{
                                  padding: '8px 16px',
                                  background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                  border: 'none',
                                  borderRadius: 6,
                                  color: '#fff',
                                  fontSize: 11,
                                  fontWeight: 600,
                                  cursor: 'pointer'
                                }}
                              >
                                ✓ Validiraj
                              </button>
                            ) : (
                              <div style={{
                                padding: '8px 16px',
                                background: batch.status === 'pass' ? '#22c55e' : '#ef4444',
                                borderRadius: 6,
                                fontSize: 11,
                                fontWeight: 700,
                                color: '#fff'
                              }}>
                                {batch.status === 'pass' ? '✅ PASS' : '❌ FAIL'}
                              </div>
                            )}
                          </div>
                          
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8 }}>
                            <div style={{ fontSize: 11, color: '#cbd5e1' }}>
                              🌡️ Temp: <span style={{ color: batch.temp >= 20 && batch.temp <= 24 ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>{batch.temp}°C</span>
                              <span style={{ color: '#64748b', fontSize: 10, marginLeft: 4 }}>(20-24°C)</span>
                            </div>
                            <div style={{ fontSize: 11, color: '#cbd5e1' }}>
                              💧 RH: <span style={{ color: batch.humidity >= 45 && batch.humidity <= 55 ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>{batch.humidity}%</span>
                              <span style={{ color: '#64748b', fontSize: 10, marginLeft: 4 }}>(45-55%)</span>
                            </div>
                            <div style={{ fontSize: 11, color: '#cbd5e1' }}>
                              📊 Tlak: <span style={{ color: batch.pressure >= 15 ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>{batch.pressure} Pa</span>
                              <span style={{ color: '#64748b', fontSize: 10, marginLeft: 4 }}>(≥15 Pa)</span>
                            </div>
                            <div style={{ fontSize: 11, color: '#cbd5e1' }}>
                              ✨ Delci: <span style={{ color: batch.particles <= 200 ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>{batch.particles}/m³</span>
                              <span style={{ color: '#64748b', fontSize: 10, marginLeft: 4 }}>(≤200)</span>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🏭 Proizvodni pogoji:</strong> PQ zahteva minimalno 3 zaporedne uspešne proizvodne šarže pod realnimi pogoji. Vsi parametri morajo biti znotraj specifikacij.
                    </div>
                  </div>
                )}

                {activePhase === 'real-materials' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Pravi materiali in procesi</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {realMaterials.map((material, i) => (
                        <label
                          key={i}
                          style={{
                            padding: 12,
                            background: material.verified ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `2px solid ${material.verified ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'flex-start',
                            gap: 12
                          }}
                        >
                          <input
                            type="checkbox"
                            checked={material.verified}
                            onChange={() => {
                              const updated = [...realMaterials]
                              updated[i].verified = !updated[i].verified
                              setRealMaterials(updated)
                            }}
                            style={{ marginTop: 3, width: 18, height: 18 }}
                          />
                          <div style={{ flex: 1 }}>
                            <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                              {material.material}
                            </div>
                            <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 6 }}>
                              Specifikacija: <span style={{ color: '#67e8f9' }}>{material.specification}</span>
                            </div>
                            <div style={{ fontSize: 10, color: '#64748b' }}>
                              Batch No: {material.batchNo}
                            </div>
                          </div>
                          {material.verified && <span style={{ fontSize: 20, color: '#06b6d4' }}>✓</span>}
                        </label>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>GMP zahteve za materiale:</div>
                      <div style={{ display: 'grid', gap: 6 }}>
                        {[
                          '✓ Vsi materiali morajo imeti CoA (Certificate of Analysis)',
                          '✓ Batch številke morajo biti dokumentirane',
                          '✓ Uporaba kvalificiranih dobaviteljev',
                          '✓ Skladnost z Ph. Eur., USP ali FDA standardi'
                        ].map((item, i) => (
                          <div key={i} style={{ fontSize: 11, color: '#cbd5e1', paddingLeft: 8 }}>
                            {item}
                          </div>
                        ))}
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📦 Pravi materiali:</strong> PQ mora uporabljati dejanske produkcijske materiale, ne placebo ali simulacij. Vsi materiali morajo biti GMP certificirani.
                    </div>
                  </div>
                )}

                {activePhase === 'extended-period' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>30-dnevno obdobje testiranja</div>
                    
                    <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', marginBottom: 12 }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
                        <div>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>Časovnica PQ testiranja</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>
                            Začetek: {timeline.startDate.toLocaleDateString('sl-SI')}
                          </div>
                        </div>
                        <button
                          onClick={startTimeline}
                          disabled={timeline.isRunning || timeline.currentDay >= timeline.totalDays}
                          style={{
                            padding: '10px 20px',
                            background: timeline.currentDay >= timeline.totalDays ? 'rgba(34,197,94,0.3)' : timeline.isRunning ? 'rgba(245,158,11,0.3)' : 'linear-gradient(135deg, #06b6d4, #0284c7)',
                            border: 'none',
                            borderRadius: 8,
                            color: '#fff',
                            fontSize: 12,
                            fontWeight: 600,
                            cursor: timeline.isRunning || timeline.currentDay >= timeline.totalDays ? 'not-allowed' : 'pointer'
                          }}
                        >
                          {timeline.currentDay >= timeline.totalDays ? '✅ Zaključeno' : timeline.isRunning ? '⏳ V teku...' : '▶ Začni testiranje'}
                        </button>
                      </div>

                      <div style={{ position: 'relative', height: 40, background: 'rgba(0,0,0,0.2)', borderRadius: 8, overflow: 'hidden', marginBottom: 8 }}>
                        <motion.div
                          style={{
                            height: '100%',
                            background: 'linear-gradient(90deg, #06b6d4, #0ea5e9)',
                            borderRadius: 8
                          }}
                          animate={{ width: `${(timeline.currentDay / timeline.totalDays) * 100}%` }}
                          transition={{ duration: 0.3 }}
                        />
                        <div style={{
                          position: 'absolute',
                          top: '50%',
                          left: '50%',
                          transform: 'translate(-50%, -50%)',
                          fontSize: 14,
                          color: '#fff',
                          fontWeight: 700,
                          textShadow: '0 0 4px rgba(0,0,0,0.5)'
                        }}>
                          Dan {timeline.currentDay} / {timeline.totalDays}
                        </div>
                      </div>

                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(30, 1fr)', gap: 2 }}>
                        {Array.from({ length: 30 }).map((_, i) => (
                          <div
                            key={i}
                            style={{
                              height: 8,
                              borderRadius: 2,
                              background: i < timeline.currentDay ? '#22c55e' : 'rgba(255,255,255,0.1)'
                            }}
                            title={`Dan ${i + 1}`}
                          />
                        ))}
                      </div>
                    </div>

                    <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Testne aktivnosti po tednih:</div>
                      <div style={{ display: 'grid', gap: 8 }}>
                        {[
                          { week: 'Teden 1-2', activities: 'Dnevne meritve parametrov, dokumentacija', status: timeline.currentDay >= 14 },
                          { week: 'Teden 3', activities: 'Microbiološko vzorčenje, environmental monitoring', status: timeline.currentDay >= 21 },
                          { week: 'Teden 4', activities: 'Finalna analiza, statistična obdelava, poročilo', status: timeline.currentDay >= 30 }
                        ].map((item, i) => (
                          <div
                            key={i}
                            style={{
                              padding: 10,
                              background: item.status ? 'rgba(34,197,94,0.1)' : 'rgba(255,255,255,0.02)',
                              borderRadius: 6,
                              border: `1px solid ${item.status ? '#22c55e' : 'rgba(255,255,255,0.08)'}`
                            }}
                          >
                            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                              {item.status ? '✅' : '○'} {item.week}
                            </div>
                            <div style={{ fontSize: 10, color: '#94a3b8' }}>{item.activities}</div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📅 Daljše obdobje:</strong> PQ zahteva kontinuirano testiranje skozi minimalno 30 dni (ali 3 šarže). Dokumentirati je potrebno vse odstopanja in spremembe.
                    </div>
                  </div>
                )}

                {activePhase === 'consistency' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Konsistentnost rezultatov</div>
                    
                    <div style={{ padding: 16, background: 'rgba(0,0,0,0.2)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', marginBottom: 12, height: 280 }}>
                      <svg width="100%" height="100%" viewBox="0 0 600 260" style={{ overflow: 'visible' }}>
                        {/* Grid lines */}
                        {[0, 25, 50, 75, 100].map(y => (
                          <line key={y} x1="50" y1={240 - y * 2} x2="580" y2={240 - y * 2} stroke="#334155" strokeWidth="1" />
                        ))}
                        
                        {/* Y-axis labels */}
                        {[0, 25, 50, 75, 100].map(y => (
                          <text key={y} x="35" y={244 - y * 2} fill="#94a3b8" fontSize="10" textAnchor="end">{y}%</text>
                        ))}
                        
                        {/* X-axis */}
                        <line x1="50" y1="240" x2="580" y2="240" stroke="#475569" strokeWidth="2" />
                        <line x1="50" y1="20" x2="50" y2="240" stroke="#475569" strokeWidth="2" />
                        
                        {/* Yield line (green) */}
                        <polyline
                          points={consistencyData.map((d, i) => `${50 + (i * 530 / 6)},${240 - (d.yield - 95) * 40}`).join(' ')}
                          fill="none"
                          stroke="#22c55e"
                          strokeWidth="3"
                        />
                        
                        {/* Purity line (cyan) */}
                        <polyline
                          points={consistencyData.map((d, i) => `${50 + (i * 530 / 6)},${240 - (d.purity - 95) * 40}`).join(' ')}
                          fill="none"
                          stroke="#06b6d4"
                          strokeWidth="3"
                        />
                        
                        {/* Data points */}
                        {consistencyData.map((d, i) => (
                          <g key={i}>
                            <circle cx={50 + (i * 530 / 6)} cy={240 - (d.yield - 95) * 40} r="5" fill="#22c55e" />
                            <circle cx={50 + (i * 530 / 6)} cy={240 - (d.purity - 95) * 40} r="5" fill="#06b6d4" />
                            <text x={50 + (i * 530 / 6)} y="255" fill="#94a3b8" fontSize="10" textAnchor="middle">D{d.day}</text>
                          </g>
                        ))}
                        
                        {/* Legend */}
                        <rect x="460" y="30" width="15" height="3" fill="#22c55e" />
                        <text x="480" y="35" fill="#cbd5e1" fontSize="11">Yield (%)</text>
                        
                        <rect x="460" y="45" width="15" height="3" fill="#06b6d4" />
                        <text x="480" y="50" fill="#cbd5e1" fontSize="11">Purity (%)</text>
                      </svg>
                    </div>

                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 10 }}>
                      <div style={{ padding: 12, background: 'rgba(34,197,94,0.1)', borderRadius: 8, border: '1px solid rgba(34,197,94,0.3)', textAlign: 'center' }}>
                        <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 4 }}>Povprečni Yield</div>
                        <div style={{ fontSize: 20, color: '#6ee7b7', fontWeight: 700 }}>
                          {(consistencyData.reduce((sum, d) => sum + d.yield, 0) / consistencyData.length).toFixed(1)}%
                        </div>
                        <div style={{ fontSize: 9, color: '#94a3b8', marginTop: 2 }}>Target: ≥98%</div>
                      </div>
                      
                      <div style={{ padding: 12, background: 'rgba(6,182,212,0.1)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.3)', textAlign: 'center' }}>
                        <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 4 }}>Povprečna Čistost</div>
                        <div style={{ fontSize: 20, color: '#67e8f9', fontWeight: 700 }}>
                          {(consistencyData.reduce((sum, d) => sum + d.purity, 0) / consistencyData.length).toFixed(1)}%
                        </div>
                        <div style={{ fontSize: 9, color: '#94a3b8', marginTop: 2 }}>Target: ≥99.5%</div>
                      </div>
                      
                      <div style={{ padding: 12, background: 'rgba(239,68,68,0.1)', borderRadius: 8, border: '1px solid rgba(239,68,68,0.3)', textAlign: 'center' }}>
                        <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 4 }}>Povp. Kontaminacija</div>
                        <div style={{ fontSize: 20, color: '#fca5a5', fontWeight: 700 }}>
                          {(consistencyData.reduce((sum, d) => sum + d.contamination, 0) / consistencyData.length).toFixed(1)} CFU
                        </div>
                        <div style={{ fontSize: 9, color: '#94a3b8', marginTop: 2 }}>Target: &lt;10 CFU</div>
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📊 Konsistentnost:</strong> Rezultati morajo pokazati konsistentnost (&lt;5% variacija) skozi celotno PQ obdobje. Statistična analiza (RSD, trend analysis) je obvezna.
                    </div>
                  </div>
                )}

                {activePhase === 'capability' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Procesna zmogljivost (Process Capability)</div>
                    
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginBottom: 12 }}>
                      <div style={{ padding: 16, background: 'rgba(6,182,212,0.1)', borderRadius: 12, border: '2px solid rgba(6,182,212,0.3)' }}>
                        <div style={{ fontSize: 48, textAlign: 'center', marginBottom: 8 }}>🎯</div>
                        <div style={{ textAlign: 'center' }}>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Process Capability Index</div>
                          <div style={{ fontSize: 32, color: '#67e8f9', fontWeight: 700 }}>{capabilityMetrics.cpk}</div>
                          <div style={{ fontSize: 10, color: capabilityMetrics.cpk >= 1.67 ? '#6ee7b7' : capabilityMetrics.cpk >= 1.33 ? '#fbbf24' : '#fca5a5', fontWeight: 600, marginTop: 4 }}>
                            {capabilityMetrics.cpk >= 1.67 ? '✅ Odličen (6σ)' : capabilityMetrics.cpk >= 1.33 ? '✓ Sprejemljiv (4σ)' : '⚠️ Nezadosten'}
                          </div>
                        </div>
                      </div>

                      <div style={{ padding: 16, background: 'rgba(6,182,212,0.1)', borderRadius: 12, border: '2px solid rgba(6,182,212,0.3)' }}>
                        <div style={{ fontSize: 48, textAlign: 'center', marginBottom: 8 }}>📐</div>
                        <div style={{ textAlign: 'center' }}>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Process Performance</div>
                          <div style={{ fontSize: 32, color: '#67e8f9', fontWeight: 700 }}>{capabilityMetrics.cp}</div>
                          <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 4 }}>
                            Cp (brez centriranja)
                          </div>
                        </div>
                      </div>
                    </div>

                    <div style={{ display: 'grid', gap: 10 }}>
                      <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <div>
                            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600 }}>Sigma nivo (σ)</div>
                            <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 2 }}>Statistična mera kvalitete</div>
                          </div>
                          <div style={{ fontSize: 24, color: '#67e8f9', fontWeight: 700 }}>{capabilityMetrics.sigma}σ</div>
                        </div>
                      </div>

                      <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <div>
                            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600 }}>Defect Rate (PPM)</div>
                            <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 2 }}>Delež izven specifikacij</div>
                          </div>
                          <div style={{ fontSize: 24, color: capabilityMetrics.defectRate < 0.1 ? '#6ee7b7' : '#fbbf24', fontWeight: 700 }}>
                            {capabilityMetrics.defectRate}%
                          </div>
                        </div>
                      </div>

                      <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <div>
                            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600 }}>MTBF (Mean Time Between Failures)</div>
                            <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 2 }}>Zanesljivost sistema</div>
                          </div>
                          <div style={{ fontSize: 24, color: '#67e8f9', fontWeight: 700 }}>{capabilityMetrics.mtbf}h</div>
                        </div>
                      </div>

                      <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <div>
                            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600 }}>System Availability (%)</div>
                            <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 2 }}>Čas razpoložljivosti sistema</div>
                          </div>
                          <div style={{ fontSize: 24, color: '#6ee7b7', fontWeight: 700 }}>{capabilityMetrics.availability}%</div>
                        </div>
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(34,197,94,0.1)', borderRadius: 8, border: '1px solid rgba(34,197,94,0.3)' }}>
                      <div style={{ fontSize: 12, color: '#6ee7b7', fontWeight: 600, marginBottom: 6 }}>✅ Interpretacija Cpk vrednosti:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                        • <strong>Cpk ≥ 1.67 (6σ)</strong>: Proces je izjemno zmogljiv - World Class<br />
                        • <strong>Cpk = 1.33-1.67 (4-5σ)</strong>: Proces je zmogljiv - Sprejet za GMP<br />
                        • <strong>Cpk &lt; 1.33</strong>: Proces potrebuje izboljšave
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🎯 Zmogljivost:</strong> PQ mora dokazati Cpk ≥ 1.33 (minimalna GMP zahteva). Priporočljivo Cpk ≥ 1.67 za kritične procese. Statistična analiza mora biti del PQ poročila.
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Media Fill Validation Simulator (Lesson 109)
export function MediaFillValidationSimulator() {
  const [activeSection, setActiveSection] = useState<'process-sim' | 'sequential-tests' | 'contamination' | 'worst-case' | 'critical-steps'>('process-sim')
  const [mediaFillRuns, setMediaFillRuns] = useState<Array<{ 
    run: string; 
    units: number; 
    contaminated: number; 
    contaminationRate: number; 
    status: 'pass' | 'fail' | 'testing' | 'pending';
    duration: number;
    operator: string;
  }>>([
    { run: 'MF-001', units: 5000, contaminated: 0, contaminationRate: 0, status: 'pending', duration: 0, operator: 'Operator A' },
    { run: 'MF-002', units: 5000, contaminated: 0, contaminationRate: 0, status: 'pending', duration: 0, operator: 'Operator B' },
    { run: 'MF-003', units: 5000, contaminated: 0, contaminationRate: 0, status: 'pending', duration: 0, operator: 'Operator C' }
  ])

  const [processSteps, setProcessSteps] = useState<Array<{ step: string; icon: string; completed: boolean; risk: 'low' | 'medium' | 'high' }>>([
    { step: 'Gowning procedure', icon: '👔', completed: false, risk: 'high' },
    { step: 'Environmental monitoring', icon: '🌡️', completed: false, risk: 'medium' },
    { step: 'Equipment setup', icon: '⚙️', completed: false, risk: 'medium' },
    { step: 'Media preparation', icon: '🧪', completed: false, risk: 'high' },
    { step: 'Filling process', icon: '💉', completed: false, risk: 'high' },
    { step: 'Stoppages & interventions', icon: '⏸️', completed: false, risk: 'high' },
    { step: 'Line clearance', icon: '🧹', completed: false, risk: 'medium' },
    { step: 'Incubation (14 days)', icon: '🔬', completed: false, risk: 'low' },
    { step: 'Visual inspection', icon: '👁️', completed: false, risk: 'low' }
  ])

  const [worstCaseConditions, setWorstCaseConditions] = useState<Array<{ condition: string; implemented: boolean; impact: string }>>([
    { condition: 'Maximum line speed', implemented: false, impact: 'Increased aerosol generation' },
    { condition: 'Maximum filling volume', implemented: false, impact: 'Longer exposure time' },
    { condition: 'Maximum batch size', implemented: false, impact: 'Extended process duration' },
    { condition: 'Maximum interventions', implemented: false, impact: 'Increased contamination risk' },
    { condition: 'End of shift operations', implemented: false, impact: 'Operator fatigue' },
    { condition: 'Line stoppages/restarts', implemented: false, impact: 'Process disruption' }
  ])

  const [criticalSteps, setCriticalSteps] = useState<Array<{ step: string; validated: boolean; personnel: number; cfu: number }>>([
    { step: 'Aseptic connection', validated: false, personnel: 2, cfu: 0 },
    { step: 'Filter integrity test', validated: false, personnel: 1, cfu: 0 },
    { step: 'Component addition', validated: false, personnel: 2, cfu: 0 },
    { step: 'Equipment assembly', validated: false, personnel: 3, cfu: 0 },
    { step: 'Manual intervention', validated: false, personnel: 2, cfu: 0 }
  ])

  const [incubationProgress, setIncubationProgress] = useState(0)

  const canvasRef = useRef<HTMLCanvasElement>(null)

  // 3D visualization of aseptic filling process
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let time = 0
    let fillProgress = 0

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      time += 0.02
      fillProgress += 0.01
      if (fillProgress > 10) fillProgress = 0

      // Isolator/RABS chamber (3D)
      const chamberX = 160
      const chamberY = 100

      // Chamber walls
      ctx.strokeStyle = '#0ea5e9'
      ctx.lineWidth = 3
      ctx.strokeRect(40, 40, 240, 120)
      
      // Glass effect
      ctx.fillStyle = 'rgba(6, 182, 212, 0.05)'
      ctx.fillRect(40, 40, 240, 120)

      // HEPA filter on top
      ctx.fillStyle = '#0284c7'
      ctx.fillRect(60, 30, 200, 12)
      ctx.font = 'bold 9px Inter'
      ctx.fillStyle = '#67e8f9'
      ctx.textAlign = 'center'
      ctx.fillText('HEPA H14 99.995%', 160, 38)

      // Filling needle (moving up/down)
      const needleY = 60 + Math.sin(fillProgress) * 10
      ctx.strokeStyle = '#94a3b8'
      ctx.lineWidth = 2
      ctx.beginPath()
      ctx.moveTo(chamberX, 50)
      ctx.lineTo(chamberX, needleY)
      ctx.stroke()
      
      // Needle tip
      ctx.fillStyle = '#cbd5e1'
      ctx.beginPath()
      ctx.moveTo(chamberX - 3, needleY)
      ctx.lineTo(chamberX + 3, needleY)
      ctx.lineTo(chamberX, needleY + 8)
      ctx.fill()

      // Media flow (animated droplets)
      if (Math.sin(fillProgress * 3) > 0) {
        for (let i = 0; i < 3; i++) {
          const dropY = needleY + 8 + (fillProgress * 10 + i * 8) % 30
          ctx.fillStyle = '#fbbf24'
          ctx.globalAlpha = 0.7
          ctx.beginPath()
          ctx.arc(chamberX, dropY, 2, 0, Math.PI * 2)
          ctx.fill()
          ctx.globalAlpha = 1
        }
      }

      // Vials on conveyor (3D perspective)
      for (let i = 0; i < 5; i++) {
        const vialX = 60 + i * 50
        const vialY = 120
        
        // Vial body
        ctx.fillStyle = '#1e293b'
        ctx.fillRect(vialX - 8, vialY - 25, 16, 30)
        
        // Vial top (3D cap)
        ctx.fillStyle = '#475569'
        ctx.beginPath()
        ctx.moveTo(vialX - 8, vialY - 25)
        ctx.lineTo(vialX, vialY - 32)
        ctx.lineTo(vialX + 8, vialY - 25)
        ctx.fill()
        
        // Media inside vial (yellow)
        const fillLevel = Math.min(fillProgress + i * 2, 10)
        if (fillLevel > 0) {
          ctx.fillStyle = '#fbbf24'
          ctx.fillRect(vialX - 6, vialY - 5 - fillLevel * 1.5, 12, fillLevel * 1.5)
        }
        
        // Contamination indicator (rare)
        if (Math.random() < 0.002) {
          ctx.fillStyle = '#ef4444'
          ctx.beginPath()
          ctx.arc(vialX, vialY - 15, 3, 0, Math.PI * 2)
          ctx.fill()
        }
      }

      // Operator (gloved hand)
      const handX = 80 + Math.sin(time * 0.5) * 20
      const handY = 70
      ctx.fillStyle = '#0ea5e9'
      ctx.fillRect(handX - 5, handY, 10, 15)
      ctx.beginPath()
      ctx.arc(handX, handY, 8, 0, Math.PI * 2)
      ctx.fill()

      // Environmental particles (very few)
      ctx.fillStyle = '#67e8f9'
      for (let i = 0; i < 5; i++) {
        const px = 50 + (time * 10 + i * 60) % 230
        const py = 50 + Math.sin(time + i) * 30
        ctx.globalAlpha = 0.3
        ctx.beginPath()
        ctx.arc(px, py, 1, 0, Math.PI * 2)
        ctx.fill()
      }
      ctx.globalAlpha = 1

      // Status display
      const completedSteps = processSteps.filter(s => s.completed).length
      ctx.font = 'bold 11px Inter'
      ctx.fillStyle = '#cbd5e1'
      ctx.textAlign = 'left'
      ctx.fillText(`Steps: ${completedSteps}/${processSteps.length}`, 45, 175)
      
      const successfulRuns = mediaFillRuns.filter(r => r.status === 'pass').length
      ctx.fillText(`Runs: ${successfulRuns}/3 Passed`, 180, 175)

      requestAnimationFrame(animate)
    }

    animate()
  }, [processSteps, mediaFillRuns])

  const sections = {
    'process-sim': { icon: '🧪', title: 'Simulacija procesa', color: '#06b6d4' },
    'sequential-tests': { icon: '📋', title: 'Zaporedni testi', color: '#0284c7' },
    'contamination': { icon: '🦠', title: 'Stopnja kontaminacije', color: '#0369a1' },
    'worst-case': { icon: '⚠️', title: 'Najslabši pogoji', color: '#075985' },
    'critical-steps': { icon: '🎯', title: 'Kritični koraki', color: '#0c4a6e' }
  }

  const startMediaFillRun = (index: number) => {
    setMediaFillRuns(prev => prev.map((run, i) => {
      if (i === index) {
        return { ...run, status: 'testing' as const, duration: 0 }
      }
      return run
    }))

    // Simulate media fill run
    const interval = setInterval(() => {
      setMediaFillRuns(prev => prev.map((run, i) => {
        if (i === index && run.status === 'testing') {
          const newDuration = run.duration + 1
          if (newDuration >= 10) {
            clearInterval(interval)
            // Simulate contamination (very low probability)
            const contaminated = Math.floor(Math.random() * (Math.random() < 0.95 ? 1 : 5))
            const contaminationRate = (contaminated / run.units) * 100
            const status: 'pass' | 'fail' = contaminationRate < 0.1 ? 'pass' : 'fail'
            return { ...run, contaminated, contaminationRate, status, duration: newDuration }
          }
          return { ...run, duration: newDuration }
        }
        return run
      }))
    }, 200)
  }

  const validateCriticalStep = (index: number) => {
    setCriticalSteps(prev => prev.map((step, i) => {
      if (i === index) {
        const cfu = Math.floor(Math.random() * (Math.random() < 0.9 ? 3 : 8))
        return { ...step, validated: true, cfu }
      }
      return step
    }))
  }

  const successfulRuns = mediaFillRuns.filter(r => r.status === 'pass').length
  const avgContamination = mediaFillRuns.filter(r => r.status !== 'pending').length > 0
    ? mediaFillRuns.filter(r => r.status !== 'pending').reduce((sum, r) => sum + r.contaminationRate, 0) / mediaFillRuns.filter(r => r.status !== 'pending').length
    : 0

  const totalProgress = 
    (processSteps.filter(s => s.completed).length / processSteps.length) * 20 +
    (successfulRuns / 3) * 30 +
    (avgContamination < 0.1 && successfulRuns > 0 ? 20 : 0) +
    (worstCaseConditions.filter(w => w.implemented).length / worstCaseConditions.length) * 15 +
    (criticalSteps.filter(c => c.validated).length / criticalSteps.length) * 15

  return (
    <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
      {/* Section navigation */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))', gap: 8, marginBottom: 20 }}>
        {Object.entries(sections).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActiveSection(key as any)}
            style={{
              padding: 10,
              background: activeSection === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeSection === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 8,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 20, marginBottom: 4 }}>{val.icon}</div>
            <div style={{ fontSize: 10, color: '#e6eef8', fontWeight: 600, lineHeight: 1.2 }}>{val.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '340px 1fr', gap: 16 }}>
        {/* Left: 3D Aseptic Process + Progress */}
        <div>
          <div style={{ marginBottom: 12, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Aseptični Proces</div>
          <canvas
            ref={canvasRef}
            width={320}
            height={190}
            style={{
              width: '100%',
              height: 'auto',
              background: 'rgba(0,0,0,0.3)',
              borderRadius: 12,
              border: '1px solid rgba(6, 182, 212, 0.3)'
            }}
          />

          {/* Media Fill Progress Dashboard */}
          <div style={{ marginTop: 16, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 13, color: '#67e8f9', fontWeight: 700, marginBottom: 12 }}>Media Fill Progress</div>
            
            {[
              { label: '🧪 Procesni koraki', value: processSteps.filter(s => s.completed).length, total: processSteps.length, color: '#06b6d4' },
              { label: '📋 Uspešni testi', value: successfulRuns, total: 3, color: '#0284c7' },
              { label: '🦠 Kontaminacija', value: avgContamination < 0.1 ? 1 : 0, total: 1, color: '#0369a1' },
              { label: '⚠️ Worst-case pogoji', value: worstCaseConditions.filter(w => w.implemented).length, total: worstCaseConditions.length, color: '#075985' },
              { label: '🎯 Kritični koraki', value: criticalSteps.filter(c => c.validated).length, total: criticalSteps.length, color: '#0c4a6e' }
            ].map((item, i) => (
              <div key={i} style={{ marginBottom: 10 }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>
                  <span style={{ fontSize: 11, color: '#cbd5e1' }}>{item.label}</span>
                  <span style={{ fontSize: 11, color: '#e6eef8', fontWeight: 600 }}>{item.value}/{item.total}</span>
                </div>
                <div style={{ height: 6, background: 'rgba(255,255,255,0.06)', borderRadius: 4, overflow: 'hidden' }}>
                  <motion.div
                    style={{ height: '100%', background: item.color, borderRadius: 4 }}
                    initial={{ width: 0 }}
                    animate={{ width: `${(item.value / item.total) * 100}%` }}
                    transition={{ duration: 0.5 }}
                  />
                </div>
              </div>
            ))}

            <div style={{ marginTop: 14, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, textAlign: 'center' }}>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Skupni Media Fill napredek</div>
              <div style={{ fontSize: 24, color: '#67e8f9', fontWeight: 700 }}>
                {Math.round(totalProgress)}%
              </div>
              <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 4 }}>
                {successfulRuns >= 3 && avgContamination < 0.1 ? '✅ Validacija uspešna' : successfulRuns > 0 ? '🔄 V teku' : '⏳ Priprava'}
              </div>
            </div>
          </div>
        </div>

        {/* Right: Active section content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div
              key={activeSection}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', minHeight: 450 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                  <div style={{ fontSize: 36 }}>{sections[activeSection].icon}</div>
                  <div>
                    <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>{sections[activeSection].title}</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginTop: 2 }}>
                      {activeSection === 'process-sim' && 'Simulacija z mikrobiološkim gojiščem (TSB)'}
                      {activeSection === 'sequential-tests' && 'Tri zaporedni uspešni Media Fill testi'}
                      {activeSection === 'contamination' && 'Cilj: <0.1% kontaminacija'}
                      {activeSection === 'worst-case' && 'Testiranje v najslabših predvidenih pogojih'}
                      {activeSection === 'critical-steps' && 'Validacija vseh kritičnih aseptičnih korakov'}
                    </div>
                  </div>
                </div>

                {activeSection === 'process-sim' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>9 procesnih korakov validacije</div>
                    <div style={{ display: 'grid', gap: 8 }}>
                      {processSteps.map((step, i) => (
                        <label
                          key={i}
                          style={{
                            padding: 12,
                            background: step.completed ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `2px solid ${step.completed ? '#06b6d4' : step.risk === 'high' ? 'rgba(239,68,68,0.3)' : step.risk === 'medium' ? 'rgba(245,158,11,0.3)' : 'rgba(255,255,255,0.08)'}`,
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            gap: 12
                          }}
                        >
                          <input
                            type="checkbox"
                            checked={step.completed}
                            onChange={() => {
                              const updated = [...processSteps]
                              updated[i].completed = !updated[i].completed
                              setProcessSteps(updated)
                            }}
                            style={{ width: 18, height: 18 }}
                          />
                          <div style={{ fontSize: 24 }}>{step.icon}</div>
                          <div style={{ flex: 1 }}>
                            <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{step.step}</div>
                            <div style={{ fontSize: 10, color: step.risk === 'high' ? '#fca5a5' : step.risk === 'medium' ? '#fbbf24' : '#94a3b8', marginTop: 2, fontWeight: 600 }}>
                              Risk: {step.risk.toUpperCase()}
                            </div>
                          </div>
                          {step.completed && <span style={{ fontSize: 20, color: '#06b6d4' }}>✓</span>}
                        </label>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(245,158,11,0.1)', borderRadius: 8, border: '1px solid rgba(245,158,11,0.3)' }}>
                      <div style={{ fontSize: 12, color: '#fbbf24', fontWeight: 600, marginBottom: 6 }}>💡 Media Fill protokol:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                        • Gojišče: TSB (Tryptic Soy Broth) ali drugo primerno<br />
                        • Temperatura inkubacije: 20-25°C (7 dni) + 30-35°C (7 dni)<br />
                        • Minimalno število enot: 5.000 (ali 1 šarža)<br />
                        • Vizualna kontrola: 100% enot po inkubaciji
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🧪 Media Fill:</strong> Simulacija aseptičnega procesa z uporabo mikrobiološkega gojišča namesto produkta. Gojišče omogoča rast mikroorganizmov, kar omogoča detekcijo kontaminacije.
                    </div>
                  </div>
                )}

                {activeSection === 'sequential-tests' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>3 zaporedni Media Fill testi</div>
                    <div style={{ display: 'grid', gap: 12 }}>
                      {mediaFillRuns.map((run, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.08 }}
                          style={{
                            padding: 14,
                            background: run.status === 'pass' ? 'rgba(34,197,94,0.1)' : run.status === 'fail' ? 'rgba(239,68,68,0.1)' : run.status === 'testing' ? 'rgba(245,158,11,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 10,
                            border: `2px solid ${run.status === 'pass' ? '#22c55e' : run.status === 'fail' ? '#ef4444' : run.status === 'testing' ? '#f59e0b' : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', marginBottom: 12 }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 15, color: '#e6eef8', fontWeight: 700 }}>{run.run}</div>
                              <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Operator: {run.operator}</div>
                            </div>
                            {run.status === 'pending' && (
                              <button
                                onClick={() => startMediaFillRun(i)}
                                style={{
                                  padding: '10px 18px',
                                  background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                  border: 'none',
                                  borderRadius: 8,
                                  color: '#fff',
                                  fontSize: 12,
                                  fontWeight: 600,
                                  cursor: 'pointer'
                                }}
                              >
                                ▶ Start Test
                              </button>
                            )}
                            {run.status === 'testing' && (
                              <div style={{ padding: '10px 18px', background: 'rgba(245,158,11,0.3)', borderRadius: 8, fontSize: 12, fontWeight: 700, color: '#fbbf24' }}>
                                ⏳ Testing... {run.duration * 10}%
                              </div>
                            )}
                            {(run.status === 'pass' || run.status === 'fail') && (
                              <div style={{
                                padding: '10px 18px',
                                background: run.status === 'pass' ? '#22c55e' : '#ef4444',
                                borderRadius: 8,
                                fontSize: 12,
                                fontWeight: 700,
                                color: '#fff'
                              }}>
                                {run.status === 'pass' ? '✅ PASS' : '❌ FAIL'}
                              </div>
                            )}
                          </div>

                          {run.status !== 'pending' && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 10, paddingTop: 10, borderTop: '1px solid rgba(255,255,255,0.1)' }}>
                              <div>
                                <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 2 }}>Filled units</div>
                                <div style={{ fontSize: 16, color: '#67e8f9', fontWeight: 700 }}>{run.units.toLocaleString()}</div>
                              </div>
                              <div>
                                <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 2 }}>Contaminated</div>
                                <div style={{ fontSize: 16, color: run.contaminated === 0 ? '#6ee7b7' : '#fca5a5', fontWeight: 700 }}>{run.contaminated}</div>
                              </div>
                              <div>
                                <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 2 }}>Rate</div>
                                <div style={{ fontSize: 16, color: run.contaminationRate < 0.1 ? '#6ee7b7' : '#fca5a5', fontWeight: 700 }}>
                                  {run.contaminationRate.toFixed(3)}%
                                </div>
                              </div>
                            </div>
                          )}

                          {run.status === 'testing' && (
                            <div style={{ marginTop: 10 }}>
                              <div style={{ height: 8, background: 'rgba(0,0,0,0.2)', borderRadius: 4, overflow: 'hidden' }}>
                                <motion.div
                                  style={{ height: '100%', background: 'linear-gradient(90deg, #f59e0b, #fbbf24)', borderRadius: 4 }}
                                  animate={{ width: `${run.duration * 10}%` }}
                                  transition={{ duration: 0.2 }}
                                />
                              </div>
                            </div>
                          )}
                        </motion.div>
                      ))}
                    </div>

                    {successfulRuns >= 3 && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        style={{
                          marginTop: 16,
                          padding: 16,
                          background: 'rgba(34,197,94,0.15)',
                          borderRadius: 12,
                          border: '2px solid #22c55e',
                          textAlign: 'center'
                        }}
                      >
                        <div style={{ fontSize: 48, marginBottom: 8 }}>🎉</div>
                        <div style={{ fontSize: 15, color: '#6ee7b7', fontWeight: 700 }}>
                          3 zaporedni uspešni testi doseženi!
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 6 }}>
                          Povprečna kontaminacija: {avgContamination.toFixed(4)}% (&lt;0.1% = uspeh)
                        </div>
                      </motion.div>
                    )}

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📋 Zaporedni testi:</strong> Potrebni so najmanj trije (3) zaporedni uspešni Media Fill testi za validacijo aseptičnega procesa. Vsi testi morajo izpolniti kriterij &lt;0.1% kontaminacije.
                    </div>
                  </div>
                )}

                {activeSection === 'contamination' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Analiza stopnje kontaminacije</div>
                    
                    <div style={{ padding: 20, background: 'rgba(0,0,0,0.2)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', marginBottom: 16, textAlign: 'center' }}>
                      <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 12 }}>Povprečna stopnja kontaminacije</div>
                      <div style={{ fontSize: 64, color: avgContamination < 0.1 ? '#22c55e' : '#ef4444', fontWeight: 700, marginBottom: 8 }}>
                        {avgContamination.toFixed(4)}%
                      </div>
                      <div style={{ fontSize: 12, color: avgContamination < 0.1 ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>
                        {avgContamination < 0.1 ? '✅ V mejah specifikacije' : '⚠️ Nad mejo - potreben retest'}
                      </div>
                    </div>

                    <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)', marginBottom: 12 }}>
                      <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 10 }}>Rezultati po testih:</div>
                      <div style={{ display: 'grid', gap: 8 }}>
                        {mediaFillRuns.filter(r => r.status !== 'pending').map((run, i) => (
                          <div key={i} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: 8, background: 'rgba(0,0,0,0.2)', borderRadius: 6 }}>
                            <span style={{ fontSize: 12, color: '#cbd5e1' }}>{run.run}</span>
                            <span style={{ fontSize: 12, color: '#94a3b8' }}>{run.contaminated}/{run.units}</span>
                            <span style={{ fontSize: 13, color: run.contaminationRate < 0.1 ? '#6ee7b7' : '#fca5a5', fontWeight: 700 }}>
                              {run.contaminationRate.toFixed(4)}%
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div style={{ padding: 14, background: 'rgba(6,182,212,0.1)', borderRadius: 10, border: '1px solid rgba(6,182,212,0.3)', marginBottom: 12 }}>
                      <div style={{ fontSize: 12, color: '#67e8f9', fontWeight: 600, marginBottom: 8 }}>📊 Acceptance criteria:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        • <strong>&lt;0.1%</strong> (1/1000): Sprejemljiv nivo za rutinske operacije<br />
                        • <strong>0 kontaminacij</strong> za batch &lt;5000 enot: Idealen rezultat<br />
                        • <strong>&gt;0.1%</strong>: Potrebna analiza vzrokov in korektivni ukrepi<br />
                        • <strong>&gt;0.5%</strong>: Proces ni validiran, potrebna re-validacija
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🦠 Kontaminacija:</strong> Ciljna stopnja kontaminacije mora biti &lt;0.1% (1 enota na 1000). To je kritičen parameter za validacijo aseptičnega procesa po EU GMP Annex 1.
                    </div>
                  </div>
                )}

                {activeSection === 'worst-case' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Worst-case pogoji (Challenge conditions)</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {worstCaseConditions.map((condition, i) => (
                        <label
                          key={i}
                          style={{
                            padding: 14,
                            background: condition.implemented ? 'rgba(245,158,11,0.15)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `2px solid ${condition.implemented ? '#f59e0b' : 'rgba(255,255,255,0.08)'}`,
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'flex-start',
                            gap: 12
                          }}
                        >
                          <input
                            type="checkbox"
                            checked={condition.implemented}
                            onChange={() => {
                              const updated = [...worstCaseConditions]
                              updated[i].implemented = !updated[i].implemented
                              setWorstCaseConditions(updated)
                            }}
                            style={{ marginTop: 3, width: 18, height: 18 }}
                          />
                          <div style={{ flex: 1 }}>
                            <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 4 }}>
                              ⚠️ {condition.condition}
                            </div>
                            <div style={{ fontSize: 11, color: '#94a3b8' }}>
                              Impact: <span style={{ color: '#fbbf24' }}>{condition.impact}</span>
                            </div>
                          </div>
                          {condition.implemented && <span style={{ fontSize: 20, color: '#f59e0b' }}>✓</span>}
                        </label>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 14, background: 'rgba(239,68,68,0.1)', borderRadius: 10, border: '1px solid rgba(239,68,68,0.3)' }}>
                      <div style={{ fontSize: 12, color: '#fca5a5', fontWeight: 600, marginBottom: 8 }}>⚠️ Zakaj worst-case testiranje?</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        • <strong>Simulacija najslabših pogojev</strong>: Dokazovanje robustnosti procesa<br />
                        • <strong>Realnost proizvodnje</strong>: Vključevanje vseh možnih situacij<br />
                        • <strong>Maksimalna obremenitev</strong>: Preverjanje pri mejah kapacitet<br />
                        • <strong>GMP zahteva</strong>: Po Annex 1 obvezno testiranje v worst-case
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>⚠️ Worst-case:</strong> Media Fill test mora biti izveden pod najslabšimi predvidenimi pogoji (maksimalne intervencije, najdaljši čas, najvišja hitrost). To zagotavlja, da proces deluje tudi v ekstremnih situacijah.
                    </div>
                  </div>
                )}

                {activeSection === 'critical-steps' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Kritični aseptični koraki</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {criticalSteps.map((step, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: i * 0.06 }}
                          style={{
                            padding: 14,
                            background: step.validated ? (step.cfu <= 5 ? 'rgba(34,197,94,0.1)' : 'rgba(239,68,68,0.1)') : 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: `1px solid ${step.validated ? (step.cfu <= 5 ? '#22c55e' : '#ef4444') : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{step.step}</div>
                              <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>
                                Personnel: {step.personnel} operators
                              </div>
                            </div>
                            {!step.validated ? (
                              <button
                                onClick={() => validateCriticalStep(i)}
                                style={{
                                  padding: '8px 16px',
                                  background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                  border: 'none',
                                  borderRadius: 6,
                                  color: '#fff',
                                  fontSize: 11,
                                  fontWeight: 600,
                                  cursor: 'pointer'
                                }}
                              >
                                🧪 Test
                              </button>
                            ) : (
                              <div style={{ textAlign: 'right' }}>
                                <div style={{ fontSize: 20, color: step.cfu <= 5 ? '#22c55e' : '#ef4444', fontWeight: 700 }}>
                                  {step.cfu} CFU
                                </div>
                                <div style={{ fontSize: 10, color: step.cfu <= 5 ? '#6ee7b7' : '#fca5a5', fontWeight: 600 }}>
                                  {step.cfu <= 5 ? '✓ Pass' : '✗ Fail'}
                                </div>
                              </div>
                            )}
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Kritični koraki vključujejo:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        ✓ Vse aseptične manipulacije med procesom<br />
                        ✓ Odprte površine (Grade A)<br />
                        ✓ Sterilne povezave in transfers<br />
                        ✓ Dodajanje komponent<br />
                        ✓ Intervencije in napake (simulirane)<br />
                        ✓ Točke najvišjega rizika za kontaminacijo
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🎯 Kritični koraki:</strong> Vsi kritični aseptični koraki morajo biti vključeni v Media Fill test. To vključuje normalne operacije + simulirane intervencije (worst-case scenarios).
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Cleaning Validation Simulator (Lesson 109)
export function CleaningValidationSimulator() {
  const [activeModule, setActiveModule] = useState<'residue-removal' | 'acceptance-limits' | 'analytical-methods' | 'worst-case' | 'time-intervals'>('residue-removal')

  // Residue removal proof
  const [cleaningCycles, setCleaningCycles] = useState<Array<{ 
    cycle: number; 
    productResidue: number; 
    detergentResidue: number; 
    swabRecovery: number;
    status: 'pass' | 'fail' | 'pending';
  }>>([
    { cycle: 1, productResidue: 0, detergentResidue: 0, swabRecovery: 85, status: 'pending' },
    { cycle: 2, productResidue: 0, detergentResidue: 0, swabRecovery: 88, status: 'pending' },
    { cycle: 3, productResidue: 0, detergentResidue: 0, swabRecovery: 90, status: 'pending' }
  ])

  // Acceptance limits
  const [limits, setLimits] = useState({
    mac: 10, // Maximum Allowable Carryover (ppm)
    visual: true,
    toc: 500, // Total Organic Carbon (ppm)
    bioburden: 10 // CFU/sample
  })

  // Analytical methods
  const [analyticalMethods, setAnalyticalMethods] = useState<Array<{ 
    method: string; 
    validated: boolean; 
    specificity: boolean;
    sensitivity: number; // LOQ in µg/cm²
    recovery: number; // %
  }>>([
    { method: 'HPLC-UV', validated: false, specificity: true, sensitivity: 0.5, recovery: 0 },
    { method: 'TOC Analyzer', validated: false, specificity: false, sensitivity: 50, recovery: 0 },
    { method: 'Swab sampling', validated: false, specificity: true, sensitivity: 1, recovery: 0 }
  ])

  // Worst-case scenarios
  const [worstCaseProducts, setWorstCaseProducts] = useState<Array<{ 
    product: string; 
    solubility: 'low' | 'medium' | 'high';
    toxicity: 'low' | 'medium' | 'high';
    potency: number; // mg/day
    tested: boolean;
    residueFound: number; // µg/cm²
  }>>([
    { product: 'API-A (Highly Potent)', solubility: 'low', toxicity: 'high', potency: 5, tested: false, residueFound: 0 },
    { product: 'API-B (Low Solubility)', solubility: 'low', toxicity: 'medium', potency: 50, tested: false, residueFound: 0 },
    { product: 'Detergent Residue', solubility: 'high', toxicity: 'low', potency: 0, tested: false, residueFound: 0 }
  ])

  // Time intervals
  const [timeIntervals, setTimeIntervals] = useState({
    maxDirtyHold: 24, // hours between use and cleaning
    maxCleanHold: 7, // days between cleaning and next use
    validated: false,
    microbialGrowth: false,
    degradationObserved: false
  })

  const canvasRef = useRef<HTMLCanvasElement>(null)

  // 3D equipment cleaning visualization
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let time = 0
    let cleaningProgress = 0
    const cleaningActive = cleaningCycles.some(c => c.status === 'pending')

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      time += 0.02
      if (cleaningActive) {
        cleaningProgress += 0.01
        if (cleaningProgress > 10) cleaningProgress = 0
      }

      // Equipment (reactor vessel) - 3D perspective
      const vesselX = 160
      const vesselY = 100

      // Vessel body (cylinder)
      ctx.fillStyle = '#475569'
      ctx.fillRect(100, 60, 120, 100)
      
      // Top ellipse (3D)
      ctx.fillStyle = '#64748b'
      ctx.beginPath()
      ctx.ellipse(160, 60, 60, 15, 0, 0, Math.PI * 2)
      ctx.fill()

      // Bottom ellipse
      ctx.fillStyle = '#334155'
      ctx.beginPath()
      ctx.ellipse(160, 160, 60, 15, 0, 0, Math.PI * 2)
      ctx.fill()

      // Contamination layer (red residue before cleaning)
      if (cleaningProgress < 5) {
        ctx.fillStyle = `rgba(239, 68, 68, ${0.6 - cleaningProgress * 0.1})`
        ctx.fillRect(105, 65, 110, 90)
      }

      // Cleaning spray nozzles (top-mounted)
      for (let i = 0; i < 3; i++) {
        const nozzleX = 120 + i * 40
        const nozzleY = 50
        
        ctx.fillStyle = '#0ea5e9'
        ctx.beginPath()
        ctx.arc(nozzleX, nozzleY, 4, 0, Math.PI * 2)
        ctx.fill()

        // Spray pattern (animated)
        if (cleaningActive) {
          for (let j = 0; j < 5; j++) {
            const dropY = nozzleY + 10 + (time * 20 + j * 8) % 60
            const dropX = nozzleX + Math.sin(time + j) * 8
            ctx.fillStyle = '#67e8f9'
            ctx.globalAlpha = 0.6
            ctx.beginPath()
            ctx.arc(dropX, dropY, 2, 0, Math.PI * 2)
            ctx.fill()
          }
          ctx.globalAlpha = 1
        }
      }

      // Drain valve (bottom)
      ctx.fillStyle = '#94a3b8'
      ctx.fillRect(155, 165, 10, 15)
      ctx.beginPath()
      ctx.arc(160, 180, 5, 0, Math.PI * 2)
      ctx.fill()

      // Sampling points (swab locations)
      const samplingPoints = [
        { x: 110, y: 80, label: 'P1' },
        { x: 160, y: 100, label: 'P2' },
        { x: 210, y: 120, label: 'P3' }
      ]

      samplingPoints.forEach((point, i) => {
        ctx.strokeStyle = '#fbbf24'
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.arc(point.x, point.y, 6, 0, Math.PI * 2)
        ctx.stroke()
        
        ctx.fillStyle = '#fbbf24'
        ctx.font = 'bold 10px Inter'
        ctx.textAlign = 'center'
        ctx.fillText(point.label, point.x, point.y - 12)
      })

      // Operator with swab (right side)
      const operatorX = 250
      const operatorY = 100
      
      ctx.fillStyle = '#0ea5e9'
      ctx.fillRect(operatorX - 6, operatorY, 12, 30)
      ctx.beginPath()
      ctx.arc(operatorX, operatorY, 8, 0, Math.PI * 2)
      ctx.fill()

      // Swab in hand
      ctx.strokeStyle = '#cbd5e1'
      ctx.lineWidth = 2
      ctx.beginPath()
      ctx.moveTo(operatorX, operatorY + 10)
      ctx.lineTo(operatorX - 20, operatorY + 5)
      ctx.stroke()
      
      ctx.fillStyle = '#f8fafc'
      ctx.beginPath()
      ctx.arc(operatorX - 20, operatorY + 5, 4, 0, Math.PI * 2)
      ctx.fill()

      // Status indicators
      ctx.font = 'bold 11px Inter'
      ctx.fillStyle = '#cbd5e1'
      ctx.textAlign = 'left'
      const completedCycles = cleaningCycles.filter(c => c.status !== 'pending').length
      ctx.fillText(`Cycles: ${completedCycles}/3`, 10, 20)
      ctx.fillText(`Status: ${cleaningActive ? 'Cleaning...' : 'Validated'}`, 10, 35)

      requestAnimationFrame(animate)
    }

    animate()
  }, [cleaningCycles])

  const modules = {
    'residue-removal': { icon: '🧪', title: 'Odstranitev ostankov', color: '#06b6d4' },
    'acceptance-limits': { icon: '📊', title: 'Sprejemljive meje', color: '#0284c7' },
    'analytical-methods': { icon: '🔬', title: 'Analitske metode', color: '#0369a1' },
    'worst-case': { icon: '⚠️', title: 'Najslabši primeri', color: '#075985' },
    'time-intervals': { icon: '⏱️', title: 'Časovni intervali', color: '#0c4a6e' }
  }

  const performCleaningCycle = (index: number) => {
    setCleaningCycles(prev => prev.map((cycle, i) => {
      if (i === index) {
        // Simulate cleaning with some random variability
        const productResidue = Math.random() * 5 // µg/cm²
        const detergentResidue = Math.random() * 15 // ppm
        const swabRecovery = 80 + Math.random() * 15 // %
        
        const productPass = productResidue < (limits.mac / 100) // convert ppm to µg/cm²
        const detergentPass = detergentResidue < 10
        const status: 'pass' | 'fail' = productPass && detergentPass ? 'pass' : 'fail'
        
        return { ...cycle, productResidue, detergentResidue, swabRecovery, status }
      }
      return cycle
    }))
  }

  const validateAnalyticalMethod = (index: number) => {
    setAnalyticalMethods(prev => prev.map((method, i) => {
      if (i === index) {
        const recovery = 85 + Math.random() * 12 // 85-97%
        return { ...method, validated: true, recovery }
      }
      return method
    }))
  }

  const testWorstCaseProduct = (index: number) => {
    setWorstCaseProducts(prev => prev.map((product, i) => {
      if (i === index) {
        // Worst case = harder to clean = higher residue
        let residueFound = Math.random() * 3
        if (product.solubility === 'low') residueFound *= 2
        if (product.toxicity === 'high') residueFound *= 1.5
        
        return { ...product, tested: true, residueFound }
      }
      return product
    }))
  }

  const totalProgress = 
    (cleaningCycles.filter(c => c.status === 'pass').length / cleaningCycles.length) * 25 +
    (limits.visual && limits.mac <= 10 && limits.toc <= 500 ? 20 : 0) +
    (analyticalMethods.filter(m => m.validated).length / analyticalMethods.length) * 20 +
    (worstCaseProducts.filter(p => p.tested && p.residueFound < 10).length / worstCaseProducts.length) * 20 +
    (timeIntervals.validated ? 15 : 0)

  return (
    <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
      {/* Module navigation */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', gap: 8, marginBottom: 16 }}>
        {Object.entries(modules).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActiveModule(key as any)}
            style={{
              padding: 10,
              background: activeModule === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeModule === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 8,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 20, marginBottom: 4 }}>{val.icon}</div>
            <div style={{ fontSize: 11, color: '#e6eef8', fontWeight: 700, lineHeight: 1.2 }}>{val.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '340px 1fr', gap: 16 }}>
        {/* Left: 3D Equipment Viz + Progress */}
        <div>
          <div style={{ marginBottom: 10, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Oprema za Čiščenje</div>
          <canvas
            ref={canvasRef}
            width={320}
            height={190}
            style={{
              width: '100%',
              height: 'auto',
              background: 'rgba(0,0,0,0.3)',
              borderRadius: 12,
              border: '1px solid rgba(6, 182, 212, 0.3)'
            }}
          />

          {/* Cleaning Validation Progress */}
          <div style={{ marginTop: 16, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 13, color: '#67e8f9', fontWeight: 700, marginBottom: 12 }}>Validacija Čiščenja</div>
            
            {[
              { label: '🧪 Odstranitev', value: cleaningCycles.filter(c => c.status === 'pass').length, total: cleaningCycles.length, color: '#06b6d4' },
              { label: '📊 Meje', value: limits.visual && limits.mac <= 10 ? 1 : 0, total: 1, color: '#0284c7' },
              { label: '🔬 Metode', value: analyticalMethods.filter(m => m.validated).length, total: analyticalMethods.length, color: '#0369a1' },
              { label: '⚠️ Worst-case', value: worstCaseProducts.filter(p => p.tested).length, total: worstCaseProducts.length, color: '#075985' },
              { label: '⏱️ Čas', value: timeIntervals.validated ? 1 : 0, total: 1, color: '#0c4a6e' }
            ].map((item, i) => (
              <div key={i} style={{ marginBottom: 10 }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>
                  <span style={{ fontSize: 11, color: '#cbd5e1' }}>{item.label}</span>
                  <span style={{ fontSize: 11, color: '#e6eef8', fontWeight: 600 }}>{item.value}/{item.total}</span>
                </div>
                <div style={{ height: 6, background: 'rgba(255,255,255,0.06)', borderRadius: 4, overflow: 'hidden' }}>
                  <motion.div
                    style={{ height: '100%', background: item.color, borderRadius: 4 }}
                    initial={{ width: 0 }}
                    animate={{ width: `${(item.value / item.total) * 100}%` }}
                    transition={{ duration: 0.5 }}
                  />
                </div>
              </div>
            ))}

            <div style={{ marginTop: 14, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, textAlign: 'center' }}>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>Skupni napredek</div>
              <div style={{ fontSize: 24, color: '#67e8f9', fontWeight: 700 }}>
                {Math.round(totalProgress)}%
              </div>
              <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 4 }}>
                {totalProgress >= 90 ? '✅ Validacija uspešna' : totalProgress >= 50 ? '🔄 V teku' : '⏳ Priprava'}
              </div>
            </div>
          </div>
        </div>

        {/* Right: Active module content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div
              key={activeModule}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.25 }}
            >
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', minHeight: 450 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                  <div style={{ fontSize: 36 }}>{modules[activeModule].icon}</div>
                  <div>
                    <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>{modules[activeModule].title}</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginTop: 2 }}>
                      {activeModule === 'residue-removal' && 'Dokaz učinkovite odstranitve produkta in detergenta'}
                      {activeModule === 'acceptance-limits' && 'Določitev sprejemljivih mej ostankov (MAC, TOC, Bioburden)'}
                      {activeModule === 'analytical-methods' && 'Razvoj in validacija analitskih metod za zaznavanje'}
                      {activeModule === 'worst-case' && 'Testiranje najslabših primerov (težko topni, potentni)'}
                      {activeModule === 'time-intervals' && 'Maksimalni intervali med uporabo, čiščenjem in ponovno uporabo'}
                    </div>
                  </div>
                </div>

                {activeModule === 'residue-removal' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>3 zaporedni uspešni cikli čiščenja</div>
                    <div style={{ display: 'grid', gap: 12 }}>
                      {cleaningCycles.map((cycle, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.08 }}
                          style={{
                            padding: 14,
                            background: cycle.status === 'pass' ? 'rgba(34,197,94,0.1)' : cycle.status === 'fail' ? 'rgba(239,68,68,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 10,
                            border: `2px solid ${cycle.status === 'pass' ? '#22c55e' : cycle.status === 'fail' ? '#ef4444' : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', marginBottom: 12 }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 15, color: '#e6eef8', fontWeight: 700 }}>Cikel {cycle.cycle}</div>
                              <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Swab Recovery: {cycle.swabRecovery.toFixed(1)}%</div>
                            </div>
                            {cycle.status === 'pending' && (
                              <button
                                onClick={() => performCleaningCycle(i)}
                                style={{
                                  padding: '10px 18px',
                                  background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                  border: 'none',
                                  borderRadius: 8,
                                  color: '#fff',
                                  fontSize: 12,
                                  fontWeight: 600,
                                  cursor: 'pointer'
                                }}
                              >
                                ▶ Test Čiščenja
                              </button>
                            )}
                            {(cycle.status === 'pass' || cycle.status === 'fail') && (
                              <div style={{
                                padding: '10px 18px',
                                background: cycle.status === 'pass' ? '#22c55e' : '#ef4444',
                                borderRadius: 8,
                                fontSize: 12,
                                fontWeight: 700,
                                color: '#fff'
                              }}>
                                {cycle.status === 'pass' ? '✅ PASS' : '❌ FAIL'}
                              </div>
                            )}
                          </div>

                          {cycle.status !== 'pending' && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 10, paddingTop: 10, borderTop: '1px solid rgba(255,255,255,0.1)' }}>
                              <div>
                                <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 2 }}>Produkt (µg/cm²)</div>
                                <div style={{ fontSize: 16, color: cycle.productResidue < 5 ? '#6ee7b7' : '#fca5a5', fontWeight: 700 }}>{cycle.productResidue.toFixed(2)}</div>
                              </div>
                              <div>
                                <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 2 }}>Detergent (ppm)</div>
                                <div style={{ fontSize: 16, color: cycle.detergentResidue < 10 ? '#6ee7b7' : '#fca5a5', fontWeight: 700 }}>{cycle.detergentResidue.toFixed(1)}</div>
                              </div>
                              <div>
                                <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 2 }}>Recovery (%)</div>
                                <div style={{ fontSize: 16, color: '#67e8f9', fontWeight: 700 }}>{cycle.swabRecovery.toFixed(1)}</div>
                              </div>
                            </div>
                          )}
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🧪 Odstranitev ostankov:</strong> Postopek čiščenja mora dokazati, da odstrani produktne ostanke in detergent na sprejemljive ravni. Potrebni so najmanj 3 zaporedni uspešni cikli.
                    </div>
                  </div>
                )}

                {activeModule === 'acceptance-limits' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Določitev sprejemljivih mej</div>
                    
                    <div style={{ display: 'grid', gap: 12 }}>
                      {/* MAC - Maximum Allowable Carryover */}
                      <div style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>
                          MAC (Maximum Allowable Carryover)
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                          <input
                            type="range"
                            min="1"
                            max="20"
                            value={limits.mac}
                            onChange={(e) => setLimits(prev => ({ ...prev, mac: parseInt(e.target.value) }))}
                            style={{ flex: 1 }}
                          />
                          <div style={{ fontSize: 18, color: '#67e8f9', fontWeight: 700, minWidth: 80 }}>{limits.mac} ppm</div>
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 6 }}>
                          Formula: MAC = (NOEL × Batch Size) / (Daily Dose × Safety Factor)
                        </div>
                      </div>

                      {/* Visual cleanliness */}
                      <label style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 12 }}>
                        <input
                          type="checkbox"
                          checked={limits.visual}
                          onChange={(e) => setLimits(prev => ({ ...prev, visual: e.target.checked }))}
                          style={{ width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>Vizualna Čistost</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Oprema mora biti vizualno čista (brez vidnih ostankov)</div>
                        </div>
                        {limits.visual && <span style={{ fontSize: 20, color: '#22c55e' }}>✓</span>}
                      </label>

                      {/* TOC limit */}
                      <div style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>
                          TOC Limit (Total Organic Carbon)
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                          <input
                            type="range"
                            min="100"
                            max="1000"
                            step="50"
                            value={limits.toc}
                            onChange={(e) => setLimits(prev => ({ ...prev, toc: parseInt(e.target.value) }))}
                            style={{ flex: 1 }}
                          />
                          <div style={{ fontSize: 18, color: '#67e8f9', fontWeight: 700, minWidth: 100 }}>{limits.toc} ppm</div>
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 6 }}>
                          TOC test je nespecifična metoda za detekcijo vseh organskih ostankov
                        </div>
                      </div>

                      {/* Bioburden limit */}
                      <div style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>
                          Bioburden Limit
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                          <input
                            type="range"
                            min="1"
                            max="50"
                            value={limits.bioburden}
                            onChange={(e) => setLimits(prev => ({ ...prev, bioburden: parseInt(e.target.value) }))}
                            style={{ flex: 1 }}
                          />
                          <div style={{ fontSize: 18, color: '#67e8f9', fontWeight: 700, minWidth: 120 }}>{limits.bioburden} CFU/vzorec</div>
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 6 }}>
                          Mikrobiološka obremenitev po čiščenju mora biti nizka
                        </div>
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 14, background: 'rgba(6,182,212,0.1)', borderRadius: 10, border: '1px solid rgba(6,182,212,0.3)' }}>
                      <div style={{ fontSize: 12, color: '#67e8f9', fontWeight: 600, marginBottom: 8 }}>📊 Pristopi za določitev mej:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        • <strong>10 ppm pristop:</strong> Max. 10 ppm produkta A v naslednjem produktu B<br />
                        • <strong>0.1% pristop:</strong> Max. 0.1% terapevtske doze v naslednji dozi<br />
                        • <strong>Toksikološki pristop:</strong> Na osnovi NOEL/ADI vrednosti<br />
                        • <strong>Vizualna čistost:</strong> Vedno potrebna + dodatne analize
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>📊 Sprejemljive meje:</strong> Meje morajo biti znanstveno utemeljene, toksikološko varне in dosegljive s postopkom čiščenja. Strožja meja se uporabi.
                    </div>
                  </div>
                )}

                {activeModule === 'analytical-methods' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Razvoj in validacija analitskih metod</div>
                    <div style={{ display: 'grid', gap: 12 }}>
                      {analyticalMethods.map((method, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, x: -10 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: i * 0.06 }}
                          style={{
                            padding: 14,
                            background: method.validated ? 'rgba(34,197,94,0.1)' : 'rgba(255,255,255,0.03)',
                            borderRadius: 10,
                            border: `1px solid ${method.validated ? '#22c55e' : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 10 }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 700 }}>{method.method}</div>
                              <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 4 }}>
                                Specifičnost: {method.specificity ? '✓ Da' : '✗ Ne (non-specific)'}<br />
                                LOQ: {method.sensitivity} µg/cm²
                              </div>
                            </div>
                            {!method.validated ? (
                              <button
                                onClick={() => validateAnalyticalMethod(i)}
                                style={{
                                  padding: '8px 16px',
                                  background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                  border: 'none',
                                  borderRadius: 6,
                                  color: '#fff',
                                  fontSize: 11,
                                  fontWeight: 600,
                                  cursor: 'pointer'
                                }}
                              >
                                🧪 Validiraj
                              </button>
                            ) : (
                              <div style={{ textAlign: 'right' }}>
                                <div style={{ fontSize: 18, color: '#22c55e', fontWeight: 700 }}>
                                  {method.recovery.toFixed(1)}%
                                </div>
                                <div style={{ fontSize: 10, color: '#6ee7b7', fontWeight: 600 }}>Recovery</div>
                              </div>
                            )}
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Validacijski parametri:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        ✓ <strong>Specifičnost:</strong> Selektivno zaznavanje analita<br />
                        ✓ <strong>Točnost:</strong> 80-120% recovery za swab/rinse<br />
                        ✓ <strong>Linearnost:</strong> R² ≥ 0.99 v delovnem območju<br />
                        ✓ <strong>LOD/LOQ:</strong> Pod sprejemljivimi mejami<br />
                        ✓ <strong>Ponovljivost:</strong> %RSD {'<'} 10%
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>🔬 Analitske metode:</strong> Metode morajo biti validirane za specifičnost, točnost, linearnost, LOD/LOQ in ponovljivost. HPLC je najpogostejša, TOC nespecifična backup metoda.
                    </div>
                  </div>
                )}

                {activeModule === 'worst-case' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Worst-case produkti (težko čistljivi)</div>
                    <div style={{ display: 'grid', gap: 12 }}>
                      {worstCaseProducts.map((product, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: i * 0.08 }}
                          style={{
                            padding: 14,
                            background: product.tested ? (product.residueFound < 10 ? 'rgba(34,197,94,0.1)' : 'rgba(239,68,68,0.1)') : 'rgba(255,255,255,0.03)',
                            borderRadius: 10,
                            border: `1px solid ${product.tested ? (product.residueFound < 10 ? '#22c55e' : '#ef4444') : 'rgba(255,255,255,0.08)'}`
                          }}
                        >
                          <div style={{ display: 'flex', alignItems: 'flex-start', gap: 12, marginBottom: 10 }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>{product.product}</div>
                              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 8, fontSize: 11 }}>
                                <div>
                                  <div style={{ color: '#94a3b8' }}>Topnost:</div>
                                  <div style={{ color: product.solubility === 'low' ? '#fca5a5' : product.solubility === 'medium' ? '#fbbf24' : '#6ee7b7', fontWeight: 600 }}>
                                    {product.solubility === 'low' ? '🔴 Nizka' : product.solubility === 'medium' ? '🟡 Srednja' : '🟢 Visoka'}
                                  </div>
                                </div>
                                <div>
                                  <div style={{ color: '#94a3b8' }}>Toksičnost:</div>
                                  <div style={{ color: product.toxicity === 'high' ? '#fca5a5' : product.toxicity === 'medium' ? '#fbbf24' : '#6ee7b7', fontWeight: 600 }}>
                                    {product.toxicity === 'high' ? '🔴 Visoka' : product.toxicity === 'medium' ? '🟡 Srednja' : '🟢 Nizka'}
                                  </div>
                                </div>
                                <div>
                                  <div style={{ color: '#94a3b8' }}>Doza:</div>
                                  <div style={{ color: '#cbd5e1', fontWeight: 600 }}>{product.potency > 0 ? `${product.potency} mg/dan` : 'N/A'}</div>
                                </div>
                              </div>
                            </div>
                            {!product.tested ? (
                              <button
                                onClick={() => testWorstCaseProduct(i)}
                                style={{
                                  padding: '8px 16px',
                                  background: 'linear-gradient(135deg, #06b6d4, #0284c7)',
                                  border: 'none',
                                  borderRadius: 6,
                                  color: '#fff',
                                  fontSize: 11,
                                  fontWeight: 600,
                                  cursor: 'pointer',
                                  whiteSpace: 'nowrap'
                                }}
                              >
                                🧪 Test
                              </button>
                            ) : (
                              <div style={{ textAlign: 'right' }}>
                                <div style={{ fontSize: 18, color: product.residueFound < 10 ? '#22c55e' : '#ef4444', fontWeight: 700 }}>
                                  {product.residueFound.toFixed(2)}
                                </div>
                                <div style={{ fontSize: 10, color: '#94a3b8' }}>µg/cm²</div>
                              </div>
                            )}
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    <div style={{ marginTop: 12, padding: 14, background: 'rgba(239,68,68,0.1)', borderRadius: 10, border: '1px solid rgba(239,68,68,0.3)' }}>
                      <div style={{ fontSize: 12, color: '#fca5a5', fontWeight: 600, marginBottom: 8 }}>⚠️ Worst-case kriteriji:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        • <strong>Nizka topnost:</strong> Težje odstranljivi iz površin<br />
                        • <strong>Visoka potentnost:</strong> Manjše dovoljene meje<br />
                        • <strong>Visoka toksičnost:</strong> Strožje zahteve za čistost<br />
                        • <strong>Dolgotrajno sušenje:</strong> Povečana adhezija na površine
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>⚠️ Najslabši primeri:</strong> Validacija mora vključevati worst-case produkte (nizka topnost, visoka potentnost/toksičnost). Če postopek deluje za najslabši primer, deluje za vse.
                    </div>
                  </div>
                )}

                {activeModule === 'time-intervals' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Časovni intervali (Dirty Hold & Clean Hold)</div>
                    
                    <div style={{ display: 'grid', gap: 12 }}>
                      {/* Dirty Hold Time */}
                      <div style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>
                          ⏱️ Dirty Hold Time (Uporaba → Čiščenje)
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>
                          <input
                            type="range"
                            min="1"
                            max="72"
                            value={timeIntervals.maxDirtyHold}
                            onChange={(e) => setTimeIntervals(prev => ({ ...prev, maxDirtyHold: parseInt(e.target.value) }))}
                            style={{ flex: 1 }}
                          />
                          <div style={{ fontSize: 18, color: '#67e8f9', fontWeight: 700, minWidth: 80 }}>{timeIntervals.maxDirtyHold}h</div>
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8' }}>
                          Maksimalni čas med zadnjo uporabo in začetkom čiščenja
                        </div>
                      </div>

                      {/* Clean Hold Time */}
                      <div style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
                        <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>
                          ⏱️ Clean Hold Time (Čiščenje → Uporaba)
                        </div>
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>
                          <input
                            type="range"
                            min="1"
                            max="30"
                            value={timeIntervals.maxCleanHold}
                            onChange={(e) => setTimeIntervals(prev => ({ ...prev, maxCleanHold: parseInt(e.target.value) }))}
                            style={{ flex: 1 }}
                          />
                          <div style={{ fontSize: 18, color: '#67e8f9', fontWeight: 700, minWidth: 80 }}>{timeIntervals.maxCleanHold} dni</div>
                        </div>
                        <div style={{ fontSize: 11, color: '#94a3b8' }}>
                          Maksimalni čas med čiščenjem in ponovno uporabo
                        </div>
                      </div>

                      {/* Validation checkboxes */}
                      <label style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 12 }}>
                        <input
                          type="checkbox"
                          checked={timeIntervals.validated}
                          onChange={(e) => setTimeIntervals(prev => ({ ...prev, validated: e.target.checked }))}
                          style={{ width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>✓ Intervali Validirani</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Študije potrjujejo, da ostanki ostanejo pod mejami</div>
                        </div>
                        {timeIntervals.validated && <span style={{ fontSize: 20, color: '#22c55e' }}>✓</span>}
                      </label>

                      <label style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 12 }}>
                        <input
                          type="checkbox"
                          checked={timeIntervals.microbialGrowth}
                          onChange={(e) => setTimeIntervals(prev => ({ ...prev, microbialGrowth: e.target.checked }))}
                          style={{ width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>🦠 Mikrobiološka Rast Testirana</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Clean hold ne sme omogočiti mikrobiološke rasti</div>
                        </div>
                        {timeIntervals.microbialGrowth && <span style={{ fontSize: 20, color: '#22c55e' }}>✓</span>}
                      </label>

                      <label style={{ padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 12 }}>
                        <input
                          type="checkbox"
                          checked={timeIntervals.degradationObserved}
                          onChange={(e) => setTimeIntervals(prev => ({ ...prev, degradationObserved: e.target.checked }))}
                          style={{ width: 18, height: 18 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>⚗️ Degradacija Ocenjena</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Dirty hold ne sme povzročiti težje čistljivih ostankov</div>
                        </div>
                        {timeIntervals.degradationObserved && <span style={{ fontSize: 20, color: '#22c55e' }}>✓</span>}
                      </label>
                    </div>

                    <div style={{ marginTop: 12, padding: 14, background: 'rgba(245,158,11,0.1)', borderRadius: 10, border: '1px solid rgba(245,158,11,0.3)' }}>
                      <div style={{ fontSize: 12, color: '#fbbf24', fontWeight: 600, marginBottom: 8 }}>⚠️ Pomembno:</div>
                      <div style={{ fontSize: 11, color: '#cbd5e1', lineHeight: 1.7 }}>
                        • <strong>Dirty Hold Time:</strong> Preprečiti sušenje/polimerizacijo ostankov<br />
                        • <strong>Clean Hold Time:</strong> Preprečiti mikrobiološko rast in re-kontaminacijo<br />
                        • <strong>Validacija:</strong> Dokazati, da se meje ne presežejo v najslabšem primeru<br />
                        • <strong>Monitoring:</strong> Periodično preverjanje skladnosti
                      </div>
                    </div>

                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>⏱️ Časovni intervali:</strong> Določiti in validirati je potrebno maksimalne intervale med uporabo in čiščenjem (dirty hold) ter med čiščenjem in ponovno uporabo (clean hold). Tipično: dirty hold {'<'} 24h, clean hold {'<'} 7 dni.
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Cleaning Validation PRO (Lesson 110) — advanced effects and tools
export function CleaningValidationProSimulator() {
  const [active, setActive] = useState<'cip'|'limits'|'methods'|'worst'|'timing'>('cip')
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // CIP builder — steps and residue kinetics
  type CipStep = { name: string; minutes: number; tempC: number; concPct: number; flow: number }
  const [cipSteps, setCipSteps] = useState<CipStep[]>([
    { name: 'Pred-izpiranje', minutes: 5, tempC: 25, concPct: 0, flow: 60 },
    { name: 'Alkalni detergent', minutes: 10, tempC: 60, concPct: 1.0, flow: 80 },
    { name: 'Vmesno izpiranje', minutes: 4, tempC: 30, concPct: 0, flow: 60 },
    { name: 'Kiselinski detergent', minutes: 6, tempC: 50, concPct: 0.5, flow: 70 },
    { name: 'Končno izpiranje', minutes: 6, tempC: 25, concPct: 0, flow: 70 }
  ])
  const [residueStart, setResidueStart] = useState(100) // arbitrary units
  const totalMinutes = cipSteps.reduce((s,x)=>s + x.minutes, 0)

  // Acceptance limits (MACO)
  const [maco, setMaco] = useState({
    NOEL_mg_day: 0.5,
    batchB_kg: 500,
    dailyDoseB_g: 2,
    safetyFactor: 100,
    contactArea_m2: 12
  })
  const calcMACOmg = () => (maco.NOEL_mg_day * maco.batchB_kg*1000) / (maco.dailyDoseB_g*1000 * maco.safetyFactor)
  const calcMACOugPerCm2 = () => {
    const mg = calcMACOmg()
    const ug = mg * 1000
    const cm2 = maco.contactArea_m2 * 10000
    return ug / cm2
  }

  // Analytical methods validation mini-lab
  type Method = { name: string; LOQ: number; LOD: number; specificity: boolean; results: number[] }
  const [methods, setMethods] = useState<Method[]>([
    { name: 'HPLC-UV', LOQ: 0.5, LOD: 0.15, specificity: true, results: [] },
    { name: 'TOC', LOQ: 30, LOD: 10, specificity: false, results: [] },
    { name: 'Swab+HPLC', LOQ: 1.0, LOD: 0.3, specificity: true, results: [] }
  ])
  const spikeRecoveries = (trueVal=10) => Array.from({length:6},()=>{
    const err = (Math.random()-0.5)*4
    return Math.max(0, trueVal + err)
  })

  // Worst-case heatmap (products x equipment)
  const products = [
    { name:'API-A', sol:'low', tox:'high', pot:5 },
    { name:'API-B', sol:'low', tox:'medium', pot:50 },
    { name:'Detergent', sol:'high', tox:'low', pot:0 }
  ]
  const equipments = [ 'Reaktor 500L', 'Cevovod DN50', 'Ventil klapa', 'Izmenjevalec' ]
  const [testedCells, setTestedCells] = useState<Record<string, number>>({}) // key=pi-ei, value=residue ug/cm2

  // Time intervals simulation
  const [timing, setTiming] = useState({ dirtyHoldH: 24, cleanHoldD: 7, tempC: 22, humidityPct: 45 })
  const microbialAt = (hours:number) => {
    // simple growth model (permissive): N=N0*exp(k*t) moderated by humidity and temp
    const k = 0.03 * (1 + (timing.humidityPct-40)/100) * (1 + (timing.tempC-20)/50)
    return Math.exp(k*hours)
  }

  // Left canvas — advanced vessel + particle/water effects
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')!
    let t = 0
    const draw = () => {
      t += 0.02
      const w = canvas.width, h = canvas.height
      ctx.clearRect(0,0,w,h)

      // Background gradient
      const grad = ctx.createLinearGradient(0,0,0,h)
      grad.addColorStop(0,'#0b1220')
      grad.addColorStop(1,'#0f2a3a')
      ctx.fillStyle = grad
      ctx.fillRect(0,0,w,h)

      // Vessel body
      ctx.fillStyle = '#0ea5e9'
      ctx.globalAlpha = 0.15
      ctx.beginPath(); ctx.ellipse(160, 95, 70, 38, 0, 0, Math.PI*2); ctx.fill()
      ctx.globalAlpha = 1
      ctx.fillStyle = '#1f2a44'
      ctx.fillRect(100, 60, 120, 80)
      ctx.fillStyle = '#2b3658'; ctx.beginPath(); ctx.ellipse(160, 60, 60, 14, 0, 0, Math.PI*2); ctx.fill()
      ctx.fillStyle = '#141b2e'; ctx.beginPath(); ctx.ellipse(160, 140, 60, 14, 0, 0, Math.PI*2); ctx.fill()

      // Water spray particles (more advanced effect)
      for (let i=0;i<80;i++){
        const nx = 100 + (i%4)*40
        const phase = (i/10)+t
        const dropX = nx + Math.sin(phase*3)*6
        const dropY = 60 + (phase*35)%70
        ctx.fillStyle = `hsla(${190+Math.sin(phase)*20},80%,70%,${0.3+0.7*Math.random()})`
        ctx.beginPath(); ctx.arc(dropX, dropY, 1.6, 0, Math.PI*2); ctx.fill()
      }

      // Residue overlay — fade over time based on CIP severity score
      const severity = cipSteps.reduce((s,st)=> s + (st.minutes * (1+st.tempC/80) * (1+st.concPct*2) * (st.flow/60)), 0)
      // Normalize and compute remaining residue fraction
      const k = Math.min(0.08, severity/(totalMinutes*300))
      const elapsed = (t*20) % (totalMinutes+1)
      const frac = Math.exp(-k * elapsed)
      ctx.fillStyle = `rgba(239,68,68,${0.45*frac})`
      ctx.fillRect(106, 66, 108, 68)

      // Animated gauges
      ctx.fillStyle = '#cbd5e1'; ctx.font = '11px Inter';
      ctx.fillText(`Preostanek: ${(frac*residueStart).toFixed(1)} AU`, 12, 18)
      ctx.fillText(`CIP minute: ${Math.floor(elapsed)} / ${totalMinutes}`, 12, 32)
      ctx.fillText(`MACO: ${calcMACOugPerCm2().toFixed(3)} µg/cm²`, 12, 46)
      requestAnimationFrame(draw)
    }
    draw()
  }, [cipSteps, residueStart, totalMinutes, maco])

  // Helpers
  const updateStep = (i:number, patch: Partial<CipStep>) => {
    setCipSteps(prev => prev.map((s,idx)=> idx===i ? { ...s, ...patch } : s))
  }
  const addStep = () => setCipSteps(prev => [...prev, { name: 'Novo izpiranje', minutes: 4, tempC: 25, concPct: 0, flow: 60 }])
  const removeStep = (i:number) => setCipSteps(prev => prev.filter((_,idx)=>idx!==i))

  // Worst-case test
  const testCell = (pi:number, ei:number) => {
    const key = `${pi}-${ei}`
    const p = products[pi]
    let base = 2 + Math.random()*3
    if (p.sol==='low') base *= 1.8
    if (p.tox==='high') base *= 1.4
    // Equipment influence
    if (equipments[ei].includes('Cevovod')) base *= 1.3
    if (equipments[ei].includes('Izmenjevalec')) base *= 1.5
    setTestedCells(prev => ({ ...prev, [key]: base }))
  }

  // Module meta
  const tabs = [
    { id:'cip', label:'🧼 CIP Postopek', color:'#22c55e' },
    { id:'limits', label:'📏 Meje (MACO)', color:'#06b6d4' },
    { id:'methods', label:'🔬 Metode', color:'#7c3aed' },
    { id:'worst', label:'⚠️ Worst-case', color:'#f97316' },
    { id:'timing', label:'⏱️ Časovni intervali', color:'#ef4444' }
  ] as const

  return (
    <div style={{ padding: 16, background:'rgba(124,58,237,0.06)', borderRadius: 12, border:'1px solid rgba(124,58,237,0.25)'}}>
      {/* Tabs */}
      <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(160px,1fr))', gap:8, marginBottom: 16 }}>
        {tabs.map(t => (
          <motion.button key={t.id}
            onClick={()=>setActive(t.id)}
            whileHover={{scale:1.03}} whileTap={{scale:0.97}}
            style={{ padding:10, borderRadius:10, cursor:'pointer',
              background: active===t.id ? `linear-gradient(135deg, ${t.color}, ${t.color}cc)` : 'rgba(255,255,255,0.06)',
              border: active===t.id ? `2px solid ${t.color}` : '2px solid rgba(255,255,255,0.08)', color:'#e6eef8', fontWeight:700 }}>
            {t.label}
          </motion.button>
        ))}
      </div>

      <div style={{ display:'grid', gridTemplateColumns:'360px 1fr', gap:16 }}>
        {/* Left: advanced canvas + quick KPIs */}
        <div>
          <div style={{ color:'#a78bfa', fontWeight:700, fontSize:14, marginBottom:8 }}>3D Oprema (CIP) — napredni efekti</div>
          <canvas ref={canvasRef} width={340} height={180} style={{width:'100%',height:'auto', background:'rgba(0,0,0,0.35)', borderRadius:12, border:'1px solid rgba(124,58,237,0.35)'}} />

          <div style={{ marginTop:12, background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.1)', borderRadius:10, padding:12 }}>
            <div style={{ display:'grid', gridTemplateColumns:'1fr 1fr', gap:10 }}>
              <div>
                <div style={{fontSize:11,color:'#94a3b8'}}>Skupni čas</div>
                <div style={{fontSize:18,color:'#e6eef8',fontWeight:700}}>{totalMinutes} min</div>
              </div>
              <div>
                <div style={{fontSize:11,color:'#94a3b8'}}>MACO (µg/cm²)</div>
                <div style={{fontSize:18,color:'#67e8f9',fontWeight:700}}>{calcMACOugPerCm2().toFixed(3)}</div>
              </div>
            </div>
          </div>
        </div>

        {/* Right: module content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div key={active} initial={{opacity:0,x:20}} animate={{opacity:1,x:0}} exit={{opacity:0,x:-20}} transition={{duration:0.25}}>

              {active==='cip' && (
                <div style={{ padding:16, background:'rgba(255,255,255,0.04)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ display:'flex',justifyContent:'space-between',alignItems:'center', marginBottom:8 }}>
                    <div>
                      <div style={{ color:'#e6eef8', fontWeight:800, fontSize:16 }}>CIP Builder</div>
                      <div style={{ color:'#94a3b8', fontSize:12 }}>Uredi korake, trajanje in parametre</div>
                    </div>
                    <motion.button whileHover={{scale:1.03}} whileTap={{scale:0.97}} onClick={addStep} className="btn-primary" style={{padding:'8px 12px', borderRadius:8}}>+ Dodaj korak</motion.button>
                  </div>
                  <div style={{ display:'grid', gap:10 }}>
                    {cipSteps.map((s, i) => (
                      <div key={i} style={{ display:'grid', gridTemplateColumns:'1.3fr 1fr 1fr 1fr auto', gap:8, alignItems:'center', background:'rgba(255,255,255,0.03)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:10 }}>
                        <input value={s.name} onChange={e=>updateStep(i,{ name:e.target.value })} />
                        <label style={{display:'flex',gap:6,alignItems:'center'}}>
                          ⏱️
                          <input type="number" min={1} value={s.minutes} onChange={e=>updateStep(i,{ minutes:Number(e.target.value) })} style={{width:70}}/> min
                        </label>
                        <label style={{display:'flex',gap:6,alignItems:'center'}}>
                          🌡️
                          <input type="number" value={s.tempC} onChange={e=>updateStep(i,{ tempC:Number(e.target.value) })} style={{width:70}}/> °C
                        </label>
                        <label style={{display:'flex',gap:6,alignItems:'center'}}>
                          🧪
                          <input type="number" step={0.1} value={s.concPct} onChange={e=>updateStep(i,{ concPct:Number(e.target.value) })} style={{width:70}}/> %
                        </label>
                        <div style={{display:'flex',gap:8,justifyContent:'flex-end'}}>
                          <span style={{fontSize:12,color:'#94a3b8'}}>💧 {s.flow} L/min</span>
                          <button onClick={()=>removeStep(i)} className="btn-ghost">✖</button>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div style={{ marginTop:12, padding:12, background:'rgba(34,197,94,0.08)', border:'1px solid rgba(34,197,94,0.35)', borderRadius:10, fontSize:12, color:'#cbd5e1' }}>
                    ✅ Cilj: doseči minimalen preostanek pri sprejemljivem času in porabi vode/kemikalij (optimizacija CIP).
                  </div>
                </div>
              )}

              {active==='limits' && (
                <div style={{ padding:16, background:'rgba(255,255,255,0.04)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ color:'#e6eef8', fontWeight:800, fontSize:16, marginBottom:8 }}>Sprejemljive meje — MACO kalkulator</div>
                  <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(220px,1fr))', gap:12 }}>
                    <label>NOEL (mg/dan)
                      <input type="number" value={maco.NOEL_mg_day} onChange={e=>setMaco(v=>({...v,NOEL_mg_day:Number(e.target.value)}))} />
                    </label>
                    <label>Velikost serije B (kg)
                      <input type="number" value={maco.batchB_kg} onChange={e=>setMaco(v=>({...v,batchB_kg:Number(e.target.value)}))} />
                    </label>
                    <label>Dnevni odmerek B (g)
                      <input type="number" value={maco.dailyDoseB_g} onChange={e=>setMaco(v=>({...v,dailyDoseB_g:Number(e.target.value)}))} />
                    </label>
                    <label>Varnostni faktor
                      <input type="number" value={maco.safetyFactor} onChange={e=>setMaco(v=>({...v,safetyFactor:Number(e.target.value)}))} />
                    </label>
                    <label>Kontaktna površina (m²)
                      <input type="number" value={maco.contactArea_m2} onChange={e=>setMaco(v=>({...v,contactArea_m2:Number(e.target.value)}))} />
                    </label>
                  </div>
                  <div style={{ display:'grid', gridTemplateColumns:'1fr 1fr 1fr', gap:12, marginTop:12 }}>
                    <div className="metric"><div className="metric-label">MACO (mg)</div><div className="metric-value">{calcMACOmg().toFixed(3)}</div></div>
                    <div className="metric"><div className="metric-label">MACO (µg/cm²)</div><div className="metric-value">{calcMACOugPerCm2().toFixed(3)}</div></div>
                    <div className="metric"><div className="metric-label">Pravilo 10 ppm</div><div className="metric-value">{(10).toFixed(0)} ppm</div></div>
                  </div>
                  <div style={{ marginTop:10, padding:12, background:'rgba(6,182,212,0.08)', border:'1px solid rgba(6,182,212,0.25)', borderRadius:10, fontSize:12, color:'#cbd5e1' }}>
                    • Toksikološki pristop (NOEL/ADI) • Pravilo 10 ppm • 0,1% terapevtske doze • Vizualna čistost. Uporabimo strožjo mejo.
                  </div>
                </div>
              )}

              {active==='methods' && (
                <div style={{ padding:16, background:'rgba(255,255,255,0.04)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ color:'#e6eef8', fontWeight:800, fontSize:16, marginBottom:8 }}>Validacija analitskih metod</div>
                  <div style={{ display:'grid', gap:10 }}>
                    {methods.map((m, i) => (
                      <div key={i} style={{ background:'rgba(255,255,255,0.03)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12 }}>
                        <div style={{ display:'flex', justifyContent:'space-between', alignItems:'center', gap:12 }}>
                          <div>
                            <div style={{ fontWeight:700, color:'#e6eef8' }}>{m.name}</div>
                            <div style={{ fontSize:12, color:'#94a3b8' }}>LOQ {m.LOQ} • LOD {m.LOD} • Specifičnost {m.specificity ? '✓' : '✗'}</div>
                          </div>
                          <button className="btn-primary" onClick={()=>{
                            const res = spikeRecoveries(100)
                            setMethods(prev => prev.map((mm,idx)=> idx===i ? { ...mm, results: res } : mm))
                          }}>🧪 Spike + Recovery</button>
                        </div>
                        {m.results.length>0 && (
                          <div style={{ marginTop:8 }}>
                            <div style={{ display:'grid', gridTemplateColumns:'repeat(6,1fr)', gap:6 }}>
                              {m.results.map((v,j)=> (
                                <div key={j} style={{ background:'rgba(124,58,237,0.15)', border:'1px solid rgba(124,58,237,0.35)', borderRadius:8, padding:8, textAlign:'center', color:'#e6eef8', fontWeight:700 }}>{v.toFixed(1)}%</div>
                              ))}
                            </div>
                            {(() => {
                              const mean = m.results.reduce((s,x)=>s+x,0)/m.results.length
                              const sd = Math.sqrt(m.results.reduce((s,x)=>s+(x-mean)*(x-mean),0)/Math.max(1,m.results.length-1))
                              const rsd = (sd/mean)*100
                              return (
                                <div style={{ display:'grid', gridTemplateColumns:'repeat(3,1fr)', gap:12, marginTop:10 }}>
                                  <div className="metric"><div className="metric-label">Mean</div><div className="metric-value">{mean.toFixed(1)}%</div></div>
                                  <div className="metric"><div className="metric-label">SD</div><div className="metric-value">{sd.toFixed(2)}</div></div>
                                  <div className="metric"><div className="metric-label">RSD</div><div className="metric-value">{rsd.toFixed(1)}%</div></div>
                                </div>
                              )
                            })()}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {active==='worst' && (
                <div style={{ padding:16, background:'rgba(255,255,255,0.04)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ color:'#e6eef8', fontWeight:800, fontSize:16, marginBottom:8 }}>Worst-case matrika</div>
                  <div style={{ overflowX:'auto' }}>
                    <table style={{ width:'100%', borderCollapse:'separate', borderSpacing:8 }}>
                      <thead>
                        <tr>
                          <th style={{textAlign:'left',color:'#94a3b8'}}>Produkt \ Oprema</th>
                          {equipments.map((e,i)=>(<th key={i} style={{textAlign:'center', color:'#94a3b8'}}>{e}</th>))}
                        </tr>
                      </thead>
                      <tbody>
                        {products.map((p,pi)=> (
                          <tr key={pi}>
                            <td style={{color:'#e6eef8',fontWeight:700}}>{p.name}</td>
                            {equipments.map((e,ei)=> {
                              const key = `${pi}-${ei}`
                              const v = testedCells[key]
                              const bg = v==null ? 'rgba(255,255,255,0.03)' : (v<10 ? 'rgba(34,197,94,0.18)' : 'rgba(239,68,68,0.18)')
                              const br = v==null ? 'rgba(255,255,255,0.08)' : (v<10 ? 'rgba(34,197,94,0.5)' : 'rgba(239,68,68,0.5)')
                              return (
                                <td key={ei} onClick={()=>testCell(pi,ei)} style={{cursor:'pointer', background:bg, border:`1px solid ${br}`, borderRadius:8, padding:10, textAlign:'center', color:'#e6eef8'}}>
                                  {v==null ? '🧪 Test' : (<><div style={{fontWeight:800}}>{v.toFixed(2)}</div><div style={{fontSize:11,color:'#94a3b8'}}>µg/cm²</div></>)}
                                </td>
                              )
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                  <div style={{ marginTop:10, padding:12, background:'rgba(249,115,22,0.08)', border:'1px solid rgba(249,115,22,0.35)', borderRadius:10, fontSize:12, color:'#cbd5e1' }}>
                    Kliknite celice za test. Nizka topnost in kompleksna oprema povečata ostanke.
                  </div>
                </div>
              )}

              {active==='timing' && (
                <div style={{ padding:16, background:'rgba(255,255,255,0.04)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ color:'#e6eef8', fontWeight:800, fontSize:16, marginBottom:8 }}>Časovni intervali (Dirty & Clean Hold)</div>
                  <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(260px,1fr))', gap:12 }}>
                    <label>Dirty Hold (h)
                      <input type="range" min={1} max={96} value={timing.dirtyHoldH} onChange={e=>setTiming(v=>({...v,dirtyHoldH:Number(e.target.value)}))} />
                      <div style={{color:'#e6eef8',fontWeight:700}}>{timing.dirtyHoldH}h</div>
                    </label>
                    <label>Clean Hold (dni)
                      <input type="range" min={1} max={30} value={timing.cleanHoldD} onChange={e=>setTiming(v=>({...v,cleanHoldD:Number(e.target.value)}))} />
                      <div style={{color:'#e6eef8',fontWeight:700}}>{timing.cleanHoldD} dni</div>
                    </label>
                    <label>Temperatura (°C)
                      <input type="number" value={timing.tempC} onChange={e=>setTiming(v=>({...v,tempC:Number(e.target.value)}))} />
                    </label>
                    <label>Vlažnost (%)
                      <input type="number" value={timing.humidityPct} onChange={e=>setTiming(v=>({...v,humidityPct:Number(e.target.value)}))} />
                    </label>
                  </div>

                  <div style={{ marginTop:10, display:'grid', gridTemplateColumns:'1fr 1fr 1fr', gap:12 }}>
                    <div className="metric"><div className="metric-label">Mikrob. faktor (dirty)</div><div className="metric-value">{microbialAt(timing.dirtyHoldH).toFixed(2)}×</div></div>
                    <div className="metric"><div className="metric-label">Mikrob. faktor (clean)</div><div className="metric-value">{microbialAt(timing.cleanHoldD*24).toFixed(2)}×</div></div>
                    <div className="metric"><div className="metric-label">Tveganje</div><div className="metric-value">{(microbialAt(timing.cleanHoldD*24) > 10 ? 'VISOKO' : 'NIZKO')}</div></div>
                  </div>

                  <div style={{ marginTop:10, padding:12, background:'rgba(239,68,68,0.08)', border:'1px solid rgba(239,68,68,0.35)', borderRadius:10, fontSize:12, color:'#cbd5e1' }}>
                    Priporočilo: dirty hold &lt; 24h, clean hold ≤ 7 dni; preverite mikrobiološko rast in degradacijo ostankov.
                  </div>
                </div>
              )}

            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Analytical Method Validation (AMV) Simulator (Lesson 109)
export function AnalyticalMethodValidationSimulator() {
  const [activeTab, setActiveTab] = useState<'specificity' | 'accuracy' | 'linearity' | 'lodloq' | 'robustness'>('specificity')

  // Specificity/selectivity
  const [interferents, setInterferents] = useState<Record<string, boolean>>({
    placebo: false,
    impurityA: false,
    impurityB: false,
    matrix: false
  })

  // Accuracy and precision (replicates)
  const [replicates, setReplicates] = useState<number[]>([])
  const target = 100 // nominal recovery %

  // Linearity/range
  const [calibPoints, setCalibPoints] = useState<Array<{ c: number; a: number }>>([
    { c: 50, a: 0.48 },
    { c: 75, a: 0.73 },
    { c: 100, a: 0.98 },
    { c: 125, a: 1.23 },
    { c: 150, a: 1.48 }
  ])

  // LOD/LOQ
  const [slope, setSlope] = useState(0.0098) // AU per unit concentration
  const [noiseSigma, setNoiseSigma] = useState(0.002) // AU

  // Robustness/repeatability toggles
  const [robust, setRobust] = useState({
    pH: 0, // -1,0,+1 => ±0.1 pH
    temp: 0, // ±2°C
    flow: 0, // ±10%
    column: 0, // 0 same, 1 new batch
    analyst: 0 // 0 same, 1 different
  })

  // Left canvas 3D-like lab visualization
  const canvasRef = useRef<HTMLCanvasElement>(null)
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let t = 0
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      t += 0.02

      // Bench
      ctx.fillStyle = '#1e293b'
      ctx.fillRect(10, 130, 300, 40)

      // Instrument body
      ctx.fillStyle = '#0ea5e9'
      ctx.fillRect(30, 70, 120, 50)
      // Screen
      ctx.fillStyle = '#0b1220'
      ctx.fillRect(40, 80, 60, 30)
      ctx.fillStyle = '#67e8f9'
      ctx.font = '9px monospace'
      ctx.fillText('UV-Vis', 45, 92)
      ctx.fillText(`Abs: ${(0.5 + Math.sin(t) * 0.05).toFixed(3)}`, 45, 104)

      // Chromatogram screen on right
      ctx.fillStyle = '#0284c7'
      ctx.fillRect(200, 50, 90, 60)
      ctx.strokeStyle = '#67e8f9'
      ctx.strokeRect(205, 55, 80, 50)
      // Animated peak
      ctx.beginPath()
      ctx.moveTo(205, 100)
      for (let x = 205; x <= 285; x++) {
        const phase = (x - 205) / 80
        const y = 100 - Math.exp(-Math.pow((phase - 0.5) * (6 + Math.sin(t)), 2) * 8) * 35
        ctx.lineTo(x, y)
      }
      ctx.stroke()

      // Calibration vials
      for (let i = 0; i < 5; i++) {
        ctx.fillStyle = '#075985'
        const vx = 60 + i * 26
        const vy = 130
        ctx.fillRect(vx, vy - 25, 14, 25)
        ctx.fillStyle = '#38bdf8'
        ctx.fillRect(vx + 2, vy - 12, 10, 12 + Math.sin(t + i) * 1)
      }

      // Status light indicates tab state
      const statusColors: Record<string, string> = {
        specificity: '#22c55e',
        accuracy: '#f59e0b',
        linearity: '#06b6d4',
        lodloq: '#a78bfa',
        robustness: '#ef4444'
      }
      ctx.fillStyle = statusColors[activeTab]
      ctx.beginPath()
      ctx.arc(170, 40, 7 + Math.sin(t * 4) * 1.5, 0, Math.PI * 2)
      ctx.fill()

      requestAnimationFrame(animate)
    }
    animate()
  }, [activeTab])

  // Helpers
  const mean = (arr: number[]) => (arr.length ? arr.reduce((a, b) => a + b, 0) / arr.length : 0)
  const sd = (arr: number[]) => {
    if (arr.length < 2) return 0
    const m = mean(arr)
    return Math.sqrt(arr.reduce((s, x) => s + Math.pow(x - m, 2), 0) / (arr.length - 1))
  }
  const rsd = (arr: number[]) => {
    const m = mean(arr)
    return m ? (sd(arr) / m) * 100 : 0
  }
  // Linear regression R^2
  function rSquared(points: Array<{ c: number; a: number }>) {
    const n = points.length
    const sumX = points.reduce((s, p) => s + p.c, 0)
    const sumY = points.reduce((s, p) => s + p.a, 0)
    const sumXY = points.reduce((s, p) => s + p.c * p.a, 0)
    const sumX2 = points.reduce((s, p) => s + p.c * p.c, 0)
    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)
    const intercept = sumY / n - (slope * sumX) / n
    const ssTot = points.reduce((s, p) => s + Math.pow(p.a - sumY / n, 2), 0)
    const ssRes = points.reduce((s, p) => s + Math.pow(p.a - (slope * p.c + intercept), 2), 0)
    return { r2: 1 - ssRes / ssTot, slope, intercept }
  }

  // Acceptance criteria
  const accCriteria = {
    recoveryLow: 98,
    recoveryHigh: 102,
    precisionRSD: 2,
    linearityR2: 0.999
  }

  const lod = (3.3 * noiseSigma) / slope
  const loq = (10 * noiseSigma) / slope

  const tabs = {
    specificity: { icon: '🎯', title: 'Specifičnost in selektivnost', color: '#22c55e' },
    accuracy: { icon: '📏', title: 'Točnost in natančnost', color: '#f59e0b' },
    linearity: { icon: '📈', title: 'Območje in linearnost', color: '#06b6d4' },
    lodloq: { icon: '🔬', title: 'LOD in LOQ', color: '#a78bfa' },
    robustness: { icon: '🛡️', title: 'Robustnost in ponovljivost', color: '#ef4444' }
  }

  const overallPass = (() => {
    const { r2 } = rSquared(calibPoints)
    const m = mean(replicates)
    const withinAcc = m >= accCriteria.recoveryLow && m <= accCriteria.recoveryHigh
    const withinPrec = rsd(replicates) <= accCriteria.precisionRSD && replicates.length >= 6
    const specOK = Object.values(interferents).every(v => !v)
    const robustOK = Object.values(robust).reduce((s, v) => s + (v !== 0 ? 1 : 0), 0) <= 2 // small changes ok
    return specOK && withinAcc && withinPrec && r2 >= accCriteria.linearityR2 && robustOK
  })()

  const containerStyle: React.CSSProperties = { padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }

  return (
    <div style={containerStyle}>
      {/* Tab navigation */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: 8, marginBottom: 16 }}>
        {Object.entries(tabs).map(([key, v]) => (
          <motion.button
            key={key}
            onClick={() => setActiveTab(key as any)}
            style={{
              padding: 10,
              background: activeTab === key ? `linear-gradient(135deg, ${v.color}, ${v.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeTab === key ? `2px solid ${v.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 8,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 18, marginBottom: 4 }}>{v.icon}</div>
            <div style={{ fontSize: 11, color: '#e6eef8', fontWeight: 700 }}>{v.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '360px 1fr', gap: 16 }}>
        {/* Left: 3D lab viz + overall result */}
        <div>
          <div style={{ marginBottom: 10, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Laboratorijska Vizualizacija</div>
          <canvas ref={canvasRef} width={320} height={190} style={{ width: '100%', height: 'auto', background: 'rgba(0,0,0,0.3)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.3)' }} />

          <div style={{ marginTop: 12, padding: 14, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 13, color: '#67e8f9', fontWeight: 700, marginBottom: 10 }}>AMV Povzetek kriterijev</div>
            {/* Summary bars */}
            {[{ label: 'Specifičnost', ok: Object.values(interferents).every(v => !v), color: '#22c55e' },
              { label: 'Točnost/Natančnost', ok: (() => { const m = mean(replicates); return m >= accCriteria.recoveryLow && m <= accCriteria.recoveryHigh && rsd(replicates) <= accCriteria.precisionRSD && replicates.length >= 6 })(), color: '#f59e0b' },
              { label: 'Linearnost', ok: rSquared(calibPoints).r2 >= accCriteria.linearityR2, color: '#06b6d4' },
              { label: 'LOD/LOQ', ok: loq < 10 && lod < 5, color: '#a78bfa' },
              { label: 'Robustnost', ok: Object.values(robust).reduce((s, v) => s + (v !== 0 ? 1 : 0), 0) <= 2, color: '#ef4444' }
            ].map((item, i) => (
              <div key={i} style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8 }}>
                <div style={{ width: 130, fontSize: 11, color: '#cbd5e1' }}>{item.label}</div>
                <div style={{ flex: 1, height: 8, background: 'rgba(255,255,255,0.06)', borderRadius: 4, overflow: 'hidden' }}>
                  <div style={{ height: '100%', width: item.ok ? '100%' : '30%', background: item.color, borderRadius: 4 }} />
                </div>
                <div style={{ width: 40, textAlign: 'right', fontSize: 11, color: item.ok ? '#6ee7b7' : '#fca5a5', fontWeight: 700 }}>{item.ok ? 'PASS' : 'CHECK'}</div>
              </div>
            ))}

            <div style={{ marginTop: 10, padding: 10, background: overallPass ? 'rgba(34,197,94,0.15)' : 'rgba(245,158,11,0.15)', borderRadius: 8, border: `1px solid ${overallPass ? '#22c55e' : '#f59e0b'}66`, textAlign: 'center' }}>
              <div style={{ fontSize: 20, marginBottom: 4 }}>{overallPass ? '✅' : '⚠️'}</div>
              <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 700 }}>{overallPass ? 'Metoda ustreza AMV kriterijem' : 'Nekateri kriteriji zahtevajo prilagoditve'}</div>
            </div>
          </div>
        </div>

        {/* Right: Active panel */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div key={activeTab} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }} transition={{ duration: 0.25 }}>
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', border: '1px solid rgba(255,255,255,0.08)', borderRadius: 12, minHeight: 420 }}>
                {activeTab === 'specificity' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>Specifičnost in selektivnost</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 10 }}>Potrdi, da interferenti ne dajejo signala na retenzijskem času ali λmax analita.</div>
                    {Object.entries(interferents).map(([k, v]) => (
                      <label key={k} style={{ display: 'flex', alignItems: 'center', gap: 10, padding: 10, marginBottom: 8, background: v ? 'rgba(239,68,68,0.1)' : 'rgba(255,255,255,0.02)', border: `1px solid ${v ? '#ef4444' : 'rgba(255,255,255,0.08)'}`, borderRadius: 8 }}>
                        <input type="checkbox" checked={v} onChange={() => setInterferents(prev => ({ ...prev, [k]: !prev[k] }))} />
                        <div style={{ fontSize: 12, color: '#cbd5e1', textTransform: 'capitalize' }}>{k}</div>
                        <div style={{ marginLeft: 'auto', fontSize: 11, color: v ? '#fca5a5' : '#6ee7b7', fontWeight: 700 }}>{v ? 'INTERFERIRA' : 'BREZ INTERFERENCE'}</div>
                      </label>
                    ))}
                    <div style={{ marginTop: 10, padding: 10, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1' }}>
                      ✓ Sprejemljivo: Ni signala interferentov ±2% na retenzijskem času/λmax analita.
                    </div>
                  </div>
                )}

                {activeTab === 'accuracy' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>Točnost in natančnost</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 10 }}>Ustvari 6 ponovitev (n≥6), izračunaj Recovery (%) in %RSD.</div>
                    <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap', marginBottom: 8 }}>
                      <button onClick={() => setReplicates(prev => (prev.length >= 6 ? prev : [...prev, 98 + Math.random() * 4]))} style={{ padding: '8px 14px', background: 'linear-gradient(135deg, #f59e0b, #d97706)', border: 'none', borderRadius: 6, color: '#fff', fontSize: 12, fontWeight: 700, cursor: 'pointer' }}>➕ Dodaj ponovitev</button>
                      <button onClick={() => setReplicates([])} style={{ padding: '8px 14px', background: 'rgba(239,68,68,0.2)', border: '1px solid rgba(239,68,68,0.3)', borderRadius: 6, color: '#fca5a5', fontSize: 12, fontWeight: 700, cursor: 'pointer' }}>🔄 Ponastavi</button>
                    </div>
                    {replicates.length > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(90px, 1fr))', gap: 8, marginBottom: 10 }}>
                        {replicates.map((r, i) => (
                          <div key={i} style={{ padding: 8, background: 'rgba(255,255,255,0.03)', border: '1px solid rgba(255,255,255,0.08)', borderRadius: 6, textAlign: 'center', fontSize: 12, color: '#cbd5e1' }}>R{i + 1}: {r.toFixed(2)}%</div>
                        ))}
                      </div>
                    )}
                    <div style={{ display: 'flex', gap: 12, flexWrap: 'wrap' }}>
                      <Metric label="Mean Recovery" value={`${mean(replicates).toFixed(2)}%`} ok={mean(replicates) >= accCriteria.recoveryLow && mean(replicates) <= accCriteria.recoveryHigh} />
                      <Metric label="%RSD" value={`${rsd(replicates).toFixed(2)}%`} ok={rsd(replicates) <= accCriteria.precisionRSD && replicates.length >= 6} />
                      <Metric label="n" value={`${replicates.length}`} ok={replicates.length >= 6} />
                    </div>
                    <div style={{ marginTop: 10, fontSize: 11, color: '#94a3b8' }}>Kriteriji: Točnost {accCriteria.recoveryLow}–{accCriteria.recoveryHigh}% | Natančnost %RSD ≤ {accCriteria.precisionRSD}% | n ≥ 6</div>
                  </div>
                )}

                {activeTab === 'linearity' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>Linearnost in območje</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 10 }}>Uredi kalibracijske točke, preveri R² in regresijo.</div>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 10 }}>
                      <div>
                        {calibPoints.map((p, i) => (
                          <div key={i} style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 6 }}>
                            <input type="number" value={p.c} onChange={e => { const v = [...calibPoints]; v[i] = { ...v[i], c: parseFloat(e.target.value || '0') }; setCalibPoints(v) }} style={{ width: 70 }} />
                            <span style={{ fontSize: 12, color: '#94a3b8' }}>→</span>
                            <input type="number" step="0.001" value={p.a} onChange={e => { const v = [...calibPoints]; v[i] = { ...v[i], a: parseFloat(e.target.value || '0') }; setCalibPoints(v) }} style={{ width: 80 }} />
                          </div>
                        ))}
                      </div>
                      <div style={{ background: 'rgba(0,0,0,0.2)', borderRadius: 8, height: 160, position: 'relative' }}>
                        {/* Simple scatter plot */}
                        <svg width="100%" height="100%" viewBox="0 0 260 160">
                          <line x1="30" y1="140" x2="250" y2="140" stroke="#475569" strokeWidth="2" />
                          <line x1="30" y1="20" x2="30" y2="140" stroke="#475569" strokeWidth="2" />
                          {calibPoints.map((p, i) => (
                            <circle key={i} cx={30 + (p.c - calibPoints[0].c) * (200 / Math.max(1, calibPoints[calibPoints.length - 1].c - calibPoints[0].c))} cy={140 - (p.a - 0.4) * 160} r="4" fill="#06b6d4" />
                          ))}
                        </svg>
                      </div>
                    </div>
                    <div style={{ display: 'flex', gap: 12, marginTop: 8, flexWrap: 'wrap' }}>
                      {(() => { const { r2, slope, intercept } = rSquared(calibPoints); return (
                        <>
                          <Metric label="R²" value={r2.toFixed(4)} ok={r2 >= accCriteria.linearityR2} />
                          <Metric label="Slope" value={slope.toFixed(5)} ok={true} />
                          <Metric label="Intercept" value={intercept.toFixed(3)} ok={Math.abs(intercept) < 0.05} />
                        </>
                      ) })()}
                    </div>
                    <div style={{ marginTop: 10, fontSize: 11, color: '#94a3b8' }}>Kriteriji: R² ≥ {accCriteria.linearityR2} | Nelinearnost minimalna | Residuali brez trendov</div>
                  </div>
                )}

                {activeTab === 'lodloq' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>Meja zaznave (LOD) in določanja (LOQ)</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 10 }}>Formula: LOD = 3.3·σ/S, LOQ = 10·σ/S; σ = šum, S = naklon.</div>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, alignItems: 'center' }}>
                      <label style={{ display: 'flex', alignItems: 'center', gap: 8, fontSize: 12, color: '#cbd5e1' }}>
                        σ (Noise): <input type="number" step="0.0001" value={noiseSigma} onChange={e => setNoiseSigma(parseFloat(e.target.value || '0'))} style={{ width: 90 }} /> AU
                      </label>
                      <label style={{ display: 'flex', alignItems: 'center', gap: 8, fontSize: 12, color: '#cbd5e1' }}>
                        S (Slope): <input type="number" step="0.0001" value={slope} onChange={e => setSlope(parseFloat(e.target.value || '0'))} style={{ width: 90 }} /> AU/U
                      </label>
                    </div>
                    <div style={{ display: 'flex', gap: 12, marginTop: 8, flexWrap: 'wrap' }}>
                      <Metric label="LOD" value={lod.toFixed(3)} ok={true} />
                      <Metric label="LOQ" value={loq.toFixed(3)} ok={true} />
                    </div>
                    <div style={{ marginTop: 10, fontSize: 11, color: '#94a3b8' }}>Opomba: Preveri praktični LOD/LOQ z eksperimentom serij razredčitev.</div>
                  </div>
                )}

                {activeTab === 'robustness' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>Robustnost in ponovljivost</div>
                    <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 10 }}>Simuliraj majhne spremembe metode in preveri učinek.</div>
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))', gap: 8 }}>
                      {[{ key: 'pH', label: 'pH medija ±0.1', range: [-1, 1] }, { key: 'temp', label: 'Temperatura ±2°C', range: [-1, 1] }, { key: 'flow', label: 'Pretok ±10%', range: [-1, 1] }, { key: 'column', label: 'Nova serija kolone', range: [0, 1] }, { key: 'analyst', label: 'Drug analitik', range: [0, 1] }].map((cfg: any, i) => (
                        <div key={i} style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                          <div style={{ fontSize: 12, color: '#cbd5e1', marginBottom: 6 }}>{cfg.label}</div>
                          {cfg.key === 'pH' || cfg.key === 'temp' || cfg.key === 'flow' ? (
                            <input type="range" min={-1} max={1} step={1} value={(robust as any)[cfg.key]} onChange={e => setRobust(prev => ({ ...prev, [cfg.key]: parseInt(e.target.value) }))} />
                          ) : (
                            <label style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                              <input type="checkbox" checked={(robust as any)[cfg.key] === 1} onChange={() => setRobust(prev => ({ ...prev, [cfg.key]: (prev as any)[cfg.key] ? 0 : 1 }))} />
                              <span style={{ fontSize: 12, color: '#94a3b8' }}>Vključi</span>
                            </label>
                          )}
                        </div>
                      ))}
                    </div>
                    <div style={{ display: 'flex', gap: 12, marginTop: 10, flexWrap: 'wrap' }}>
                      {(() => {
                        // Simple robustness scoring: more toggles -> bigger drift
                        const changes = Object.values(robust).reduce((s, v) => s + (v !== 0 ? 1 : 0), 0)
                        const rtDrift = changes * 0.02 // 2% per change
                        const areaDrift = changes * 1.5 // %
                        return (
                          <>
                            <Metric label="RT Drift" value={`${(rtDrift * 100).toFixed(1)}%`} ok={rtDrift <= 0.05} />
                            <Metric label="Area Drift" value={`${areaDrift.toFixed(1)}%`} ok={areaDrift <= 5} />
                            <Metric label="Repeatability (%RSD)" value={`${Math.max(0.8, 0.8 + changes * 0.2).toFixed(2)}%`} ok={Math.max(0.8, 0.8 + changes * 0.2) <= 2} />
                          </>
                        )
                      })()}
                    </div>
                    <div style={{ marginTop: 10, fontSize: 11, color: '#94a3b8' }}>Kriteriji: Majhne spremembe ne smejo bistveno vplivati na rezultate (RT drift ≤5%, Area drift ≤5%, ponovljivost %RSD ≤2%).</div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

function Metric(props: { label: string; value: string; ok: boolean }) {
  const { label, value, ok } = props
  return (
    <div style={{ padding: 10, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: `1px solid ${ok ? '#22c55e' : '#f59e0b'}33`, minWidth: 140 }}>
      <div style={{ fontSize: 10, color: '#94a3b8', marginBottom: 4 }}>{label}</div>
      <div style={{ fontSize: 16, color: '#e6eef8', fontWeight: 700 }}>{value}</div>
      <div style={{ fontSize: 10, color: ok ? '#6ee7b7' : '#fbbf24', marginTop: 2 }}>{ok ? 'OK' : 'Preveri'}</div>
    </div>
  )
}

// (Removed) Media Fill Game Simulator — replaced by pure 3D aseptic process simulator per requirements

// Design Qualification (DQ) Simulator (Lesson 109)
export function DesignQualificationSimulator() {
  const [activeStep, setActiveStep] = useState<'requirements' | 'specifications' | 'suitability' | 'critical-params' | 'documentation'>('requirements')
  const [requirementChecks, setRequirementChecks] = useState<Record<string, boolean>>({
    gmp: false,
    iso: false,
    fda: false,
    annex1: false
  })
  const [criticalParams, setCriticalParams] = useState<Array<{ name: string; target: string; checked: boolean }>>([
    { name: 'Temperatura', target: '20-24°C', checked: false },
    { name: 'Vlažnost', target: '45-55% RH', checked: false },
    { name: 'Tlačne razlike', target: '≥15 Pa', checked: false },
    { name: 'Izmenjave zraka', target: '≥20 ACH', checked: false },
    { name: 'HEPA učinkovitost', target: '≥99.995%', checked: false }
  ])
  const [specReview, setSpecReview] = useState<'pending' | 'approved' | 'rejected'>('pending')
  const canvasRef = useRef<HTMLCanvasElement>(null)

  // 3D rotating document visualization
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let rotation = 0

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      
      rotation += 0.01

      // Draw 3D document stack
      const docs = [
        { label: 'URS', color: '#06b6d4', offset: 0 },
        { label: 'FDS', color: '#0284c7', offset: 20 },
        { label: 'DQ', color: '#0369a1', offset: 40 }
      ]

      docs.forEach((doc, i) => {
        const x = 150 + Math.sin(rotation + i * 0.5) * 30
        const y = 100 + doc.offset + Math.cos(rotation + i * 0.5) * 10
        const z = Math.cos(rotation + i * 0.5)

        ctx.save()
        ctx.globalAlpha = 0.7 + z * 0.3

        // Document rectangle with 3D effect
        ctx.fillStyle = doc.color
        ctx.fillRect(x - 40, y - 30, 80, 60)
        
        // Highlight edge
        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)'
        ctx.fillRect(x - 40, y - 30, 80, 5)

        // Label
        ctx.fillStyle = '#fff'
        ctx.font = 'bold 14px Inter'
        ctx.textAlign = 'center'
        ctx.textBaseline = 'middle'
        ctx.fillText(doc.label, x, y)

        ctx.restore()
      })

      requestAnimationFrame(animate)
    }

    animate()
  }, [])

  const steps = {
    requirements: {
      icon: '📋',
      title: 'Preverjanje zahtev',
      color: '#06b6d4',
      desc: 'Zagotovitev skladnosti z GMP, ISO, FDA in Annex 1'
    },
    specifications: {
      icon: '📐',
      title: 'Pregled specifikacij',
      color: '#0284c7',
      desc: 'Analiza tehničnih načrtov in URS/FDS dokumentacije'
    },
    suitability: {
      icon: '✓',
      title: 'Primernost za namen',
      color: '#0369a1',
      desc: 'Potrditev, da zasnova izpolnjuje poslovne potrebe'
    },
    'critical-params': {
      icon: '🎯',
      title: 'Kritični parametri',
      color: '#075985',
      desc: 'Identifikacija ključnih parametrov za nadzor'
    },
    documentation: {
      icon: '📄',
      title: 'Dokumentiranje',
      color: '#0c4a6e',
      desc: 'DQ Report z vsemi dokazi in podpisi'
    }
  }

  const requirementProgress = Object.values(requirementChecks).filter(Boolean).length
  const criticalParamsProgress = criticalParams.filter(p => p.checked).length

  return (
    <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.08)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
      {/* Step navigation */}
      <div style={{ display: 'flex', gap: 8, marginBottom: 20, overflowX: 'auto', paddingBottom: 8 }}>
        {Object.entries(steps).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActiveStep(key as any)}
            style={{
              flex: '0 0 auto',
              minWidth: 120,
              padding: 12,
              background: activeStep === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeStep === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 10,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 24, marginBottom: 4 }}>{val.icon}</div>
            <div style={{ fontSize: 11, color: '#e6eef8', fontWeight: 600, lineHeight: 1.3 }}>{val.title}</div>
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
        {/* Left: 3D Visualization */}
        <div>
          <div style={{ marginBottom: 12, color: '#67e8f9', fontWeight: 700, fontSize: 14 }}>3D Vizualizacija dokumentacije</div>
          <canvas
            ref={canvasRef}
            width={300}
            height={200}
            style={{
              width: '100%',
              height: 'auto',
              background: 'rgba(0,0,0,0.3)',
              borderRadius: 12,
              border: '1px solid rgba(6, 182, 212, 0.3)'
            }}
          />
          <div style={{ marginTop: 12, fontSize: 11, color: '#94a3b8', textAlign: 'center', lineHeight: 1.5 }}>
            URS (User Requirements Specification)<br />
            FDS (Functional Design Specification)<br />
            DQ (Design Qualification Protocol)
          </div>
        </div>

        {/* Right: Active step content */}
        <div>
          <AnimatePresence mode="wait">
            <motion.div
              key={activeStep}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
            >
              <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                  <div style={{ fontSize: 36 }}>{steps[activeStep].icon}</div>
                  <div>
                    <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 16 }}>{steps[activeStep].title}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 2 }}>{steps[activeStep].desc}</div>
                  </div>
                </div>

                {activeStep === 'requirements' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Regulatorne zahteve</div>
                    {[
                      { key: 'gmp', label: 'EU GMP (Good Manufacturing Practice)', std: 'EudraLex Vol. 4' },
                      { key: 'iso', label: 'ISO 14644 (Cleanroom Standards)', std: 'Parts 1-9' },
                      { key: 'fda', label: 'FDA 21 CFR Part 211', std: 'US Regulations' },
                      { key: 'annex1', label: 'Annex 1 (Sterile Products)', std: 'Rev. 2022' }
                    ].map(item => (
                      <label
                        key={item.key}
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          padding: 10,
                          marginBottom: 8,
                          background: requirementChecks[item.key] ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.02)',
                          border: `1px solid ${requirementChecks[item.key] ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                          borderRadius: 8,
                          cursor: 'pointer'
                        }}
                      >
                        <input
                          type="checkbox"
                          checked={requirementChecks[item.key]}
                          onChange={() => setRequirementChecks(prev => ({ ...prev, [item.key]: !prev[item.key] }))}
                          style={{ marginRight: 10, width: 16, height: 16 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{item.label}</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>{item.std}</div>
                        </div>
                        {requirementChecks[item.key] && <span style={{ fontSize: 16, color: '#06b6d4' }}>✓</span>}
                      </label>
                    ))}
                    <div style={{ marginTop: 12, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, fontSize: 12, color: '#cbd5e1' }}>
                      Napredek: {requirementProgress}/4 zahtev preverjenih
                    </div>
                  </div>
                )}

                {activeStep === 'specifications' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Pregled načrtov in specifikacij</div>
                    <div style={{ display: 'grid', gap: 10 }}>
                      {[
                        { doc: 'P&ID Diagram', status: 'approved', icon: '✅' },
                        { doc: 'HVAC Layout', status: 'approved', icon: '✅' },
                        { doc: 'Equipment List', status: 'pending', icon: '⏳' },
                        { doc: 'URS Document', status: 'approved', icon: '✅' },
                        { doc: 'Risk Assessment', status: 'approved', icon: '✅' }
                      ].map((item, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: i * 0.1 }}
                          style={{
                            padding: 12,
                            background: 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: '1px solid rgba(255,255,255,0.08)',
                            display: 'flex',
                            alignItems: 'center',
                            gap: 12
                          }}
                        >
                          <div style={{ fontSize: 24 }}>{item.icon}</div>
                          <div style={{ flex: 1 }}>
                            <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{item.doc}</div>
                            <div style={{ fontSize: 11, color: item.status === 'approved' ? '#6ee7b7' : '#fbbf24', marginTop: 2 }}>
                              {item.status === 'approved' ? 'Odobren' : 'V pregledu'}
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>💡 DQ pregled:</strong> Vsi načrti, diagrami in specifikacije morajo biti pregledani in odobreni pred začetkom IQ faze.
                    </div>
                  </div>
                )}

                {activeStep === 'suitability' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Potrditev primernosti</div>
                    <div style={{ display: 'flex', gap: 12, marginBottom: 16 }}>
                      <button
                        onClick={() => setSpecReview('approved')}
                        style={{
                          flex: 1,
                          padding: 14,
                          background: specReview === 'approved' ? 'linear-gradient(135deg, #22c55e, #16a34a)' : 'rgba(34,197,94,0.1)',
                          border: specReview === 'approved' ? '2px solid #22c55e' : '2px solid rgba(34,197,94,0.3)',
                          borderRadius: 10,
                          color: '#e6eef8',
                          fontSize: 14,
                          fontWeight: 600,
                          cursor: 'pointer'
                        }}
                      >
                        ✅ Primerno
                      </button>
                      <button
                        onClick={() => setSpecReview('rejected')}
                        style={{
                          flex: 1,
                          padding: 14,
                          background: specReview === 'rejected' ? 'linear-gradient(135deg, #ef4444, #dc2626)' : 'rgba(239,68,68,0.1)',
                          border: specReview === 'rejected' ? '2px solid #ef4444' : '2px solid rgba(239,68,68,0.3)',
                          borderRadius: 10,
                          color: '#e6eef8',
                          fontSize: 14,
                          fontWeight: 600,
                          cursor: 'pointer'
                        }}
                      >
                        ❌ Neprimerno
                      </button>
                    </div>

                    {specReview === 'approved' && (
                      <motion.div
                        initial={{ scale: 0.9, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        style={{ padding: 16, background: 'rgba(34,197,94,0.15)', border: '1px solid rgba(34,197,94,0.3)', borderRadius: 12 }}
                      >
                        <div style={{ fontSize: 14, color: '#6ee7b7', fontWeight: 700, marginBottom: 8 }}>✅ Zasnova odobrena</div>
                        <div style={{ fontSize: 12, color: '#cbd5e1', lineHeight: 1.6 }}>
                          • Zasnova izpolnjuje GMP zahteve<br />
                          • Tehnične specifikacije ustrezne<br />
                          • Primerno za proizvodnjo sterilnih izdelkov<br />
                          • Lahko se nadaljuje z IQ fazo
                        </div>
                      </motion.div>
                    )}

                    {specReview === 'rejected' && (
                      <motion.div
                        initial={{ scale: 0.9, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        style={{ padding: 16, background: 'rgba(239,68,68,0.15)', border: '1px solid rgba(239,68,68,0.3)', borderRadius: 12 }}
                      >
                        <div style={{ fontSize: 14, color: '#fca5a5', fontWeight: 700, marginBottom: 8 }}>❌ Zasnova zavrnjena</div>
                        <div style={{ fontSize: 12, color: '#cbd5e1', lineHeight: 1.6 }}>
                          • Manjkajoči podatki v URS<br />
                          • Neskladnost z Annex 1 zahtevami<br />
                          • Potrebna revizija P&ID<br />
                          • DQ protokol se mora posodobiti
                        </div>
                      </motion.div>
                    )}

                    {specReview === 'pending' && (
                      <div style={{ padding: 40, textAlign: 'center', background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '2px dashed rgba(255,255,255,0.1)' }}>
                        <div style={{ fontSize: 32, marginBottom: 8 }}>⏳</div>
                        <div style={{ fontSize: 13, color: '#94a3b8' }}>Izberi oceno primernosti</div>
                      </div>
                    )}
                  </div>
                )}

                {activeStep === 'critical-params' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>Identifikacija kritičnih parametrov</div>
                    {criticalParams.map((param, i) => (
                      <label
                        key={i}
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          padding: 10,
                          marginBottom: 8,
                          background: param.checked ? 'rgba(6,182,212,0.15)' : 'rgba(255,255,255,0.02)',
                          border: `1px solid ${param.checked ? '#06b6d4' : 'rgba(255,255,255,0.08)'}`,
                          borderRadius: 8,
                          cursor: 'pointer'
                        }}
                      >
                        <input
                          type="checkbox"
                          checked={param.checked}
                          onChange={() => {
                            const updated = [...criticalParams]
                            updated[i].checked = !updated[i].checked
                            setCriticalParams(updated)
                          }}
                          style={{ marginRight: 10, width: 16, height: 16 }}
                        />
                        <div style={{ flex: 1 }}>
                          <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{param.name}</div>
                          <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 2 }}>Cilj: {param.target}</div>
                        </div>
                        {param.checked && <span style={{ fontSize: 16, color: '#06b6d4' }}>🎯</span>}
                      </label>
                    ))}
                    <div style={{ marginTop: 12, padding: 10, background: 'rgba(6,182,212,0.1)', borderRadius: 8, fontSize: 12, color: '#cbd5e1' }}>
                      Identificirano: {criticalParamsProgress}/{criticalParams.length} parametrov
                    </div>
                  </div>
                )}

                {activeStep === 'documentation' && (
                  <div>
                    <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>DQ Report vsebina</div>
                    <div style={{ display: 'grid', gap: 8 }}>
                      {[
                        { section: 'Executive Summary', pages: '1-2', icon: '📝' },
                        { section: 'Regulatory Requirements', pages: '3-5', icon: '📋' },
                        { section: 'Design Specifications', pages: '6-12', icon: '📐' },
                        { section: 'Critical Parameters', pages: '13-15', icon: '🎯' },
                        { section: 'Risk Assessment', pages: '16-18', icon: '⚠️' },
                        { section: 'Approval Signatures', pages: '19', icon: '✍️' }
                      ].map((item, i) => (
                        <motion.div
                          key={i}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: i * 0.08 }}
                          style={{
                            padding: 10,
                            background: 'rgba(255,255,255,0.03)',
                            borderRadius: 8,
                            border: '1px solid rgba(255,255,255,0.08)',
                            display: 'flex',
                            alignItems: 'center',
                            gap: 10
                          }}
                        >
                          <div style={{ fontSize: 20 }}>{item.icon}</div>
                          <div style={{ flex: 1 }}>
                            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600 }}>{item.section}</div>
                            <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 2 }}>Strani: {item.pages}</div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                    <div style={{ marginTop: 12, padding: 12, background: 'rgba(6,182,212,0.08)', borderRadius: 8, border: '1px solid rgba(6,182,212,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.6 }}>
                      <strong style={{ color: '#67e8f9' }}>💡 Pomembno:</strong> DQ Report mora biti podpisan s strani QA, Engineering, Production in Management pred začetkom IQ.
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  )
}

// Validation Phases Diagram
export function ValidationPhases() {
  const phases = ['DQ', 'IQ', 'OQ', 'PQ']
  const [activePhase, setActivePhase] = useState(0)
  
  useEffect(() => {
    const interval = setInterval(() => {
      setActivePhase(prev => (prev + 1) % phases.length)
    }, 2000)
    return () => clearInterval(interval)
  }, [])
  
  return (
    <div style={{ width: '100%', padding: 20 }}>
      <svg viewBox="0 0 400 150" style={{ width: '100%', height: 'auto' }}>
        {phases.map((phase, i) => {
          const x = 50 + i * 90
          const isActive = i === activePhase
          const isPassed = i < activePhase
          
          return (
            <g key={i}>
              {/* Connection line */}
              {i < phases.length - 1 && (
                <motion.line
                  x1={x + 35}
                  y1={75}
                  x2={x + 55}
                  y2={75}
                  stroke={isPassed ? '#7c3aed' : '#334155'}
                  strokeWidth="3"
                  initial={{ pathLength: 0 }}
                  animate={{ pathLength: isPassed ? 1 : 0 }}
                />
              )}
              
              {/* Phase circle */}
              <motion.circle
                cx={x}
                cy={75}
                r={30}
                fill={isActive ? '#7c3aed' : isPassed ? '#8b5cf6' : '#1e293b'}
                stroke={isActive ? '#a78bfa' : '#475569'}
                strokeWidth="3"
                animate={{
                  scale: isActive ? 1.1 : 1,
                  boxShadow: isActive ? '0 0 20px #7c3aed' : 'none'
                }}
              />
              
              {/* Phase label */}
              <text
                x={x}
                y={80}
                fill="#fff"
                fontSize="16"
                fontWeight="bold"
                textAnchor="middle"
                fontFamily="Inter"
              >
                {phase}
              </text>
              
              {/* Checkmark for completed */}
              {isPassed && (
                <motion.text
                  x={x + 20}
                  y={60}
                  fill="#10b981"
                  fontSize="20"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                >
                  ✓
                </motion.text>
              )}
            </g>
          )
        })}
      </svg>
    </div>
  )
}

// Material Traceability Flow
export function TraceabilityFlow() {
  const [flow, setFlow] = useState(0)
  
  useEffect(() => {
    const interval = setInterval(() => {
      setFlow(prev => (prev + 0.02) % 1)
    }, 50)
    return () => clearInterval(interval)
  }, [])
  
  return (
    <svg viewBox="0 0 400 200" style={{ width: '100%', height: 'auto', background: 'rgba(15, 23, 42, 0.5)', borderRadius: 12 }}>
      {/* Nodes */}
      <circle cx="50" cy="100" r="25" fill="#3b82f6" opacity="0.8" />
      <text x="50" y="105" fill="#fff" fontSize="10" textAnchor="middle" fontFamily="Inter">Dobava</text>
      
      <circle cx="200" cy="100" r="25" fill="#8b5cf6" opacity="0.8" />
      <text x="200" y="105" fill="#fff" fontSize="10" textAnchor="middle" fontFamily="Inter">Kontrola</text>
      
      <circle cx="350" cy="100" r="25" fill="#10b981" opacity="0.8" />
      <text x="350" y="105" fill="#fff" fontSize="10" textAnchor="middle" fontFamily="Inter">Uporaba</text>
      
      {/* Flow paths */}
      <path d="M 75 100 L 175 100" stroke="#334155" strokeWidth="3" />
      <path d="M 225 100 L 325 100" stroke="#334155" strokeWidth="3" />
      
      {/* Animated particles */}
      <motion.circle
        cx={50 + flow * 300}
        cy={100}
        r="5"
        fill="#7c3aed"
        style={{ filter: 'drop-shadow(0 0 10px #7c3aed)' }}
      />
      
      <motion.circle
        cx={50 + ((flow + 0.5) % 1) * 300}
        cy={100}
        r="5"
        fill="#a78bfa"
        style={{ filter: 'drop-shadow(0 0 10px #a78bfa)' }}
      />
    </svg>
  )
}

// Advanced Airflow Visualization with Laminar/Turbulent modes
export function AirflowTurbulenceViz() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [mode, setMode] = useState<'laminar' | 'turbulent'>('laminar')
  
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    
    const particles: Array<{
      x: number
      y: number
      vx: number
      vy: number
      size: number
      hue: number
      trail: Array<{ x: number; y: number }>
    }> = []
    
    // Create smoke particles
    const createParticle = () => ({
      x: Math.random() * canvas.width,
      y: canvas.height + 10,
      vx: mode === 'laminar' ? 0 : (Math.random() - 0.5) * 1.5,
      vy: mode === 'laminar' ? -3 : -2 - Math.random() * 1,
      size: 3 + Math.random() * 4,
      hue: 200 + Math.random() * 60,
      trail: []
    })
    
    // Initialize particles
    for (let i = 0; i < 80; i++) {
      particles.push(createParticle())
    }
    
    let frame = 0
    
    const animate = () => {
      // Fade previous frame
      ctx.fillStyle = 'rgba(15, 23, 42, 0.15)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)
      
      frame++
      
      particles.forEach((p, idx) => {
        // Update trail
        p.trail.push({ x: p.x, y: p.y })
        if (p.trail.length > 15) p.trail.shift()
        
        // Draw trail
        ctx.strokeStyle = `hsla(${p.hue}, 80%, 60%, 0.3)`
        ctx.lineWidth = p.size * 0.5
        ctx.beginPath()
        p.trail.forEach((t, i) => {
          if (i === 0) ctx.moveTo(t.x, t.y)
          else ctx.lineTo(t.x, t.y)
        })
        ctx.stroke()
        
        // Physics
        if (mode === 'turbulent') {
          // Add turbulent vortices
          const vortexX = canvas.width / 2 + Math.sin(frame * 0.01) * 150
          const vortexY = canvas.height / 2
          const dx = p.x - vortexX
          const dy = p.y - vortexY
          const dist = Math.sqrt(dx * dx + dy * dy)
          
          if (dist < 100) {
            const force = (100 - dist) / 100
            p.vx += dy * 0.002 * force
            p.vy -= dx * 0.002 * force
          }
          
          // Brownian motion
          p.vx += (Math.random() - 0.5) * 0.2
          p.vy += (Math.random() - 0.5) * 0.2
          
          // Damping
          p.vx *= 0.98
          p.vy *= 0.98
        } else {
          // Laminar flow - parallel streamlines
          p.vx *= 0.95
          p.vy = -2.5 - Math.sin(p.x * 0.02) * 0.3
        }
        
        // Update position
        p.x += p.vx
        p.y += p.vy
        
        // Draw particle with glow
        const gradient = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.size * 2)
        gradient.addColorStop(0, `hsla(${p.hue}, 80%, 70%, 0.8)`)
        gradient.addColorStop(0.5, `hsla(${p.hue}, 80%, 60%, 0.4)`)
        gradient.addColorStop(1, `hsla(${p.hue}, 80%, 50%, 0)`)
        
        ctx.fillStyle = gradient
        ctx.beginPath()
        ctx.arc(p.x, p.y, p.size * 2, 0, Math.PI * 2)
        ctx.fill()
        
        // Reset if out of bounds
        if (p.y < -10 || p.x < -10 || p.x > canvas.width + 10) {
          Object.assign(p, createParticle())
        }
      })
      
      // Draw velocity vectors (arrows) to show flow direction
      if (frame % 20 === 0) {
        ctx.strokeStyle = 'rgba(124, 58, 237, 0.3)'
        ctx.fillStyle = 'rgba(124, 58, 237, 0.5)'
        ctx.lineWidth = 2
        
        for (let x = 50; x < canvas.width; x += 80) {
          for (let y = 50; y < canvas.height; y += 80) {
            const arrowLen = 20
            let angle = -Math.PI / 2 // Up by default
            
            if (mode === 'turbulent') {
              const vortexX = canvas.width / 2
              const vortexY = canvas.height / 2
              angle = Math.atan2(x - vortexX, y - vortexY)
            }
            
            // Draw arrow
            ctx.beginPath()
            ctx.moveTo(x, y)
            ctx.lineTo(x + Math.sin(angle) * arrowLen, y + Math.cos(angle) * arrowLen)
            ctx.stroke()
            
            // Arrowhead
            ctx.beginPath()
            ctx.moveTo(x + Math.sin(angle) * arrowLen, y + Math.cos(angle) * arrowLen)
            ctx.lineTo(
              x + Math.sin(angle - 0.5) * (arrowLen - 5),
              y + Math.cos(angle - 0.5) * (arrowLen - 5)
            )
            ctx.lineTo(
              x + Math.sin(angle + 0.5) * (arrowLen - 5),
              y + Math.cos(angle + 0.5) * (arrowLen - 5)
            )
            ctx.closePath()
            ctx.fill()
          }
        }
      }
      
      // Draw info text
      ctx.fillStyle = '#fff'
      ctx.font = 'bold 16px Inter'
      ctx.fillText(`Režim: ${mode === 'laminar' ? 'LAMINARNI TOK' : 'TURBULENTNI TOK'}`, 20, 30)
      ctx.font = '12px Inter'
      ctx.fillStyle = 'rgba(255, 255, 255, 0.7)'
      ctx.fillText(
        mode === 'laminar' ? 'Vzporedne plasti | 0.36-0.54 m/s' : 'Vrtinci in mešanje | Razredčenje',
        20,
        50
      )
      
      requestAnimationFrame(animate)
    }
    
    animate()
  }, [mode])
  
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 15 }}>
      <div style={{ display: 'flex', gap: 10, justifyContent: 'center' }}>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setMode('laminar')}
          style={{
            padding: '12px 24px',
            background: mode === 'laminar' ? 'linear-gradient(135deg, #7c3aed, #a78bfa)' : 'rgba(124, 58, 237, 0.2)',
            border: mode === 'laminar' ? '2px solid #7c3aed' : '2px solid rgba(124, 58, 237, 0.3)',
            borderRadius: 12,
            color: '#fff',
            fontWeight: 600,
            cursor: 'pointer',
            fontSize: 14
          }}
        >
          🌊 Laminarni Tok
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setMode('turbulent')}
          style={{
            padding: '12px 24px',
            background: mode === 'turbulent' ? 'linear-gradient(135deg, #7c3aed, #a78bfa)' : 'rgba(124, 58, 237, 0.2)',
            border: mode === 'turbulent' ? '2px solid #7c3aed' : '2px solid rgba(124, 58, 237, 0.3)',
            borderRadius: 12,
            color: '#fff',
            fontWeight: 600,
            cursor: 'pointer',
            fontSize: 14
          }}
        >
          🌀 Turbulentni Tok
        </motion.button>
      </div>
      <canvas
        ref={canvasRef}
        width={600}
        height={400}
        style={{
          width: '100%',
          maxWidth: 600,
          height: 'auto',
          borderRadius: 12,
          border: '2px solid rgba(124, 58, 237, 0.3)'
        }}
      />
    </div>
  )
}

// Temperature and Humidity Monitoring Visualization
export function TemperatureHumidityMonitor() {
  const [temp, setTemp] = useState(21)
  const [humidity, setHumidity] = useState(45)
  const [tempTrend, setTempTrend] = useState<number[]>([21, 21, 21, 21, 21])
  const [humidityTrend, setHumidityTrend] = useState<number[]>([45, 45, 45, 45, 45])

  useEffect(() => {
    const interval = setInterval(() => {
      // Simulate fluctuations
      const newTemp = 20 + Math.random() * 4
      const newHumidity = 40 + Math.random() * 15
      
      setTemp(newTemp)
      setHumidity(newHumidity)
      
      setTempTrend(prev => [...prev.slice(1), newTemp])
      setHumidityTrend(prev => [...prev.slice(1), newHumidity])
    }, 2000)

    return () => clearInterval(interval)
  }, [])

  const getTempColor = (t: number) => {
    if (t < 19 || t > 23) return '#ef4444'
    if (t < 20 || t > 22) return '#f59e0b'
    return '#22c55e'
  }

  const getHumidityColor = (h: number) => {
    if (h < 35 || h > 55) return '#ef4444'
    if (h < 40 || h > 50) return '#f59e0b'
    return '#22c55e'
  }

  return (
    <div style={{padding: 20, background: 'rgba(15, 23, 42, 0.6)', borderRadius: 16}}>
      <h3 style={{color: '#e6eef8', marginTop: 0, marginBottom: 24, fontSize: 20}}>
        🌡️ Spremljanje Temperature in Vlažnosti
      </h3>
      
      <div style={{display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20, marginBottom: 30}}>
        {/* Temperature Gauge */}
        <div style={{
          background: 'linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(59, 130, 246, 0.1))',
          padding: 24,
          borderRadius: 12,
          border: `2px solid ${getTempColor(temp)}`,
          textAlign: 'center'
        }}>
          <div style={{fontSize: 14, color: '#94a3b8', marginBottom: 12}}>Temperatura</div>
          <motion.div 
            key={temp}
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            style={{fontSize: 48, fontWeight: 700, color: getTempColor(temp), marginBottom: 8}}
          >
            {temp.toFixed(1)}°C
          </motion.div>
          <div style={{fontSize: 12, color: '#64748b'}}>
            Dovoljen razpon: 20-22°C
          </div>
          
          {/* Mini trend sparkline */}
          <svg width="100%" height="40" style={{marginTop: 16}}>
            <polyline
              points={tempTrend.map((t, i) => `${i * 25},${40 - (t - 18) * 5}`).join(' ')}
              fill="none"
              stroke={getTempColor(temp)}
              strokeWidth="2"
            />
          </svg>
        </div>

        {/* Humidity Gauge */}
        <div style={{
          background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1), rgba(14, 165, 233, 0.1))',
          padding: 24,
          borderRadius: 12,
          border: `2px solid ${getHumidityColor(humidity)}`,
          textAlign: 'center'
        }}>
          <div style={{fontSize: 14, color: '#94a3b8', marginBottom: 12}}>Relativna Vlažnost</div>
          <motion.div 
            key={humidity}
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            style={{fontSize: 48, fontWeight: 700, color: getHumidityColor(humidity), marginBottom: 8}}
          >
            {humidity.toFixed(1)}%
          </motion.div>
          <div style={{fontSize: 12, color: '#64748b'}}>
            Dovoljen razpon: 40-50%
          </div>
          
          {/* Mini trend sparkline */}
          <svg width="100%" height="40" style={{marginTop: 16}}>
            <polyline
              points={humidityTrend.map((h, i) => `${i * 25},${40 - (h - 35) * 1.5}`).join(' ')}
              fill="none"
              stroke={getHumidityColor(humidity)}
              strokeWidth="2"
            />
          </svg>
        </div>
      </div>

      <div style={{
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 16,
        borderRadius: 8,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <div style={{fontSize: 13, color: '#cbd5e1', lineHeight: 1.7}}>
          💡 <strong>Pomembno:</strong> Temperatura in vlažnost sta kritična parametra. 
          Previsoka vlažnost lahko povzroči kondenzacijo na HEPA filtrih, prenizka pa 
          elektrostatične naboje in neudobje osebja.
        </div>
      </div>
    </div>
  )
}

// HVAC System Components Visualization
export function HVACSystemVisualization() {
  const [airflow, setAirflow] = useState(0)
  const [filterStatus, setFilterStatus] = useState<'clean' | 'warning' | 'critical'>('clean')

  useEffect(() => {
    const interval = setInterval(() => {
      setAirflow(prev => (prev + 1) % 360)
      
      // Simulate filter degradation
      const rand = Math.random()
      if (rand > 0.8) setFilterStatus('clean')
      else if (rand > 0.5) setFilterStatus('warning')
      else setFilterStatus('critical')
    }, 100)

    return () => clearInterval(interval)
  }, [])

  const getFilterColor = () => {
    switch (filterStatus) {
      case 'clean': return '#22c55e'
      case 'warning': return '#f59e0b'
      case 'critical': return '#ef4444'
    }
  }

  return (
    <div style={{padding: 20, background: 'rgba(15, 23, 42, 0.6)', borderRadius: 16}}>
      <h3 style={{color: '#e6eef8', marginTop: 0, marginBottom: 24, fontSize: 20}}>
        🌬️ HVAC Sistem - Shema Komponent
      </h3>
      
      <svg width="100%" height="400" viewBox="0 0 800 400" style={{background: 'rgba(0,0,0,0.2)', borderRadius: 12}}>
        {/* Supply Air Duct */}
        <rect x="50" y="50" width="200" height="60" rx="8" fill="rgba(59, 130, 246, 0.3)" stroke="#3b82f6" strokeWidth="2"/>
        <text x="150" y="85" textAnchor="middle" fill="#e6eef8" fontSize="14">Dovodni Kanal</text>
        
        {/* AHU (Air Handling Unit) */}
        <rect x="300" y="30" width="200" height="100" rx="12" fill="rgba(124, 58, 237, 0.3)" stroke="#7c3aed" strokeWidth="3"/>
        <text x="400" y="70" textAnchor="middle" fill="#e6eef8" fontSize="16" fontWeight="bold">AHU</text>
        <text x="400" y="90" textAnchor="middle" fill="#94a3b8" fontSize="12">Air Handling Unit</text>
        <text x="400" y="110" textAnchor="middle" fill="#cbd5e1" fontSize="11">Temperatura • Vlažnost • Filtri</text>
        
        {/* HEPA Filter */}
        <motion.rect 
          x="550" y="50" width="150" height="60" rx="8" 
          fill={`${getFilterColor()}33`}
          stroke={getFilterColor()} 
          strokeWidth="2"
          animate={{
            opacity: [0.5, 1, 0.5],
          }}
          transition={{
            duration: 2,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        <text x="625" y="75" textAnchor="middle" fill="#e6eef8" fontSize="14">HEPA Filter</text>
        <text x="625" y="95" textAnchor="middle" fill={getFilterColor()} fontSize="12" fontWeight="bold">
          {filterStatus === 'clean' ? '✓ Čist' : filterStatus === 'warning' ? '⚠ Opozorilo' : '✗ Kritično'}
        </text>
        
        {/* Cleanroom */}
        <rect x="300" y="200" width="300" height="150" rx="12" fill="rgba(6, 182, 212, 0.2)" stroke="#06b6d4" strokeWidth="2"/>
        <text x="450" y="230" textAnchor="middle" fill="#e6eef8" fontSize="16" fontWeight="bold">Čisti Prostor</text>
        <text x="450" y="250" textAnchor="middle" fill="#94a3b8" fontSize="12">Razred A/B</text>
        
        {/* Animated particles showing airflow */}
        {[...Array(8)].map((_, i) => (
          <motion.circle
            key={i}
            cx={0}
            cy={80}
            r="4"
            fill="#a78bfa"
            animate={{
              cx: [50, 250, 400, 625, 625, 625, 450, 450, 150, 50],
              cy: [80, 80, 80, 80, 175, 275, 275, 200, 200, 80]
            }}
            transition={{
              duration: 8,
              repeat: Infinity,
              delay: i * 0.5,
              ease: "linear"
            }}
          />
        ))}
        
        {/* Return Air */}
        <rect x="100" y="250" width="150" height="60" rx="8" fill="rgba(239, 68, 68, 0.2)" stroke="#ef4444" strokeWidth="2"/>
        <text x="175" y="285" textAnchor="middle" fill="#e6eef8" fontSize="14">Povratni Zrak</text>
        
        {/* Arrows */}
        <defs>
          <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
            <polygon points="0 0, 10 3, 0 6" fill="#a78bfa" />
          </marker>
        </defs>
        
        <path d="M 250 80 L 295 80" stroke="#a78bfa" strokeWidth="2" markerEnd="url(#arrowhead)" />
        <path d="M 500 80 L 545 80" stroke="#a78bfa" strokeWidth="2" markerEnd="url(#arrowhead)" />
        <path d="M 625 110 L 625 195" stroke="#a78bfa" strokeWidth="2" markerEnd="url(#arrowhead)" />
        <path d="M 300 280 L 255 280" stroke="#ef4444" strokeWidth="2" markerEnd="url(#arrowhead)" />
      </svg>

      <div style={{marginTop: 20, display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 12}}>
        <div style={{background: 'rgba(59, 130, 246, 0.1)', padding: 12, borderRadius: 8, textAlign: 'center'}}>
          <div style={{fontSize: 12, color: '#94a3b8'}}>Pretok Zraka</div>
          <div style={{fontSize: 20, color: '#3b82f6', fontWeight: 700}}>0.45 m/s</div>
        </div>
        <div style={{background: 'rgba(34, 197, 94, 0.1)', padding: 12, borderRadius: 8, textAlign: 'center'}}>
          <div style={{fontSize: 12, color: '#94a3b8'}}>Tlačna Razlika</div>
          <div style={{fontSize: 20, color: '#22c55e', fontWeight: 700}}>+15 Pa</div>
        </div>
        <div style={{background: 'rgba(168, 85, 247, 0.1)', padding: 12, borderRadius: 8, textAlign: 'center'}}>
          <div style={{fontSize: 12, color: '#94a3b8'}}>Izmenjave/h</div>
          <div style={{fontSize: 20, color: '#a855f7', fontWeight: 700}}>25 ACH</div>
        </div>
      </div>
    </div>
  )
}

// Water System Flow Visualization
export function WaterSystemFlow() {
  const [flowRate, setFlowRate] = useState(50)
  const [temperature, setTemperature] = useState(80)
  const [conductivity, setConductivity] = useState(1.2)

  useEffect(() => {
    const interval = setInterval(() => {
      setFlowRate(48 + Math.random() * 4)
      setTemperature(78 + Math.random() * 4)
      setConductivity(1.0 + Math.random() * 0.5)
    }, 2000)

    return () => clearInterval(interval)
  }, [])

  return (
    <div style={{padding: 20, background: 'rgba(15, 23, 42, 0.6)', borderRadius: 16}}>
      <h3 style={{color: '#e6eef8', marginTop: 0, marginBottom: 24, fontSize: 20}}>
        💧 Vodovodni Sistemi - WFI in PW
      </h3>
      
      <svg width="100%" height="300" viewBox="0 0 800 300">
        {/* Storage Tank */}
        <rect x="50" y="100" width="120" height="150" rx="8" fill="rgba(6, 182, 212, 0.3)" stroke="#06b6d4" strokeWidth="2"/>
        <text x="110" y="90" textAnchor="middle" fill="#e6eef8" fontSize="14">WFI Rezervoar</text>
        
        {/* Animated water level */}
        <motion.rect
          x="52" y="150" width="116" height="98" rx="6"
          fill="rgba(34, 197, 94, 0.4)"
          animate={{
            y: [150, 145, 150],
            height: [98, 103, 98]
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            ease: "easeInOut"
          }}
        />
        
        {/* Distribution Loop */}
        <path 
          d="M 170 175 L 300 175 L 300 80 L 600 80 L 600 220 L 300 220 L 300 175"
          fill="none"
          stroke="#06b6d4"
          strokeWidth="6"
          strokeLinejoin="round"
        />
        
        {/* Flow animation */}
        {[...Array(12)].map((_, i) => (
          <motion.circle
            key={i}
            r="4"
            fill="#22c55e"
            animate={{
              offsetDistance: ['0%', '100%'],
            }}
            transition={{
              duration: 6,
              repeat: Infinity,
              delay: i * 0.5,
              ease: "linear"
            }}
            style={{
              offsetPath: 'path("M 170 175 L 300 175 L 300 80 L 600 80 L 600 220 L 300 220 L 300 175")'
            }}
          />
        ))}
        
        {/* Heat Exchanger */}
        <rect x="320" y="60" width="80" height="40" rx="6" fill="rgba(239, 68, 68, 0.3)" stroke="#ef4444" strokeWidth="2"/>
        <text x="360" y="85" textAnchor="middle" fill="#e6eef8" fontSize="11">Grelnik</text>
        
        {/* UV Treatment */}
        <rect x="450" y="60" width="80" height="40" rx="6" fill="rgba(168, 85, 247, 0.3)" stroke="#a855f7" strokeWidth="2"/>
        <text x="490" y="85" textAnchor="middle" fill="#e6eef8" fontSize="11">UV Filter</text>
        
        {/* Usage Points */}
        <circle cx="600" cy="120" r="20" fill="rgba(59, 130, 246, 0.3)" stroke="#3b82f6" strokeWidth="2"/>
        <text x="600" y="125" textAnchor="middle" fill="#e6eef8" fontSize="11">TP1</text>
        
        <circle cx="600" cy="180" r="20" fill="rgba(59, 130, 246, 0.3)" stroke="#3b82f6" strokeWidth="2"/>
        <text x="600" y="185" textAnchor="middle" fill="#e6eef8" fontSize="11">TP2</text>
        
        {/* Return line */}
        <path 
          d="M 580 220 L 200 220"
          fill="none"
          stroke="#64748b"
          strokeWidth="4"
          strokeDasharray="8,4"
        />
        <text x="400" y="240" textAnchor="middle" fill="#94a3b8" fontSize="11">Povratna Linija</text>
      </svg>

      <div style={{marginTop: 20, display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 12}}>
        <motion.div 
          style={{
            background: 'rgba(6, 182, 212, 0.1)', 
            padding: 16, 
            borderRadius: 8,
            textAlign: 'center',
            border: '1px solid rgba(6, 182, 212, 0.3)'
          }}
          key={flowRate}
          initial={{ scale: 0.95 }}
          animate={{ scale: 1 }}
        >
          <div style={{fontSize: 12, color: '#94a3b8'}}>Pretok</div>
          <div style={{fontSize: 24, color: '#06b6d4', fontWeight: 700}}>{flowRate.toFixed(1)} L/min</div>
        </motion.div>
        <motion.div 
          style={{
            background: 'rgba(239, 68, 68, 0.1)', 
            padding: 16, 
            borderRadius: 8,
            textAlign: 'center',
            border: '1px solid rgba(239, 68, 68, 0.3)'
          }}
          key={temperature}
          initial={{ scale: 0.95 }}
          animate={{ scale: 1 }}
        >
          <div style={{fontSize: 12, color: '#94a3b8'}}>Temperatura</div>
          <div style={{fontSize: 24, color: '#ef4444', fontWeight: 700}}>{temperature.toFixed(1)}°C</div>
        </motion.div>
        <motion.div 
          style={{
            background: 'rgba(34, 197, 94, 0.1)', 
            padding: 16, 
            borderRadius: 8,
            textAlign: 'center',
            border: '1px solid rgba(34, 197, 94, 0.3)'
          }}
          key={conductivity}
          initial={{ scale: 0.95 }}
          animate={{ scale: 1 }}
        >
          <div style={{fontSize: 12, color: '#94a3b8'}}>Prevodnost</div>
          <div style={{fontSize: 24, color: '#22c55e', fontWeight: 700}}>{conductivity.toFixed(1)} µS/cm</div>
        </motion.div>
      </div>

      <div style={{
        marginTop: 20,
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 16,
        borderRadius: 8,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <div style={{fontSize: 13, color: '#cbd5e1', lineHeight: 1.7}}>
          💡 <strong>WFI (Water for Injection):</strong> Najčistejša voda za farmacevtsko uporabo. 
          Temperatura sistema mora biti nad 75°C za preprečitev rasti mikroorganizmov. 
          Prevodnost mora biti pod 1.3 µS/cm pri 25°C.
        </div>
      </div>
    </div>
  )
}

// Simple placeholder visualizations for new lessons
export function MediaFillSimulation() {
  const [progress, setProgress] = useState(0)
  const [contaminated, setContaminated] = useState(false)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const interval = setInterval(() => {
      setProgress(p => {
        if (p >= 100) {
          const isContaminated = Math.random() < 0.001 // 0.1% contamination rate
          setContaminated(isContaminated)
          return 100
        }
        return p + 0.5
      })
    }, 50)
    return () => clearInterval(interval)
  }, [])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Draw vials being filled
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    const vialCount = 10
    const vialWidth = 40
    const vialHeight = 100
    const spacing = (canvas.width - vialCount * vialWidth) / (vialCount + 1)

    for (let i = 0; i < vialCount; i++) {
      const x = spacing + i * (vialWidth + spacing)
      const y = 50
      const fillHeight = (vialHeight * progress) / 100

      // Vial outline
      ctx.strokeStyle = '#7c3aed'
      ctx.lineWidth = 2
      ctx.strokeRect(x, y, vialWidth, vialHeight)

      // Fill (TSB medium)
      const gradient = ctx.createLinearGradient(x, y + vialHeight, x, y + vialHeight - fillHeight)
      gradient.addColorStop(0, contaminated ? '#ef4444' : '#fbbf24')
      gradient.addColorStop(1, contaminated ? '#dc2626' : '#f59e0b')
      ctx.fillStyle = gradient
      ctx.fillRect(x + 2, y + vialHeight - fillHeight, vialWidth - 4, fillHeight)

      // Bubbles animation
      if (progress > 20 && progress < 90) {
        for (let b = 0; b < 3; b++) {
          const bubbleY = y + vialHeight - fillHeight + Math.sin(Date.now() / 200 + i * b) * 20
          ctx.fillStyle = 'rgba(255,255,255,0.3)'
          ctx.beginPath()
          ctx.arc(x + vialWidth / 2 + Math.cos(Date.now() / 300 + b) * 10, bubbleY, 3, 0, Math.PI * 2)
          ctx.fill()
        }
      }
    }

    // Result indicator
    if (progress >= 100) {
      ctx.font = 'bold 16px Inter'
      ctx.fillStyle = contaminated ? '#ef4444' : '#10b981'
      ctx.textAlign = 'center'
      ctx.fillText(
        contaminated ? '❌ CONTAMINATED (0.1%)' : '✅ PASS (0.0%)',
        canvas.width / 2,
        180
      )
    }
  }, [progress, contaminated])

  return (
    <div style={{padding: 24, textAlign: 'center'}}>
      <h4 style={{color: '#7c3aed', marginBottom: 12}}>Media Fill Test - Aseptic Simulation</h4>
      <canvas ref={canvasRef} width={600} height={200} style={{maxWidth: '100%', background: 'rgba(0,0,0,0.2)', borderRadius: 8}} />
      <div style={{marginTop: 16, fontSize: 14, color: 'var(--muted)'}}>
        <strong>Progress:</strong> {progress.toFixed(1)}% | <strong>Target:</strong> {'<'} 0.1% contamination
      </div>
    </div>
  )
}

export function PersonnelBehavior() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [technique, setTechnique] = useState<'good' | 'bad'>('good')

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let frame = 0
    const particles: Array<{x: number; y: number; vx: number; vy: number; life: number}> = []

    const animate = () => {
      frame++
      ctx.fillStyle = 'rgba(15, 23, 42, 0.1)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Draw person silhouette
      const personX = 300
      const personY = 250

      // Head
      ctx.fillStyle = technique === 'good' ? '#10b981' : '#ef4444'
      ctx.beginPath()
      ctx.arc(personX, personY - 60, 25, 0, Math.PI * 2)
      ctx.fill()

      // Body
      ctx.fillRect(personX - 20, personY - 35, 40, 60)

      // Arms (animated)
      const armAngle = Math.sin(frame / 30) * (technique === 'bad' ? 0.5 : 0.1)
      ctx.save()
      ctx.translate(personX, personY - 20)
      ctx.rotate(armAngle)
      ctx.fillRect(-40, -5, 40, 10)
      ctx.restore()

      ctx.save()
      ctx.translate(personX, personY - 20)
      ctx.rotate(-armAngle)
      ctx.fillRect(0, -5, 40, 10)
      ctx.restore()

      // Generate particles (1 million particles/min ≈ 16,667/sec ≈ ~100/frame at 60fps)
      const particleRate = technique === 'bad' ? 20 : 5 // More particles with bad technique
      for (let i = 0; i < particleRate; i++) {
        particles.push({
          x: personX + (Math.random() - 0.5) * 60,
          y: personY - 30 + Math.random() * 40,
          vx: (Math.random() - 0.5) * (technique === 'bad' ? 4 : 1),
          vy: -Math.random() * 2 - 1,
          life: 1
        })
      }

      // Update and draw particles
      for (let i = particles.length - 1; i >= 0; i--) {
        const p = particles[i]
        p.x += p.vx
        p.y += p.vy
        p.vy += 0.05 // Gravity
        p.life -= 0.01

        if (p.life <= 0 || p.y > canvas.height) {
          particles.splice(i, 1)
          continue
        }

        ctx.fillStyle = `rgba(251, 191, 36, ${p.life * 0.6})`
        ctx.beginPath()
        ctx.arc(p.x, p.y, 2, 0, Math.PI * 2)
        ctx.fill()
      }

      // Particle count display
      ctx.font = 'bold 18px Inter'
      ctx.fillStyle = technique === 'good' ? '#10b981' : '#ef4444'
      ctx.textAlign = 'left'
      ctx.fillText(`Particles: ${particles.length}`, 20, 30)
      ctx.fillText(`Rate: ${particleRate * 60} p/sec`, 20, 55)

      requestAnimationFrame(animate)
    }

    const animationId = requestAnimationFrame(animate)
    return () => cancelAnimationFrame(animationId)
  }, [technique])

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 12, textAlign: 'center'}}>Personnel Particle Emission</h4>
      
      {/* Toggle buttons */}
      <div style={{display: 'flex', gap: 12, justifyContent: 'center', marginBottom: 16}}>
        <motion.button
          onClick={() => setTechnique('good')}
          style={{
            padding: '12px 24px',
            background: technique === 'good' ? 'linear-gradient(135deg, #10b981, #059669)' : 'rgba(255, 255, 255, 0.05)',
            border: technique === 'good' ? '2px solid #10b981' : '2px solid rgba(255, 255, 255, 0.1)',
            borderRadius: 8,
            color: '#e6eef8',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer'
          }}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          ✅ Good Technique
        </motion.button>
        <motion.button
          onClick={() => setTechnique('bad')}
          style={{
            padding: '12px 24px',
            background: technique === 'bad' ? 'linear-gradient(135deg, #ef4444, #dc2626)' : 'rgba(255, 255, 255, 0.05)',
            border: technique === 'bad' ? '2px solid #ef4444' : '2px solid rgba(255, 255, 255, 0.1)',
            borderRadius: 8,
            color: '#e6eef8',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer'
          }}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          ❌ Bad Technique (4x particles)
        </motion.button>
      </div>

      {/* Canvas visualization */}
      <canvas ref={canvasRef} width={600} height={350} style={{maxWidth: '100%', background: 'rgba(0,0,0,0.3)', borderRadius: 8, display: 'block', margin: '0 auto'}} />
      
      {/* Animated info card based on technique */}
      <AnimatePresence mode="wait">
        <motion.div
          key={technique}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          transition={{ duration: 0.3 }}
          style={{
            marginTop: 16,
            padding: 16,
            background: technique === 'good' ? 'rgba(16, 185, 129, 0.1)' : 'rgba(239, 68, 68, 0.1)',
            border: `1px solid ${technique === 'good' ? 'rgba(16, 185, 129, 0.3)' : 'rgba(239, 68, 68, 0.3)'}`,
            borderRadius: 12
          }}
        >
          <div style={{ fontSize: 15, color: '#e6eef8', fontWeight: 600, marginBottom: 8 }}>
            {technique === 'good' ? '✅ Pravilna tehnika' : '❌ Slaba tehnika'}
          </div>
          <div style={{ fontSize: 13, color: '#cbd5e1', lineHeight: 1.6 }}>
            {technique === 'good' ? (
              <>
                <strong>Nizka emisija delcev:</strong> Kontrolirani gibi, umirjena hoja, brez dotikanja obraza ali oblačil. 
                Pravilno grajenje zmanjšuje sproščanje delcev za 70–80%. Oseba sprošča ~1 million delcev/min.
              </>
            ) : (
              <>
                <strong>Povečana emisija delcev:</strong> Hitri gibi, dvigovanje rok, dotikanje obraza, praskanje. 
                Slaba tehnika poveča sproščanje delcev za <strong>3–5×</strong> (do 5 million delcev/min). Kritično v razredu A/B!
              </>
            )}
          </div>
        </motion.div>
      </AnimatePresence>
    </div>
  )
}

// Gowning Control Simulator (Lesson 108)
export function GowningControlSimulator() {
  const [activeControl, setActiveControl] = useState<'visual' | 'documentation' | 'sampling' | 'video' | 'training'>('visual')
  const [checklistProgress, setChecklistProgress] = useState<Record<string, boolean>>({
    hood: false,
    mask: false,
    goggles: false,
    gloves: false,
    boots: false,
    coverall: false
  })
  const [samplingResult, setSamplingResult] = useState<number | null>(null)
  const [trainingDate, setTrainingDate] = useState<Date>(new Date())
  const [entryLog, setEntryLog] = useState<Array<{ time: string; person: string; zone: string }>>([
    { time: '08:15', person: 'Operator A', zone: 'Grade B' },
    { time: '08:22', person: 'Operator B', zone: 'Grade A' },
    { time: '09:05', person: 'QA Inspector', zone: 'Grade B' }
  ])

  // Control methods
  const controls = {
    visual: {
      icon: '🪞',
      name: 'Vizualna kontrola',
      desc: 'Uporaba zrcal in preverjanje s strani sodelavcev pred vstopom',
      color: '#06b6d4'
    },
    documentation: {
      icon: '📋',
      name: 'Dokumentiranje vstopov',
      desc: 'Evidenca vseh vstopov v kritične cone z imenom, časom in cono',
      color: '#8b5cf6'
    },
    sampling: {
      icon: '🧤',
      name: 'Mikrobiološko vzorčenje',
      desc: 'Odtisi rokavic za preverjanje učinkovitosti tehnike oblačenja',
      color: '#10b981'
    },
    video: {
      icon: '📹',
      name: 'Video analiza',
      desc: 'Snemanje postopka oblačenja za analizo tehnike in usposabljanje',
      color: '#f59e0b'
    },
    training: {
      icon: '🎓',
      name: 'Periodično usposabljanje',
      desc: 'Ponovno usposabljanje vsaj 2× letno z ocenjevanjem znanja',
      color: '#ec4899'
    }
  }

  const handleChecklistToggle = (item: string) => {
    setChecklistProgress(prev => ({ ...prev, [item]: !prev[item] }))
  }

  const completedItems = Object.values(checklistProgress).filter(Boolean).length
  const totalItems = Object.keys(checklistProgress).length
  const progressPercent = (completedItems / totalItems) * 100

  const runSampling = () => {
    // Simulate sampling result (CFU on glove print)
    const baseRisk = Math.random() * 5
    const techniqueQuality = progressPercent / 100
    const result = Math.round(baseRisk * (1 - techniqueQuality * 0.8))
    setSamplingResult(result)
  }

  const isTrainingDue = () => {
    const monthsSinceTraining = (new Date().getTime() - trainingDate.getTime()) / (1000 * 60 * 60 * 24 * 30)
    return monthsSinceTraining > 6
  }

  return (
    <div style={{ padding: 16, background: 'rgba(139, 92, 246, 0.08)', borderRadius: 12, border: '1px solid rgba(139, 92, 246, 0.25)' }}>
      {/* Control method selector */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', gap: 12, marginBottom: 20 }}>
        {Object.entries(controls).map(([key, val]) => (
          <motion.button
            key={key}
            onClick={() => setActiveControl(key as any)}
            style={{
              padding: 12,
              background: activeControl === key ? `linear-gradient(135deg, ${val.color}, ${val.color}cc)` : 'rgba(255,255,255,0.05)',
              border: activeControl === key ? `2px solid ${val.color}` : '2px solid rgba(255,255,255,0.1)',
              borderRadius: 10,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
          >
            <div style={{ fontSize: 24, marginBottom: 6 }}>{val.icon}</div>
            <div style={{ fontSize: 12, color: '#e6eef8', fontWeight: 600, lineHeight: 1.3 }}>{val.name}</div>
          </motion.button>
        ))}
      </div>

      {/* Active control content */}
      <AnimatePresence mode="wait">
        <motion.div
          key={activeControl}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
        >
          {activeControl === 'visual' && (
            <div style={{ padding: 16, background: 'rgba(6, 182, 212, 0.1)', borderRadius: 12, border: '1px solid rgba(6, 182, 212, 0.25)' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                <div style={{ fontSize: 40 }}>🪞</div>
                <div>
                  <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 18, marginBottom: 4 }}>Vizualna kontrola pred vstopom</div>
                  <div style={{ color: '#94a3b8', fontSize: 13 }}>Interaktivna kontrolna lista za preverjanje oblačil</div>
                </div>
              </div>

              {/* Checklist */}
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 10, marginBottom: 16 }}>
                {[
                  { key: 'hood', label: '👤 Kapuca pravilno nameščena', emoji: '✓' },
                  { key: 'mask', label: '😷 Maska pokriva nos in usta', emoji: '✓' },
                  { key: 'goggles', label: '🥽 Zaščitna očala brez prask', emoji: '✓' },
                  { key: 'gloves', label: '🧤 Rokavice brez lukenj', emoji: '✓' },
                  { key: 'boots', label: '👢 Škornji čisti, brez poškodb', emoji: '✓' },
                  { key: 'coverall', label: '🦺 Oblačilo brez gubanja', emoji: '✓' }
                ].map(item => (
                  <label
                    key={item.key}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      padding: 10,
                      background: checklistProgress[item.key] ? 'rgba(34, 197, 94, 0.15)' : 'rgba(255,255,255,0.03)',
                      border: `1px solid ${checklistProgress[item.key] ? '#22c55e' : 'rgba(255,255,255,0.1)'}`,
                      borderRadius: 8,
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                  >
                    <input
                      type="checkbox"
                      checked={checklistProgress[item.key]}
                      onChange={() => handleChecklistToggle(item.key)}
                      style={{ marginRight: 10, width: 18, height: 18 }}
                    />
                    <div style={{ flex: 1, fontSize: 13, color: checklistProgress[item.key] ? '#6ee7b7' : '#cbd5e1' }}>
                      {item.label}
                    </div>
                    {checklistProgress[item.key] && <span style={{ fontSize: 18, color: '#22c55e' }}>✓</span>}
                  </label>
                ))}
              </div>

              {/* Progress */}
              <div>
                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 6 }}>
                  <span style={{ fontSize: 13, color: '#94a3b8' }}>Napredek kontrole</span>
                  <span style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{completedItems}/{totalItems}</span>
                </div>
                <div style={{ height: 12, background: 'rgba(255,255,255,0.06)', borderRadius: 8, overflow: 'hidden' }}>
                  <motion.div
                    style={{ height: '100%', background: 'linear-gradient(90deg, #22c55e, #10b981)', borderRadius: 8 }}
                    initial={{ width: 0 }}
                    animate={{ width: `${progressPercent}%` }}
                    transition={{ duration: 0.4 }}
                  />
                </div>
                {progressPercent === 100 && (
                  <div style={{ marginTop: 12, padding: 10, background: 'rgba(34,197,94,0.15)', border: '1px solid rgba(34,197,94,0.3)', borderRadius: 8, color: '#6ee7b7', fontSize: 13, textAlign: 'center', fontWeight: 600 }}>
                    ✅ Vse točke preverjene! Dovoljenje za vstop.
                  </div>
                )}
              </div>
            </div>
          )}

          {activeControl === 'documentation' && (
            <div style={{ padding: 16, background: 'rgba(139, 92, 246, 0.1)', borderRadius: 12, border: '1px solid rgba(139, 92, 246, 0.25)' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                <div style={{ fontSize: 40 }}>📋</div>
                <div>
                  <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 18, marginBottom: 4 }}>Evidenca vstopov v kritične cone</div>
                  <div style={{ color: '#94a3b8', fontSize: 13 }}>GMP zahteva dokumentacijo vseh vstopov v razrede A/B</div>
                </div>
              </div>

              {/* Entry log table */}
              <div style={{ background: 'rgba(255,255,255,0.03)', borderRadius: 8, overflow: 'hidden', border: '1px solid rgba(255,255,255,0.08)' }}>
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 2fr 1fr', padding: 12, background: 'rgba(139,92,246,0.15)', borderBottom: '1px solid rgba(255,255,255,0.1)' }}>
                  <div style={{ fontSize: 12, color: '#c4b5fd', fontWeight: 700 }}>ČAS</div>
                  <div style={{ fontSize: 12, color: '#c4b5fd', fontWeight: 700 }}>OSEBA</div>
                  <div style={{ fontSize: 12, color: '#c4b5fd', fontWeight: 700 }}>CONA</div>
                </div>
                {entryLog.map((entry, i) => (
                  <motion.div
                    key={i}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: i * 0.1 }}
                    style={{ display: 'grid', gridTemplateColumns: '1fr 2fr 1fr', padding: 12, borderBottom: i < entryLog.length - 1 ? '1px solid rgba(255,255,255,0.05)' : 'none' }}
                  >
                    <div style={{ fontSize: 13, color: '#cbd5e1' }}>{entry.time}</div>
                    <div style={{ fontSize: 13, color: '#e6eef8', fontWeight: 600 }}>{entry.person}</div>
                    <div style={{ fontSize: 12, color: entry.zone === 'Grade A' ? '#fbbf24' : '#6ee7b7', fontWeight: 700 }}>{entry.zone}</div>
                  </motion.div>
                ))}
              </div>

              <div style={{ marginTop: 12, padding: 12, background: 'rgba(139,92,246,0.08)', borderRadius: 8, border: '1px solid rgba(139,92,246,0.2)', fontSize: 12, color: '#cbd5e1', lineHeight: 1.6 }}>
                <strong style={{ color: '#c4b5fd' }}>💡 Zahteve:</strong> Dokumentiranje mora vključevati ime operaterja, čas vstopa/izstopa, cone (A/B/C/D), namen obiska in trajanje. Podatki se hranijo vsaj 2 leti.
              </div>
            </div>
          )}

          {activeControl === 'sampling' && (
            <div style={{ padding: 16, background: 'rgba(16, 185, 129, 0.1)', borderRadius: 12, border: '1px solid rgba(16, 185, 129, 0.25)' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                <div style={{ fontSize: 40 }}>🧤</div>
                <div>
                  <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 18, marginBottom: 4 }}>Mikrobiološko vzorčenje rokavic</div>
                  <div style={{ color: '#94a3b8', fontSize: 13 }}>Odtisi rokavic preverjajo učinkovitost tehnike oblačenja</div>
                </div>
              </div>

              {/* Sampling visualization */}
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
                <div>
                  <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 8 }}>Tehnika vzorčenja</div>
                  <div style={{ position: 'relative', height: 180, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                    <div style={{ textAlign: 'center' }}>
                      <div style={{ fontSize: 80, marginBottom: 8 }}>🧤</div>
                      <div style={{ fontSize: 12, color: '#6ee7b7' }}>Prst na RODAC ploščo</div>
                      <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 4 }}>5× prsti, palec, dlan</div>
                    </div>
                  </div>
                  <button
                    onClick={runSampling}
                    style={{
                      width: '100%',
                      marginTop: 12,
                      padding: 12,
                      background: 'linear-gradient(135deg, #10b981, #059669)',
                      border: 'none',
                      borderRadius: 8,
                      color: '#e6eef8',
                      fontSize: 14,
                      fontWeight: 600,
                      cursor: 'pointer'
                    }}
                  >
                    🧪 Izvedi vzorčenje
                  </button>
                </div>

                <div>
                  <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 8 }}>Rezultat (CFU na odtis)</div>
                  {samplingResult !== null ? (
                    <motion.div
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      style={{
                        padding: 20,
                        background: samplingResult <= 1 ? 'rgba(34,197,94,0.15)' : samplingResult <= 5 ? 'rgba(245,158,11,0.15)' : 'rgba(239,68,68,0.15)',
                        border: `2px solid ${samplingResult <= 1 ? '#22c55e' : samplingResult <= 5 ? '#f59e0b' : '#ef4444'}`,
                        borderRadius: 12,
                        textAlign: 'center'
                      }}
                    >
                      <div style={{ fontSize: 48, fontWeight: 700, color: samplingResult <= 1 ? '#22c55e' : samplingResult <= 5 ? '#f59e0b' : '#ef4444' }}>
                        {samplingResult}
                      </div>
                      <div style={{ fontSize: 12, color: '#cbd5e1', marginTop: 4 }}>CFU/odtis</div>
                      <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 600, marginTop: 12 }}>
                        {samplingResult <= 1 ? '✅ SKLADNO' : samplingResult <= 5 ? '⚠️ OPOZORILO' : '❌ UKREPAJ'}
                      </div>
                    </motion.div>
                  ) : (
                    <div style={{ padding: 40, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '2px dashed rgba(255,255,255,0.1)', textAlign: 'center' }}>
                      <div style={{ fontSize: 32, marginBottom: 8 }}>🔬</div>
                      <div style={{ fontSize: 13, color: '#94a3b8' }}>Pritisni "Izvedi vzorčenje"</div>
                    </div>
                  )}

                  <div style={{ marginTop: 12, padding: 10, background: 'rgba(16,185,129,0.08)', borderRadius: 8, border: '1px solid rgba(16,185,129,0.2)', fontSize: 11, color: '#cbd5e1', lineHeight: 1.5 }}>
                    <strong style={{ color: '#6ee7b7' }}>Meje za Grade A/B:</strong><br />
                    ≤1 CFU = Skladno<br />
                    2–5 CFU = Opozorilo<br />
                    &gt;5 CFU = Preseženo
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeControl === 'video' && (
            <div style={{ padding: 16, background: 'rgba(245, 158, 11, 0.1)', borderRadius: 12, border: '1px solid rgba(245, 158, 11, 0.25)' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                <div style={{ fontSize: 40 }}>📹</div>
                <div>
                  <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 18, marginBottom: 4 }}>Video analiza tehnike oblačenja</div>
                  <div style={{ color: '#94a3b8', fontSize: 13 }}>Snemanje za preverjanje postopka in usposabljanje</div>
                </div>
              </div>

              {/* Video mockup */}
              <div style={{ position: 'relative', height: 220, background: 'rgba(0,0,0,0.4)', borderRadius: 12, border: '2px solid rgba(245,158,11,0.3)', display: 'flex', alignItems: 'center', justifyContent: 'center', overflow: 'hidden' }}>
                {/* Fake video feed with animated person */}
                <div style={{ textAlign: 'center' }}>
                  <motion.div
                    animate={{ y: [0, -10, 0] }}
                    transition={{ duration: 2, repeat: Infinity }}
                    style={{ fontSize: 80, marginBottom: 8 }}
                  >
                    🚶
                  </motion.div>
                  <div style={{ fontSize: 13, color: '#fbbf24', fontWeight: 600 }}>● REC 00:02:34</div>
                </div>

                {/* Annotations overlay */}
                <div style={{ position: 'absolute', top: 12, left: 12, background: 'rgba(0,0,0,0.7)', padding: 8, borderRadius: 6, fontSize: 11, color: '#6ee7b7' }}>
                  ✓ Kapuca pravilno nameščena
                </div>
                <div style={{ position: 'absolute', top: 50, right: 12, background: 'rgba(239,68,68,0.7)', padding: 8, borderRadius: 6, fontSize: 11, color: '#fecaca' }}>
                  ⚠️ Dotik obraza zaznan
                </div>
                <div style={{ position: 'absolute', bottom: 12, left: 12, background: 'rgba(0,0,0,0.7)', padding: 8, borderRadius: 6, fontSize: 11, color: '#cbd5e1' }}>
                  Operator: A. Novak | Cona: Grade B
                </div>
              </div>

              <div style={{ marginTop: 16, display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
                <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Zaznane napake</div>
                  <div style={{ fontSize: 24, color: '#ef4444', fontWeight: 700 }}>2</div>
                  <div style={{ fontSize: 11, color: '#cbd5e1', marginTop: 4 }}>Dotik obraza, gubanje obleke</div>
                </div>
                <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
                  <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>Ocena tehnike</div>
                  <div style={{ fontSize: 24, color: '#f59e0b', fontWeight: 700 }}>75%</div>
                  <div style={{ fontSize: 11, color: '#cbd5e1', marginTop: 4 }}>Potrebna korekcija</div>
                </div>
              </div>

              <div style={{ marginTop: 12, padding: 12, background: 'rgba(245,158,11,0.08)', borderRadius: 8, border: '1px solid rgba(245,158,11,0.2)', fontSize: 12, color: '#cbd5e1', lineHeight: 1.6 }}>
                <strong style={{ color: '#fbbf24' }}>💡 Uporaba:</strong> Video posnetki omogočajo kasnejšo analizo, identifikacijo pogostih napak in usposabljanje novih operaterjev. Vsi posnetki morajo biti arhivirani in dostopni za preglede.
              </div>
            </div>
          )}

          {activeControl === 'training' && (
            <div style={{ padding: 16, background: 'rgba(236, 72, 153, 0.1)', borderRadius: 12, border: '1px solid rgba(236, 72, 153, 0.25)' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
                <div style={{ fontSize: 40 }}>🎓</div>
                <div>
                  <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 18, marginBottom: 4 }}>Periodično ponovno usposabljanje</div>
                  <div style={{ color: '#94a3b8', fontSize: 13 }}>GMP zahteva vsaj 2× letno usposabljanje za osebje v kritičnih conah</div>
                </div>
              </div>

              {/* Training schedule */}
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
                <div>
                  <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 8 }}>Zadnje usposabljanje</div>
                  <div style={{ padding: 16, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
                    <div style={{ fontSize: 32, marginBottom: 8 }}>📅</div>
                    <input
                      type="date"
                      value={trainingDate.toISOString().split('T')[0]}
                      onChange={(e) => setTrainingDate(new Date(e.target.value))}
                      style={{ width: '100%', padding: 8, borderRadius: 6, background: '#0b1220', color: '#e6eef8', border: '1px solid #334155', fontSize: 13 }}
                    />
                    <div style={{ marginTop: 12, fontSize: 12, color: '#cbd5e1' }}>
                      <strong>Status:</strong> {isTrainingDue() ? (
                        <span style={{ color: '#ef4444', fontWeight: 700 }}> ⚠️ Potrebno ponovno usposabljanje!</span>
                      ) : (
                        <span style={{ color: '#22c55e', fontWeight: 700 }}> ✅ Aktualno</span>
                      )}
                    </div>
                  </div>
                </div>

                <div>
                  <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 8 }}>Vsebina usposabljanja</div>
                  <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
                    {[
                      '✓ Tehnika oblačenja in slačenja',
                      '✓ Pravilna uporaba zaščitne opreme',
                      '✓ Higiena rok in osebna higiena',
                      '✓ Mikrobiološka tveganja',
                      '✓ Praktična demonstracija',
                      '✓ Pisni test (min. 80%)'
                    ].map((item, i) => (
                      <motion.div
                        key={i}
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: i * 0.1 }}
                        style={{ padding: 8, borderBottom: i < 5 ? '1px solid rgba(255,255,255,0.05)' : 'none', fontSize: 12, color: '#cbd5e1' }}
                      >
                        {item}
                      </motion.div>
                    ))}
                  </div>
                </div>
              </div>

              <div style={{ marginTop: 16, padding: 12, background: 'rgba(236,72,153,0.08)', borderRadius: 8, border: '1px solid rgba(236,72,153,0.2)', fontSize: 12, color: '#cbd5e1', lineHeight: 1.6 }}>
                <strong style={{ color: '#fbcfe8' }}>💡 Frekvenca:</strong> EU GMP Annex 1 zahteva vsaj 2× letno ponovno usposabljanje za osebje, ki dela v Grade A/B conah. Dodatno usposabljanje po spremembi postopka, po daljši odsotnosti ali po zaznanih odstopanjih.
              </div>
            </div>
          )}
        </motion.div>
      </AnimatePresence>
    </div>
  )
}

export function IsolatorCrossSection() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [showH2O2, setShowH2O2] = useState(false)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let frame = 0

    const animate = () => {
      frame++
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Isolator chamber
      ctx.strokeStyle = '#7c3aed'
      ctx.lineWidth = 3
      ctx.fillStyle = 'rgba(124, 58, 237, 0.05)'
      ctx.fillRect(50, 50, 500, 250)
      ctx.strokeRect(50, 50, 500, 250)

      // HEPA filter at top
      ctx.fillStyle = '#06b6d4'
      ctx.fillRect(200, 50, 200, 20)
      ctx.strokeStyle = '#06b6d4'
      ctx.strokeRect(200, 50, 200, 20)
      ctx.font = 'bold 12px Inter'
      ctx.fillStyle = '#06b6d4'
      ctx.textAlign = 'center'
      ctx.fillText('HEPA Filter', 300, 45)

      // Air flow arrows
      for (let i = 0; i < 5; i++) {
        const x = 220 + i * 35
        const y = 70 + (Math.sin(frame / 20 + i) * 5)
        ctx.strokeStyle = '#06b6d4'
        ctx.lineWidth = 2
        ctx.beginPath()
        ctx.moveTo(x, y)
        ctx.lineTo(x, y + 30)
        ctx.lineTo(x - 5, y + 25)
        ctx.moveTo(x, y + 30)
        ctx.lineTo(x + 5, y + 25)
        ctx.stroke()
      }

      // Gloves/sleeves
      const gloveY = 150
      ctx.fillStyle = 'rgba(251, 191, 36, 0.3)'
      ctx.strokeStyle = '#fbbf24'
      ctx.lineWidth = 2
      // Left glove
      ctx.beginPath()
      ctx.arc(100, gloveY, 15, 0, Math.PI * 2)
      ctx.fill()
      ctx.stroke()
      ctx.beginPath()
      ctx.moveTo(50, gloveY)
      ctx.lineTo(85, gloveY)
      ctx.lineWidth = 10
      ctx.strokeStyle = '#fbbf24'
      ctx.stroke()

      // Right glove
      ctx.beginPath()
      ctx.arc(500, gloveY, 15, 0, Math.PI * 2)
      ctx.fillStyle = 'rgba(251, 191, 36, 0.3)'
      ctx.fill()
      ctx.strokeStyle = '#fbbf24'
      ctx.lineWidth = 2
      ctx.stroke()
      ctx.beginPath()
      ctx.moveTo(515, gloveY)
      ctx.lineTo(550, gloveY)
      ctx.lineWidth = 10
      ctx.strokeStyle = '#fbbf24'
      ctx.stroke()

      // Transfer lock (airlock)
      ctx.strokeStyle = '#10b981'
      ctx.lineWidth = 2
      ctx.strokeRect(460, 200, 80, 40)
      ctx.fillStyle = 'rgba(16, 185, 129, 0.1)'
      ctx.fillRect(460, 200, 80, 40)
      ctx.font = '10px Inter'
      ctx.fillStyle = '#10b981'
      ctx.textAlign = 'center'
      ctx.fillText('Transfer', 500, 218)
      ctx.fillText('Lock', 500, 230)

      // Product inside
      ctx.fillStyle = '#a78bfa'
      ctx.fillRect(250, 220, 40, 60)
      ctx.strokeStyle = '#7c3aed'
      ctx.strokeRect(250, 220, 40, 60)
      ctx.font = '10px Inter'
      ctx.fillStyle = '#e6eef8'
      ctx.textAlign = 'center'
      ctx.fillText('Product', 270, 255)

      // H2O2 decontamination visualization
      if (showH2O2) {
        for (let i = 0; i < 50; i++) {
          const x = 60 + Math.random() * 480
          const y = 60 + Math.random() * 230 + Math.sin(frame / 10 + i) * 10
          ctx.fillStyle = `rgba(96, 165, 250, ${Math.random() * 0.5 + 0.3})`
          ctx.beginPath()
          ctx.arc(x, y, 2 + Math.random() * 2, 0, Math.PI * 2)
          ctx.fill()
        }
        
        ctx.font = 'bold 16px Inter'
        ctx.fillStyle = '#60a5fa'
        ctx.textAlign = 'center'
        ctx.fillText('H₂O₂ DECONTAMINATION ACTIVE', 300, 320)
      }

      // Labels
      ctx.font = '11px Inter'
      ctx.fillStyle = '#cbd5e1'
      ctx.textAlign = 'left'
      ctx.fillText('Grade D Environment', 10, 160)
      ctx.fillText('(outside)', 10, 175)

      requestAnimationFrame(animate)
    }

    const animationId = requestAnimationFrame(animate)
    return () => cancelAnimationFrame(animationId)
  }, [showH2O2])

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 12, textAlign: 'center'}}>Isolator Cross-Section</h4>
      <canvas ref={canvasRef} width={600} height={350} style={{maxWidth: '100%', background: 'rgba(0,0,0,0.3)', borderRadius: 8, display: 'block', margin: '0 auto'}} />
      <div style={{display: 'flex', gap: 12, justifyContent: 'center', marginTop: 16}}>
        <motion.button
          className={!showH2O2 ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setShowH2O2(false)}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          Normal Operation
        </motion.button>
        <motion.button
          className={showH2O2 ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setShowH2O2(true)}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          H₂O₂ Decontamination
        </motion.button>
      </div>
      <p style={{color: 'var(--muted)', fontSize: 13, textAlign: 'center', marginTop: 12}}>
        Izolator Grade A lahko stoji v Grade D okolju - fizična bariera ščiti izdelek. H₂O₂ dosega 6-log redukcijo.
      </p>
    </div>
  )
}

export function RiskMatrix() {
  const [hoveredCell, setHoveredCell] = useState<{severity: number; occurrence: number} | null>(null)

  const getRiskColor = (severity: number, occurrence: number) => {
    const rpn = severity * occurrence
    if (rpn >= 15) return '#ef4444' // High risk - Red
    if (rpn >= 8) return '#f59e0b' // Medium risk - Orange
    return '#10b981' // Low risk - Green
  }

  const getRiskLabel = (severity: number, occurrence: number) => {
    const rpn = severity * occurrence
    if (rpn >= 15) return 'HIGH'
    if (rpn >= 8) return 'MEDIUM'
    return 'LOW'
  }

  const severityLabels = ['Negligible', 'Minor', 'Moderate', 'Major', 'Critical']
  const occurrenceLabels = ['Rare', 'Unlikely', 'Possible', 'Likely', 'Frequent']

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 20, textAlign: 'center'}}>Risk Assessment Matrix (Severity × Occurrence)</h4>
      
      <div style={{display: 'flex', gap: 20, justifyContent: 'center', alignItems: 'flex-start'}}>
        {/* Matrix */}
        <div style={{display: 'flex', flexDirection: 'column', gap: 2}}>
          <div style={{display: 'flex', gap: 2, marginBottom: 8, paddingLeft: 80}}>
            {occurrenceLabels.map((label, i) => (
              <div key={i} style={{width: 70, fontSize: 11, color: '#cbd5e1', textAlign: 'center', fontWeight: 600}}>
                {label}
              </div>
            ))}
          </div>
          
          {[5, 4, 3, 2, 1].map((severity) => (
            <div key={severity} style={{display: 'flex', gap: 2, alignItems: 'center'}}>
              <div style={{width: 70, fontSize: 11, color: '#cbd5e1', textAlign: 'right', paddingRight: 8, fontWeight: 600}}>
                {severityLabels[severity - 1]}
              </div>
              {[1, 2, 3, 4, 5].map((occurrence) => {
                const rpn = severity * occurrence
                const color = getRiskColor(severity, occurrence)
                const isHovered = hoveredCell?.severity === severity && hoveredCell?.occurrence === occurrence
                
                return (
                  <motion.div
                    key={occurrence}
                    style={{
                      width: 70,
                      height: 50,
                      background: `linear-gradient(135deg, ${color}22, ${color}11)`,
                      border: `2px solid ${color}`,
                      borderRadius: 8,
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'center',
                      justifyContent: 'center',
                      cursor: 'pointer',
                      position: 'relative'
                    }}
                    whileHover={{scale: 1.1, zIndex: 10}}
                    onHoverStart={() => setHoveredCell({severity, occurrence})}
                    onHoverEnd={() => setHoveredCell(null)}
                  >
                    <div style={{fontSize: 16, fontWeight: 700, color}}>
                      {rpn}
                    </div>
                    <div style={{fontSize: 9, color: 'var(--muted)', textTransform: 'uppercase', fontWeight: 600}}>
                      {getRiskLabel(severity, occurrence)}
                    </div>
                  </motion.div>
                )
              })}
            </div>
          ))}
        </div>

        {/* Legend & Info */}
        <div style={{
          background: 'rgba(124, 58, 237, 0.1)',
          padding: 16,
          borderRadius: 12,
          border: '1px solid rgba(124, 58, 237, 0.3)',
          minWidth: 180
        }}>
          <h5 style={{margin: '0 0 12px 0', fontSize: 14, color: '#e6eef8'}}>Risk Priority Number</h5>
          <div style={{fontSize: 13, color: 'var(--muted)', marginBottom: 12}}>
            <strong style={{color: '#e6eef8'}}>RPN = S × O × D</strong>
            <div style={{marginTop: 8, fontSize: 12, lineHeight: 1.6}}>
              <div>• Severity (1-5)</div>
              <div>• Occurrence (1-5)</div>
              <div>• Detection (1-5)</div>
            </div>
          </div>

          <div style={{marginTop: 16, paddingTop: 12, borderTop: '1px solid rgba(255,255,255,0.1)'}}>
            <div style={{display: 'flex', alignItems: 'center', gap: 8, marginBottom: 6}}>
              <div style={{width: 16, height: 16, background: '#ef4444', borderRadius: 4}}></div>
              <span style={{fontSize: 12, color: '#e6eef8'}}>High (≥15)</span>
            </div>
            <div style={{display: 'flex', alignItems: 'center', gap: 8, marginBottom: 6}}>
              <div style={{width: 16, height: 16, background: '#f59e0b', borderRadius: 4}}></div>
              <span style={{fontSize: 12, color: '#e6eef8'}}>Medium (8-14)</span>
            </div>
            <div style={{display: 'flex', alignItems: 'center', gap: 8}}>
              <div style={{width: 16, height: 16, background: '#10b981', borderRadius: 4}}></div>
              <span style={{fontSize: 12, color: '#e6eef8'}}>Low (&lt;8)</span>
            </div>
          </div>

          {hoveredCell && (
            <motion.div
              initial={{opacity: 0, y: -10}}
              animate={{opacity: 1, y: 0}}
              style={{
                marginTop: 16,
                padding: 12,
                background: 'rgba(124, 58, 237, 0.2)',
                borderRadius: 8,
                fontSize: 12
              }}
            >
              <strong style={{color: '#7c3aed'}}>Selected Cell:</strong>
              <div style={{marginTop: 6, color: 'var(--muted)'}}>
                Severity: {hoveredCell.severity}<br/>
                Occurrence: {hoveredCell.occurrence}<br/>
                RPN: {hoveredCell.severity * hoveredCell.occurrence}
              </div>
            </motion.div>
          )}
        </div>
      </div>

      <p style={{color: 'var(--muted)', fontSize: 13, textAlign: 'center', marginTop: 20}}>
        Višji RPN = Višja prioriteta za ukrepanje. RPN {'>'} 100 zahteva takojšnje korektivne ukrepe.
      </p>
    </div>
  )
}

export function DocumentFlow() {
  const [selectedPrinciple, setSelectedPrinciple] = useState<string | null>(null)

  const principles = [
    {
      id: 'attributable',
      label: 'A',
      title: 'Attributable',
      color: '#3b82f6',
      description: 'Who did what, when? Clear identification of person, date, time.',
      examples: 'Electronic signature, username/timestamp, traceability to individual'
    },
    {
      id: 'legible',
      label: 'L',
      title: 'Legible',
      color: '#8b5cf6',
      description: 'Data must be readable and understandable throughout retention period.',
      examples: 'Permanent ink, secure electronic format, no overwriting'
    },
    {
      id: 'contemporaneous',
      label: 'C',
      title: 'Contemporaneous',
      color: '#ec4899',
      description: 'Recorded at the time the activity is performed.',
      examples: 'Real-time documentation, no backdating, automated timestamping'
    },
    {
      id: 'original',
      label: 'O',
      title: 'Original',
      color: '#f59e0b',
      description: 'First recorded data (or certified true copy).',
      examples: 'Raw data from equipment, audit trail, backup systems'
    },
    {
      id: 'accurate',
      label: 'A+',
      title: 'Accurate',
      color: '#10b981',
      description: 'True, correct, complete. No errors or omissions.',
      examples: 'Calibrated equipment, verification checks, full audit trail'
    }
  ]

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 30, textAlign: 'center'}}>ALCOA+ Data Integrity Principles</h4>
      
      <svg width="100%" height="400" viewBox="0 0 700 400" style={{maxWidth: 700, margin: '0 auto', display: 'block'}}>
        {/* Connecting line */}
        <path
          d="M 50 200 L 650 200"
          stroke="rgba(255,255,255,0.2)"
          strokeWidth="3"
          fill="none"
        />

        {principles.map((principle, i) => {
          const x = 50 + i * 150
          const y = 200
          const isSelected = selectedPrinciple === principle.id

          return (
            <g key={principle.id}>
              {/* Node circle */}
              <motion.circle
                cx={x}
                cy={y}
                r={isSelected ? 45 : 35}
                fill={principle.color}
                stroke="white"
                strokeWidth={isSelected ? 4 : 2}
                style={{cursor: 'pointer', filter: isSelected ? 'drop-shadow(0 0 20px ' + principle.color + ')' : 'none'}}
                whileHover={{scale: 1.2}}
                onClick={() => setSelectedPrinciple(principle.id)}
                initial={{scale: 0}}
                animate={{scale: 1}}
                transition={{delay: i * 0.1}}
              />

              {/* Label */}
              <text
                x={x}
                y={y + 8}
                textAnchor="middle"
                fill="white"
                fontSize="24"
                fontWeight="bold"
                style={{pointerEvents: 'none', userSelect: 'none'}}
              >
                {principle.label}
              </text>

              {/* Title below */}
              <text
                x={x}
                y={y + 65}
                textAnchor="middle"
                fill={principle.color}
                fontSize="14"
                fontWeight="600"
                style={{pointerEvents: 'none'}}
              >
                {principle.title}
              </text>

              {/* Arrow to next */}
              {i < principles.length - 1 && (
                <motion.path
                  d={`M ${x + 40} ${y} L ${x + 110} ${y}`}
                  stroke={principle.color}
                  strokeWidth="2"
                  fill="none"
                  markerEnd="url(#arrowhead)"
                  initial={{pathLength: 0}}
                  animate={{pathLength: 1}}
                  transition={{delay: i * 0.1 + 0.3, duration: 0.5}}
                />
              )}
            </g>
          )
        })}

        {/* Arrow marker definition */}
        <defs>
          <marker
            id="arrowhead"
            markerWidth="10"
            markerHeight="10"
            refX="9"
            refY="3"
            orient="auto"
          >
            <polygon points="0 0, 10 3, 0 6" fill="rgba(255,255,255,0.6)" />
          </marker>
        </defs>
      </svg>

      {/* Detail panel */}
      <AnimatePresence>
        {selectedPrinciple && (
          <motion.div
            initial={{opacity: 0, y: 20}}
            animate={{opacity: 1, y: 0}}
            exit={{opacity: 0, y: 20}}
            style={{
              marginTop: 30,
              background: `linear-gradient(135deg, ${principles.find(p => p.id === selectedPrinciple)?.color}22, ${principles.find(p => p.id === selectedPrinciple)?.color}11)`,
              padding: 24,
              borderRadius: 16,
              border: `2px solid ${principles.find(p => p.id === selectedPrinciple)?.color}`
            }}
          >
            {(() => {
              const principle = principles.find(p => p.id === selectedPrinciple)
              if (!principle) return null
              return (
                <>
                  <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16}}>
                    <h3 style={{margin: 0, color: principle.color, fontSize: 20}}>
                      {principle.title}
                    </h3>
                    <button
                      onClick={() => setSelectedPrinciple(null)}
                      style={{
                        background: 'rgba(255,255,255,0.1)',
                        border: '1px solid rgba(255,255,255,0.2)',
                        color: 'white',
                        padding: '6px 12px',
                        borderRadius: 8,
                        cursor: 'pointer',
                        fontSize: 14
                      }}
                    >
                      Close ✕
                    </button>
                  </div>
                  
                  <p style={{margin: '0 0 16px 0', color: '#e6eef8', fontSize: 15, lineHeight: 1.7}}>
                    {principle.description}
                  </p>

                  <div style={{
                    background: 'rgba(0,0,0,0.2)',
                    padding: 16,
                    borderRadius: 12,
                    borderLeft: `4px solid ${principle.color}`
                  }}>
                    <div style={{color: principle.color, fontWeight: 600, marginBottom: 8, fontSize: 13}}>
                      Examples:
                    </div>
                    <div style={{color: 'var(--muted)', fontSize: 14, lineHeight: 1.6}}>
                      {principle.examples}
                    </div>
                  </div>
                </>
              )
            })()}
          </motion.div>
        )}
      </AnimatePresence>

      {!selectedPrinciple && (
        <div style={{
          marginTop: 30,
          textAlign: 'center',
          color: 'var(--muted)',
          fontSize: 14,
          fontStyle: 'italic'
        }}>
          Click on any principle to see details
        </div>
      )}
    </div>
  )
}

// Cleaning & Disinfection Simulator (Lesson 107)
export function CleaningDisinfectionSimulator() {
  const [step, setStep] = useState<'physical' | 'chemical' | 'disinfection'>('physical')
  const [physicalMethod, setPhysicalMethod] = useState<'wipe' | 'rinse' | 'ultrasonic' | 'pressure'>('wipe')
  const [chemicalAgent, setChemicalAgent] = useState<'detergent' | 'alkaline' | 'acidic' | 'enzymatic'>('detergent')
  const [disinfectant, setDisinfectant] = useState<'alcohol' | 'qac' | 'h2o2' | 'peracetic' | 'chlorine'>('alcohol')
  const [scenario, setScenario] = useState<'correct' | 'no-cleaning' | 'wrong-order' | 'insufficient-contact' | 'incompatible' | 'residue'>('correct')
  const [contactTime, setContactTime] = useState(10) // minutes

  // Physical cleaning methods
  const physicalMethods = {
    wipe: { name: '🧽 Brisanje / Drgnjenje', desc: 'Mehanska odstranitev z brisanjem in drgnjenjem', effectiveness: 80, typical: 'Površine, oprema, kritične točke' },
    rinse: { name: '💧 Izpiranje z vodo/topili', desc: 'Odstranjevanje nečistoč z vodo ali topili', effectiveness: 65, typical: 'Splošne površine, posode, cevi' },
    ultrasonic: { name: '🔊 Ultrazvok', desc: 'Ultrazvočne vibracije za težko dostopna mesta', effectiveness: 90, typical: 'Majhni deli, ventili, luknje, navojne spojke' },
    pressure: { name: '💨 Visokotlačno pršenje', desc: 'Močan vodni curek za velike površine', effectiveness: 85, typical: 'Stene, tla, večje posode, procesi zunaj A/B razreda' }
  }

  // Chemical cleaning agents
  const chemicalAgents = {
    detergent: { name: '🧴 Detergenti', desc: 'Odstranjevanje maščob, olj, organskih ostankov', target: 'Maščobe, olja', pH: 'Nevtralen (7)', typical: 'Površine s povečano maščobo' },
    alkaline: { name: '⬆️ Alkalni čistilci', desc: 'Razgradnja organskih snovi (proteini, maščobe)', target: 'Organski ostanki, proteini', pH: 'Visok (>10)', typical: 'Biološki ostanki, celične strukture' },
    acidic: { name: '⬇️ Kisli čistilci', desc: 'Odstranjevanje mineralnih oblog, vodnega kamna', target: 'Mineralne obloge, vodni kamen', pH: 'Nizek (<4)', typical: 'Kamnite obloge, oksidacija' },
    enzymatic: { name: '🧬 Encimski čistilci', desc: 'Encimi razgradijo beljakovine in organske snovi', target: 'Proteini, kri, biološki materiali', pH: 'Nevtralen-rahlo alkalen', typical: 'Biološke kontaminacije' }
  }

  // Disinfectants
  const disinfectants = {
    alcohol: { name: '🍷 70% Alkohol (IPA/Etanol)', spectrum: 'Bakterije (veg.), virusi, glive', contactMin: 1, residue: 'Brez', limit: 'Ne deluje na spore', stability: 'Hlapi hitro' },
    qac: { name: '🧪 Četrtične amonijeve spojine (QAC)', spectrum: 'Bakterije (veg.), virusi (del), glive', contactMin: 10, residue: 'Lahko pusti film', limit: 'Ne deluje na spore', stability: 'Stabilno' },
    h2o2: { name: '💥 Vodikov peroksid (H₂O₂)', spectrum: 'Bakterije (veg. in spore), virusi, glive', contactMin: 30, residue: 'Razpade v H₂O + O₂', limit: 'Sporicidno (>6%)', stability: 'Razpada pri svetlobi' },
    peracetic: { name: '⚡ Peroctena kislina', spectrum: 'Bakterije (veg. in spore), virusi, glive, biofilm', contactMin: 15, residue: 'Razpade v ocetno kislino + O₂', limit: 'Sporicidno', stability: 'Oksidativno, korozivno' },
    chlorine: { name: '🌊 Klorni pripravki (NaOCl)', spectrum: 'Bakterije (veg.), virusi, spore (visoke konc.)', contactMin: 10, residue: 'Lahko korozivno', limit: 'Inaktivacija z organskimi snovmi', stability: 'Nestabilno, hlapi' }
  }

  // Scenarios
  const scenarios = {
    correct: { name: '✅ Pravilen postopek', desc: 'Fizikalno čiščenje → Kemijsko čiščenje → Izpiranje → Razkuževanje → Kontaktni čas → Suho brisanje', result: 'success', contamination: 0 },
    'no-cleaning': { name: '❌ Brez predhodnega čiščenja', desc: 'Razkuževanje brez čiščenja – organske snovi blokirajo učinek', result: 'fail', contamination: 75 },
    'wrong-order': { name: '⚠️ Napačen vrstni red', desc: 'Razkuževanje pred čiščenjem → zmanjšana učinkovitost', result: 'partial', contamination: 40 },
    'insufficient-contact': { name: '⏱️ Prekratek kontaktni čas', desc: 'Razkuževalo odstranimo prezgodaj (< min. čas)', result: 'partial', contamination: 50 },
    incompatible: { name: '🔀 Nezdružljivi agensi', desc: 'Mešanje alkalijev in kislin ali QAC z anionskimi detergenti', result: 'fail', contamination: 85 },
    residue: { name: '🧼 Ostanki čistil', desc: 'Nepopolno izpiranje pusti ostanke, ki vplivajo na proizvod', result: 'partial', contamination: 30 }
  }

  const minContactTime = disinfectants[disinfectant].contactMin
  const isContactSufficient = contactTime >= minContactTime
  const currentScenario = scenarios[scenario]

  let finalContamination = currentScenario.contamination
  if (scenario === 'insufficient-contact' && contactTime < minContactTime) {
    finalContamination = Math.max(30, 80 - contactTime * 3)
  } else if (scenario === 'correct') {
    finalContamination = isContactSufficient ? 0 : 15
  }

  const statusColor = finalContamination === 0 ? '#22c55e' : finalContamination < 30 ? '#f59e0b' : '#ef4444'
  const statusLabel = finalContamination === 0 ? 'UČINKOVITO' : finalContamination < 30 ? 'DELNO UČINKOVITO' : 'NEUČINKOVITO'

  return (
    <div style={{ padding: 16, background: 'rgba(16, 185, 129, 0.08)', borderRadius: 12, border: '1px solid rgba(16, 185, 129, 0.25)' }}>
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
        {/* Left: Controls */}
        <div>
          <div style={{ marginBottom: 16 }}>
            <div style={{ color: '#e6eef8', fontWeight: 700, marginBottom: 8 }}>Korak procesa</div>
            <div style={{ display: 'flex', gap: 8 }}>
              {(['physical', 'chemical', 'disinfection'] as const).map(s => (
                <button
                  key={s}
                  onClick={() => setStep(s)}
                  style={{
                    flex: 1,
                    padding: 10,
                    background: step === s ? 'linear-gradient(135deg, #10b981, #059669)' : 'rgba(255,255,255,0.05)',
                    border: step === s ? '2px solid #10b981' : '2px solid rgba(255,255,255,0.1)',
                    borderRadius: 8,
                    color: '#e6eef8',
                    fontSize: 13,
                    fontWeight: 600,
                    cursor: 'pointer'
                  }}
                >
                  {s === 'physical' ? '1️⃣ Fizikalno' : s === 'chemical' ? '2️⃣ Kemijsko' : '3️⃣ Razkuževanje'}
                </button>
              ))}
            </div>
          </div>

          {step === 'physical' && (
            <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
              <div style={{ color: '#10b981', fontWeight: 700, marginBottom: 8 }}>Fizikalno čiščenje</div>
              {Object.entries(physicalMethods).map(([key, val]) => (
                <label key={key} style={{ display: 'flex', alignItems: 'center', padding: 8, marginBottom: 4, background: physicalMethod === key ? 'rgba(16,185,129,0.15)' : 'transparent', borderRadius: 6, cursor: 'pointer' }}>
                  <input type="radio" name="physical" checked={physicalMethod === key} onChange={() => setPhysicalMethod(key as any)} style={{ marginRight: 8 }} />
                  <div style={{ flex: 1 }}>
                    <div style={{ color: '#e6eef8', fontSize: 14, fontWeight: 600 }}>{val.name}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12 }}>{val.desc}</div>
                    <div style={{ color: '#6ee7b7', fontSize: 11, marginTop: 2 }}>Učinkovitost: {val.effectiveness}% | {val.typical}</div>
                  </div>
                </label>
              ))}
            </div>
          )}

          {step === 'chemical' && (
            <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
              <div style={{ color: '#10b981', fontWeight: 700, marginBottom: 8 }}>Kemijsko čiščenje</div>
              {Object.entries(chemicalAgents).map(([key, val]) => (
                <label key={key} style={{ display: 'flex', alignItems: 'center', padding: 8, marginBottom: 4, background: chemicalAgent === key ? 'rgba(16,185,129,0.15)' : 'transparent', borderRadius: 6, cursor: 'pointer' }}>
                  <input type="radio" name="chemical" checked={chemicalAgent === key} onChange={() => setChemicalAgent(key as any)} style={{ marginRight: 8 }} />
                  <div style={{ flex: 1 }}>
                    <div style={{ color: '#e6eef8', fontSize: 14, fontWeight: 600 }}>{val.name}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12 }}>{val.desc}</div>
                    <div style={{ color: '#6ee7b7', fontSize: 11, marginTop: 2 }}>Cilj: {val.target} | pH: {val.pH}</div>
                  </div>
                </label>
              ))}
            </div>
          )}

          {step === 'disinfection' && (
            <div style={{ padding: 12, background: 'rgba(255,255,255,0.03)', borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)' }}>
              <div style={{ color: '#10b981', fontWeight: 700, marginBottom: 8 }}>Razkuževanje</div>
              {Object.entries(disinfectants).map(([key, val]) => (
                <label key={key} style={{ display: 'flex', alignItems: 'center', padding: 8, marginBottom: 4, background: disinfectant === key ? 'rgba(16,185,129,0.15)' : 'transparent', borderRadius: 6, cursor: 'pointer' }}>
                  <input type="radio" name="disinfectant" checked={disinfectant === key} onChange={() => setDisinfectant(key as any)} style={{ marginRight: 8 }} />
                  <div style={{ flex: 1 }}>
                    <div style={{ color: '#e6eef8', fontSize: 14, fontWeight: 600 }}>{val.name}</div>
                    <div style={{ color: '#94a3b8', fontSize: 12 }}>Spekter: {val.spectrum}</div>
                    <div style={{ color: '#6ee7b7', fontSize: 11, marginTop: 2 }}>Kontakt: ≥{val.contactMin} min | Ostanek: {val.residue}</div>
                  </div>
                </label>
              ))}

              <div style={{ marginTop: 12 }}>
                <label style={{ color: '#94a3b8', fontSize: 12 }}>Kontaktni čas (min)</label>
                <input type="range" min={1} max={60} step={1} value={contactTime} onChange={e => setContactTime(parseInt(e.target.value))} style={{ width: '100%' }} />
                <div style={{ color: isContactSufficient ? '#22c55e' : '#ef4444', fontSize: 13, fontWeight: 600 }}>
                  {contactTime} min {isContactSufficient ? `(✅ ≥${minContactTime} min)` : `(❌ <${minContactTime} min)`}
                </div>
              </div>
            </div>
          )}

          <div style={{ marginTop: 12 }}>
            <label style={{ color: '#94a3b8', fontSize: 12 }}>Scenarij</label>
            <select value={scenario} onChange={e => setScenario(e.target.value as any)} style={{ width: '100%', padding: 10, borderRadius: 8, background: '#0b1220', color: '#e6eef8', border: '1px solid #334155', fontSize: 13 }}>
              {Object.entries(scenarios).map(([key, val]) => (
                <option key={key} value={key}>{val.name}</option>
              ))}
            </select>
            <div style={{ marginTop: 6, padding: 10, background: 'rgba(255,255,255,0.03)', borderRadius: 6, color: '#cbd5e1', fontSize: 12, lineHeight: 1.5 }}>
              {currentScenario.desc}
            </div>
          </div>
        </div>

        {/* Right: Visualization & Result */}
        <div>
          <div style={{ marginBottom: 12, color: '#e6eef8', fontWeight: 700 }}>Rezultat simulacije</div>
          <div style={{ padding: 16, background: 'rgba(255,255,255,0.04)', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 16 }}>
              <div style={{ width: 16, height: 16, borderRadius: 999, background: statusColor }} />
              <div style={{ color: '#e6eef8', fontWeight: 700, fontSize: 18 }}>{statusLabel}</div>
            </div>

            {/* Contamination bar */}
            <div>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>Preostala kontaminacija</div>
              <div style={{ position: 'relative', height: 28, background: 'rgba(255,255,255,0.06)', borderRadius: 8, overflow: 'hidden' }}>
                <motion.div
                  style={{ height: '100%', background: `linear-gradient(90deg, ${statusColor}, ${statusColor}88)`, borderRadius: 8 }}
                  initial={{ width: '100%' }}
                  animate={{ width: `${finalContamination}%` }}
                  transition={{ duration: 0.6, ease: 'easeOut' }}
                />
                <div style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#e6eef8', fontWeight: 700, fontSize: 14 }}>
                  {finalContamination}%
                </div>
              </div>
            </div>

            {/* Process flow diagram */}
            <div style={{ marginTop: 16 }}>
              <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 8 }}>Tok procesa</div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 6 }}>
                {['Fizikalno', 'Kemijsko', 'Izpiranje', 'Razkuževanje', 'Sušenje'].map((label, i) => (
                  <React.Fragment key={i}>
                    <div style={{
                      flex: 1,
                      padding: 8,
                      background: scenario === 'correct' ? 'rgba(34,197,94,0.2)' : scenario === 'wrong-order' && i > 2 ? 'rgba(239,68,68,0.2)' : 'rgba(255,255,255,0.05)',
                      border: `1px solid ${scenario === 'correct' ? '#22c55e' : scenario === 'wrong-order' && i > 2 ? '#ef4444' : 'rgba(255,255,255,0.1)'}`,
                      borderRadius: 6,
                      textAlign: 'center',
                      fontSize: 11,
                      color: '#cbd5e1',
                      fontWeight: 600
                    }}>
                      {label}
                    </div>
                    {i < 4 && <div style={{ color: '#6ee7b7', fontSize: 16 }}>→</div>}
                  </React.Fragment>
                ))}
              </div>
            </div>

            {/* Info warnings */}
            {scenario === 'no-cleaning' && (
              <div style={{ marginTop: 12, padding: 10, background: 'rgba(239,68,68,0.15)', border: '1px solid rgba(239,68,68,0.3)', borderRadius: 8, color: '#fca5a5', fontSize: 12, lineHeight: 1.5 }}>
                ⚠️ Organske snovi blokirajo delovanje razkuževala. Vedno najprej fizikalno/kemijsko čiščenje!
              </div>
            )}

            {scenario === 'insufficient-contact' && !isContactSufficient && (
              <div style={{ marginTop: 12, padding: 10, background: 'rgba(245,158,11,0.15)', border: '1px solid rgba(245,158,11,0.3)', borderRadius: 8, color: '#fcd34d', fontSize: 12, lineHeight: 1.5 }}>
                ⏱️ Kontaktni čas je prekratek! Za {disinfectants[disinfectant].name} je potrebno vsaj {minContactTime} minut.
              </div>
            )}

            {scenario === 'incompatible' && (
              <div style={{ marginTop: 12, padding: 10, background: 'rgba(239,68,68,0.15)', border: '1px solid rgba(239,68,68,0.3)', borderRadius: 8, color: '#fca5a5', fontSize: 12, lineHeight: 1.5 }}>
                🔀 Nezdružljivi agensi lahko neutralizirajo drug drugega ali tvorijo nevarne produkte (npr. alkali + kislina → toplota/plin).
              </div>
            )}

            {scenario === 'residue' && (
              <div style={{ marginTop: 12, padding: 10, background: 'rgba(245,158,11,0.15)', border: '1px solid rgba(245,158,11,0.3)', borderRadius: 8, color: '#fcd34d', fontSize: 12, lineHeight: 1.5 }}>
                🧼 Nepopolno izpiranje pusti ostanke, ki lahko kontaminirajo proizvod ali povzročijo korozijo opreme.
              </div>
            )}
          </div>

          {/* Educational summary */}
          <div style={{ marginTop: 12, padding: 12, background: 'rgba(16,185,129,0.08)', border: '1px solid rgba(16,185,129,0.25)', borderRadius: 8, color: '#cbd5e1', fontSize: 13, lineHeight: 1.6 }}>
            <strong style={{ color: '#6ee7b7' }}>💡 Ključni principi:</strong>
            <ul style={{ margin: '8px 0 0 16px', paddingLeft: 0 }}>
              <li>Fizikalno čiščenje odstrani večino organskih snovi (80–90%).</li>
              <li>Kemijsko čiščenje razgradi specifične kontaminante (maščobe, proteini, minerali).</li>
              <li>Razkuževanje deluje le na čisti površini – brez organskih ostankov.</li>
              <li>Kontaktni čas mora biti dovolj dolg za popolno delovanje.</li>
              <li>Izpiranje odstrani ostanke čistil/razkužil, ki bi lahko kontaminirali proizvod.</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}

export function DisinfectionCycle() {
  const [currentStep, setCurrentStep] = useState(0)
  const [autoPlay, setAutoPlay] = useState(true)

  const steps = [
    {title: 'Cleaning', subtitle: 'Remove organic matter', color: '#06b6d4', icon: '🧼', agent: 'Detergent + Water'},
    {title: 'Rinse', subtitle: 'Remove cleaning residues', color: '#10b981', icon: '💧', agent: 'WFI / Purified Water'},
    {title: 'Disinfection', subtitle: 'Kill vegetative bacteria', color: '#fbbf24', icon: '🧴', agent: '70% IPA / QAC'},
    {title: 'Sporicidal', subtitle: 'Kill bacterial spores', color: '#f59e0b', icon: '💥', agent: 'H₂O₂ / Peracetic Acid'},
    {title: 'Final Rinse', subtitle: 'Remove disinfectant', color: '#60a5fa', icon: '✨', agent: 'WFI (sterile)'},
    {title: 'Dry', subtitle: 'Remove moisture', color: '#a78bfa', icon: '🌬️', agent: 'Filtered Air / Sterile Wipes'}
  ]

  useEffect(() => {
    if (!autoPlay) return
    const interval = setInterval(() => {
      setCurrentStep(prev => (prev + 1) % steps.length)
    }, 2500)
    return () => clearInterval(interval)
  }, [autoPlay, steps.length])

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 20, textAlign: 'center'}}>Disinfection & Cleaning Cycle</h4>
      
      <div style={{display: 'flex', justifyContent: 'center', marginBottom: 30}}>
        <svg width="600" height="300" style={{maxWidth: '100%'}}>
          {/* Circle track */}
          <circle cx="300" cy="150" r="120" fill="none" stroke="rgba(124, 58, 237, 0.2)" strokeWidth="40" />
          
          {/* Progress arc */}
          <motion.circle
            cx="300"
            cy="150"
            r="120"
            fill="none"
            stroke={steps[currentStep].color}
            strokeWidth="42"
            strokeDasharray={`${(360 / steps.length) * 2.09} ${754}`}
            strokeDashoffset={`${754 - (currentStep * (754 / steps.length))}`}
            initial={{strokeDashoffset: 754}}
            animate={{strokeDashoffset: 754 - (currentStep * (754 / steps.length))}}
            transition={{duration: 0.6, ease: 'easeInOut'}}
            style={{transformOrigin: '300px 150px', transform: 'rotate(-90deg)'}}
          />

          {/* Step indicators */}
          {steps.map((step, i) => {
            const angle = (i / steps.length) * 360 - 90
            const rad = (angle * Math.PI) / 180
            const x = 300 + Math.cos(rad) * 120
            const y = 150 + Math.sin(rad) * 120
            const isActive = i === currentStep

            return (
              <g key={i}>
                <motion.circle
                  cx={x}
                  cy={y}
                  r={isActive ? 24 : 16}
                  fill={isActive ? step.color : 'rgba(255,255,255,0.1)'}
                  stroke={step.color}
                  strokeWidth={isActive ? 3 : 2}
                  animate={{r: isActive ? 24 : 16}}
                  style={{cursor: 'pointer'}}
                  onClick={() => {
                    setCurrentStep(i)
                    setAutoPlay(false)
                  }}
                />
                <text
                  x={x}
                  y={y + 5}
                  textAnchor="middle"
                  fill={isActive ? '#0f172a' : '#e6eef8'}
                  fontSize={isActive ? 20 : 14}
                  fontWeight="bold"
                  style={{pointerEvents: 'none'}}
                >
                  {step.icon}
                </text>
              </g>
            )
          })}

          {/* Center info */}
          <text x="300" y="140" textAnchor="middle" fill="#e6eef8" fontSize="24" fontWeight="bold">
            {steps[currentStep].title}
          </text>
          <text x="300" y="165" textAnchor="middle" fill="#cbd5e1" fontSize="14">
            {steps[currentStep].subtitle}
          </text>
          <text x="300" y="185" textAnchor="middle" fill={steps[currentStep].color} fontSize="13" fontWeight="600">
            {steps[currentStep].agent}
          </text>
        </svg>
      </div>

      <div style={{display: 'flex', gap: 12, justifyContent: 'center', marginBottom: 16}}>
        <motion.button
          className="filter-btn"
          onClick={() => setAutoPlay(!autoPlay)}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          {autoPlay ? '⏸️ Pause' : '▶️ Play'}
        </motion.button>
        <motion.button
          className="filter-btn"
          onClick={() => setCurrentStep((prev) => (prev - 1 + steps.length) % steps.length)}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          ← Previous
        </motion.button>
        <motion.button
          className="filter-btn"
          onClick={() => setCurrentStep((prev) => (prev + 1) % steps.length)}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          Next →
        </motion.button>
      </div>

      <div style={{
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 16,
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)',
        textAlign: 'center'
      }}>
        <div style={{fontSize: 13, color: 'var(--muted)', lineHeight: 1.7}}>
          <strong style={{color: '#e6eef8'}}>Ključno:</strong> Najprej čiščenje (odstranitev organske mase), 
          nato dezinfekcija, rotacija agensov (preprečitev odpornosti), sporicidni agent periodično
        </div>
      </div>
    </div>
  )
}

export function UtilityMonitoring() {
  const [wfiTemp, setWfiTemp] = useState(85)
  const [steamPressure, setSteamPressure] = useState(2.5)
  const [airDewpoint, setAirDewpoint] = useState(-45)

  useEffect(() => {
    const interval = setInterval(() => {
      setWfiTemp(82 + Math.random() * 8)
      setSteamPressure(2 + Math.random() * 1.5)
      setAirDewpoint(-50 + Math.random() * 15)
    }, 2000)
    return () => clearInterval(interval)
  }, [])

  const Gauge = ({value, min, max, label, unit, color, alertMin, alertMax}: {
    value: number; min: number; max: number; label: string; unit: string; color: string; 
    alertMin?: number; alertMax?: number
  }) => {
    const percentage = ((value - min) / (max - min)) * 100
    const isAlert = (alertMin !== undefined && value < alertMin) || (alertMax !== undefined && value > alertMax)
    
    return (
      <div style={{flex: 1, minWidth: 180}}>
        <h5 style={{margin: '0 0 12px 0', fontSize: 14, color: '#e6eef8', textAlign: 'center'}}>{label}</h5>
        <div style={{position: 'relative', width: 120, height: 120, margin: '0 auto'}}>
          <svg width="120" height="120">
            {/* Background arc */}
            <circle cx="60" cy="60" r="50" fill="none" stroke="rgba(255,255,255,0.1)" strokeWidth="12" />
            
            {/* Value arc */}
            <motion.circle
              cx="60"
              cy="60"
              r="50"
              fill="none"
              stroke={isAlert ? '#ef4444' : color}
              strokeWidth="12"
              strokeDasharray={`${percentage * 3.14} 314`}
              strokeLinecap="round"
              initial={{strokeDasharray: '0 314'}}
              animate={{strokeDasharray: `${percentage * 3.14} 314`}}
              transition={{duration: 1}}
              style={{transformOrigin: '60px 60px', transform: 'rotate(-90deg)'}}
            />
            
            {/* Center value */}
            <text x="60" y="55" textAnchor="middle" fill={isAlert ? '#ef4444' : '#e6eef8'} fontSize="24" fontWeight="bold">
              {value.toFixed(1)}
            </text>
            <text x="60" y="72" textAnchor="middle" fill="#cbd5e1" fontSize="12">
              {unit}
            </text>
          </svg>
          
          {isAlert && (
            <motion.div
              initial={{scale: 0}}
              animate={{scale: 1}}
              style={{
                position: 'absolute',
                top: -10,
                right: -10,
                background: '#ef4444',
                color: 'white',
                borderRadius: '50%',
                width: 32,
                height: 32,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 18,
                fontWeight: 'bold'
              }}
            >
              ⚠
            </motion.div>
          )}
        </div>
        
        <div style={{textAlign: 'center', marginTop: 12, fontSize: 11, color: 'var(--muted)'}}>
          Range: {min} - {max} {unit}
          {alertMin !== undefined && (
            <div style={{color: isAlert ? '#ef4444' : '#10b981', fontWeight: 600, marginTop: 4}}>
              {alertMin !== undefined && `Min: ${alertMin}`}
              {alertMax !== undefined && ` Max: ${alertMax}`}
            </div>
          )}
        </div>
      </div>
    )
  }

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 20, textAlign: 'center'}}>Utilities Real-Time Monitoring</h4>
      
      <div style={{display: 'flex', gap: 20, justifyContent: 'center', flexWrap: 'wrap'}}>
        <Gauge 
          value={wfiTemp} 
          min={70} 
          max={95} 
          label="WFI Temperature" 
          unit="°C" 
          color="#06b6d4"
          alertMin={80}
        />
        <Gauge 
          value={steamPressure} 
          min={0} 
          max={4} 
          label="Clean Steam Pressure" 
          unit="bar" 
          color="#10b981"
          alertMin={2}
          alertMax={3.5}
        />
        <Gauge 
          value={airDewpoint} 
          min={-60} 
          max={-30} 
          label="Compressed Air Dewpoint" 
          unit="°C" 
          color="#fbbf24"
          alertMax={-40}
        />
      </div>

      <div style={{
        marginTop: 30,
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 20,
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <h5 style={{margin: '0 0 12px 0', fontSize: 14, color: '#e6eef8'}}>Critical Parameters</h5>
        <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 12, fontSize: 13}}>
          <div>
            <div style={{color: '#06b6d4', fontWeight: 600}}>💧 WFI (Water for Injection)</div>
            <div style={{color: 'var(--muted)', marginTop: 4, fontSize: 12}}>
              • Storage: {'>'} 80°C or circulation {'>'} 65°C<br/>
              • Endotoxins: {'<'} 0.25 EU/ml<br/>
              • Bacteria: {'<'} 10 CFU/100ml
            </div>
          </div>
          <div>
            <div style={{color: '#10b981', fontWeight: 600}}>🔥 Clean Steam</div>
            <div style={{color: 'var(--muted)', marginTop: 4, fontSize: 12}}>
              • Source: WFI (no additives)<br/>
              • Non-condensable gases: {'<'} 3.5%<br/>
              • For SIP (Sterilization-In-Place)
            </div>
          </div>
          <div>
            <div style={{color: '#fbbf24', fontWeight: 600}}>💨 Compressed Air</div>
            <div style={{color: 'var(--muted)', marginTop: 4, fontSize: 12}}>
              • Sterilely filtered (0.2 µm)<br/>
              • Oil-free, particle-free<br/>
              • Dewpoint: {'<'} -40°C
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Utilities troubleshooting playbook (realistic, non-game)
export function UtilityAlarmPlaybook() {
  const scenarios = {
    'wfi-low-temp': {
      name: 'WFI temperature low',
      color: '#06b6d4',
      target: '≥ 80°C (storage) / ≥ 65°C (circulation)',
      symptoms: ['Biofilm risk ↑', 'Conductivity trending up', 'Higher bioburden risk'],
      steps: [
        { id: 'check-heat-exchanger', text: 'Verify heat exchanger output temperature and PID tuning', effect: +25 },
        { id: 'loop-velocity', text: 'Increase loop velocity (1–2 m/s) to reduce cooling and stagnation', effect: +20 },
        { id: 'insulation', text: 'Inspect insulation for heat loss on long runs and dead-legs', effect: +15 },
        { id: 'sanitize', text: 'Schedule hot water sanitization; confirm temperature mapping', effect: +20 },
      ]
    },
    'steam-ncg-high': {
      name: 'Clean steam: non-condensable gases high',
      color: '#10b981',
      target: '< 3.5% (per EN285 / pharmacopeia guidance)',
      symptoms: ['Slower heat transfer', 'Wet packs', 'Uneven sterilization'],
      steps: [
        { id: 'feedwater', text: 'Confirm feedwater is WFI/PW with proper deaeration', effect: +20 },
        { id: 'separator', text: 'Check steam separator and drain traps for proper function', effect: +25 },
        { id: 'venting', text: 'Optimize venting settings; verify air removal cycle', effect: +20 },
        { id: 'sampling', text: 'Re-sample NCG per SOP and trend results', effect: +15 },
      ]
    },
    'air-dewpoint-high': {
      name: 'Compressed air dewpoint too high',
      color: '#f59e0b',
      target: '< -40°C at point-of-use (Class 2 moisture)',
      symptoms: ['Moisture at POU', 'Risk of microbial growth downstream', 'Filter saturation warnings'],
      steps: [
        { id: 'dryer', text: 'Check desiccant/VR cycle dryer performance and service status', effect: +25 },
        { id: 'oil-carryover', text: 'Inspect upstream compressor for oil carryover (use oil-free or proper separators)', effect: +15 },
        { id: 'filtration', text: 'Replace/verify 0.2 μm sterile filters; check differential pressure', effect: +20 },
        { id: 'leaks', text: 'Leak check distribution; repair to maintain pressure and dryer performance', effect: +15 },
      ]
    }
  } as const

  type ScenarioKey = keyof typeof scenarios
  const [active, setActive] = useState<ScenarioKey>('wfi-low-temp')
  const [completed, setCompleted] = useState<Record<string, boolean>>({})

  const scenario = scenarios[active]
  const baseScore = 30 // baseline health
  const score = scenario.steps.reduce((s, step) => s + (completed[`${active}-${step.id}`] ? step.effect : 0), baseScore)
  const risk = Math.max(0, 100 - score)

  return (
    <div style={{ padding: 24 }}>
      <h4 style={{ color: '#7c3aed', marginBottom: 20, textAlign: 'center' }}>Utilities Alarm Playbook</h4>

      {/* Scenario selector */}
      <div style={{ display: 'flex', gap: 12, justifyContent: 'center', flexWrap: 'wrap', marginBottom: 16 }}>
        {Object.keys(scenarios).map((key) => {
          const k = key as ScenarioKey
          const isActive = k === active
          return (
            <motion.button
              key={k}
              onClick={() => setActive(k)}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              style={{
                padding: '10px 14px',
                borderRadius: 10,
                border: `1px solid ${isActive ? scenarios[k].color : 'rgba(255,255,255,0.15)'}`,
                background: isActive ? `${scenarios[k].color}20` : 'rgba(255,255,255,0.04)',
                color: '#e6eef8',
                fontWeight: 600,
                cursor: 'pointer'
              }}
            >
              {scenarios[k].name}
            </motion.button>
          )
        })}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: 16 }}>
        {/* Steps/checklist */}
        <div style={{
          background: 'linear-gradient(135deg, rgba(124, 58, 237, 0.08), rgba(2, 6, 23, 0.8))',
          border: '1px solid rgba(124, 58, 237, 0.35)',
          borderRadius: 12,
          padding: 16
        }}>
          <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'space-between', marginBottom: 12 }}>
            <div>
              <div style={{ color: '#cbd5e1', fontSize: 12 }}>Target</div>
              <div style={{ color: scenario.color, fontWeight: 700 }}>{scenario.target}</div>
            </div>
            <div>
              <div style={{ color: '#cbd5e1', fontSize: 12 }}>Symptoms</div>
              <div style={{ color: '#94a3b8', fontSize: 12 }}>{scenario.symptoms.join(' • ')}</div>
            </div>
          </div>

          <div style={{ display: 'grid', gap: 10 }}>
            {scenario.steps.map((step, i) => {
              const key = `${active}-${step.id}`
              const done = !!completed[key]
              return (
                <motion.div
                  key={step.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: i * 0.05 }}
                  onClick={() => setCompleted(prev => ({ ...prev, [key]: !prev[key] }))}
                  style={{
                    display: 'flex',
                    gap: 12,
                    alignItems: 'center',
                    cursor: 'pointer',
                    padding: 12,
                    borderRadius: 10,
                    border: `1px solid ${done ? scenario.color : 'rgba(255,255,255,0.12)'}`,
                    background: done ? `${scenario.color}18` : 'rgba(255,255,255,0.04)'
                  }}
                >
                  <div style={{
                    width: 26,
                    height: 26,
                    borderRadius: 6,
                    background: done ? scenario.color : 'transparent',
                    border: `2px solid ${scenario.color}`,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: done ? '#0b1220' : scenario.color,
                    fontWeight: 800
                  }}>{done ? '✓' : i + 1}</div>
                  <div style={{ color: '#e6eef8' }}>{step.text}</div>
                </motion.div>
              )
            })}
          </div>
        </div>

        {/* Status panel */}
        <div style={{
          background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.8), rgba(124, 58, 237, 0.08))',
          border: '1px solid rgba(124, 58, 237, 0.35)',
          borderRadius: 12,
          padding: 16
        }}>
          <div style={{ color: '#cbd5e1', fontSize: 12, marginBottom: 6 }}>System health</div>
          <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 14 }}>
            <div style={{ flex: 1, height: 10, background: 'rgba(255,255,255,0.08)', borderRadius: 999 }}>
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: `${Math.min(100, score)}%` }}
                transition={{ duration: 0.6 }}
                style={{ height: 10, borderRadius: 999, background: scenario.color }}
              />
            </div>
            <div style={{ width: 46, textAlign: 'right', color: '#e6eef8', fontWeight: 700 }}>{Math.min(100, Math.round(score))}%</div>
          </div>

          <div style={{ color: '#cbd5e1', fontSize: 12, marginBottom: 6 }}>Risk level</div>
          <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
            <div style={{ flex: 1, height: 10, background: 'rgba(255,255,255,0.08)', borderRadius: 999 }}>
              <motion.div
                initial={{ width: '100%' }}
                animate={{ width: `${risk}%` }}
                transition={{ duration: 0.6 }}
                style={{ height: 10, borderRadius: 999, background: risk > 60 ? '#ef4444' : risk > 30 ? '#f59e0b' : '#10b981' }}
              />
            </div>
            <div style={{ width: 46, textAlign: 'right', color: '#e6eef8', fontWeight: 700 }}>{Math.max(0, Math.round(risk))}%</div>
          </div>

          <div style={{ marginTop: 16, fontSize: 12, color: '#94a3b8' }}>
            Complete steps to restore compliance to target ranges. Document actions per SOP; attach sampling results.
          </div>
        </div>
      </div>
    </div>
  )
}

export function MaintenanceSchedule() {
  const [selectedEquipment, setSelectedEquipment] = useState<string | null>(null)

  const equipment = [
    {
      id: 'hepa',
      name: 'HEPA Filter',
      icon: '🌀',
      color: '#3b82f6',
      interval: '6 months',
      tests: ['Integrity test (DOP/PAO)', 'Pressure drop', 'Airflow velocity'],
      status: 'qualified',
      nextDue: '2024-06-15',
      daysUntil: 45
    },
    {
      id: 'autoclave',
      name: 'Steam Sterilizer',
      icon: '🔥',
      color: '#ef4444',
      interval: '12 months',
      tests: ['Temperature distribution', 'Pressure hold', 'Biological indicators'],
      status: 'due',
      nextDue: '2024-05-10',
      daysUntil: 10
    },
    {
      id: 'isolator',
      name: 'Isolator System',
      icon: '🏥',
      color: '#8b5cf6',
      interval: '12 months',
      tests: ['H₂O₂ distribution', 'Glove integrity', 'Pressure decay'],
      status: 'qualified',
      nextDue: '2024-08-20',
      daysUntil: 112
    },
    {
      id: 'wfi',
      name: 'WFI System',
      icon: '💧',
      color: '#06b6d4',
      interval: '12 months',
      tests: ['TOC', 'Conductivity', 'Endotoxins', 'Bioburden'],
      status: 'overdue',
      nextDue: '2024-04-25',
      daysUntil: -5
    },
    {
      id: 'hvac',
      name: 'HVAC System',
      icon: '💨',
      color: '#10b981',
      interval: '12 months',
      tests: ['Airflow pattern', 'Particle count', 'Recovery time', 'Temperature/RH'],
      status: 'qualified',
      nextDue: '2024-09-30',
      daysUntil: 153
    }
  ]

  const getStatusColor = (status: string) => {
    if (status === 'overdue') return '#ef4444'
    if (status === 'due') return '#f59e0b'
    return '#10b981'
  }

  const getStatusLabel = (status: string) => {
    if (status === 'overdue') return '⚠️ OVERDUE'
    if (status === 'due') return '⏰ DUE SOON'
    return '✅ QUALIFIED'
  }

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 30, textAlign: 'center'}}>Equipment Qualification Schedule</h4>
      
      <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: 20}}>
        {equipment.map((item, i) => {
          const isSelected = selectedEquipment === item.id
          const statusColor = getStatusColor(item.status)

          return (
            <motion.div
              key={item.id}
              initial={{opacity: 0, y: 20}}
              animate={{opacity: 1, y: 0}}
              transition={{delay: i * 0.1}}
              whileHover={{scale: 1.05, y: -5}}
              onClick={() => setSelectedEquipment(isSelected ? null : item.id)}
              style={{
                background: isSelected 
                  ? `linear-gradient(135deg, ${item.color}33, ${item.color}22)`
                  : 'rgba(255,255,255,0.05)',
                padding: 20,
                borderRadius: 16,
                border: `2px solid ${isSelected ? item.color : 'rgba(255,255,255,0.1)'}`,
                cursor: 'pointer',
                position: 'relative',
                overflow: 'hidden'
              }}
            >
              {/* Status badge */}
              <div style={{
                position: 'absolute',
                top: 12,
                right: 12,
                background: statusColor,
                color: 'white',
                padding: '4px 10px',
                borderRadius: 12,
                fontSize: 10,
                fontWeight: 700,
                letterSpacing: 0.5
              }}>
                {getStatusLabel(item.status)}
              </div>

              {/* Icon and name */}
              <div style={{fontSize: 40, marginBottom: 12}}>{item.icon}</div>
              <h5 style={{margin: '0 0 8px 0', color: item.color, fontSize: 16, fontWeight: 700}}>
                {item.name}
              </h5>

              {/* Interval */}
              <div style={{
                color: 'var(--muted)',
                fontSize: 13,
                marginBottom: 12
              }}>
                Requalification: <strong style={{color: '#e6eef8'}}>{item.interval}</strong>
              </div>

              {/* Next due */}
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: 8,
                marginBottom: 12,
                padding: 12,
                background: 'rgba(0,0,0,0.2)',
                borderRadius: 8
              }}>
                <div style={{fontSize: 20}}>📅</div>
                <div style={{flex: 1}}>
                  <div style={{fontSize: 11, color: 'var(--muted)'}}>Next Due:</div>
                  <div style={{fontSize: 14, color: statusColor, fontWeight: 600}}>
                    {item.nextDue}
                  </div>
                </div>
                <div style={{
                  fontSize: 18,
                  fontWeight: 700,
                  color: statusColor
                }}>
                  {item.daysUntil > 0 ? `${item.daysUntil}d` : `${Math.abs(item.daysUntil)}d ago`}
                </div>
              </div>

              {/* Tests - show when selected */}
              <AnimatePresence>
                {isSelected && (
                  <motion.div
                    initial={{height: 0, opacity: 0}}
                    animate={{height: 'auto', opacity: 1}}
                    exit={{height: 0, opacity: 0}}
                    style={{
                      marginTop: 12,
                      paddingTop: 12,
                      borderTop: `1px solid ${item.color}33`
                    }}
                  >
                    <div style={{fontSize: 12, color: item.color, fontWeight: 600, marginBottom: 8}}>
                      Required Tests:
                    </div>
                    <ul style={{margin: 0, paddingLeft: 20, fontSize: 12, color: 'var(--muted)', lineHeight: 1.8}}>
                      {item.tests.map((test, j) => (
                        <li key={j}>{test}</li>
                      ))}
                    </ul>
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.div>
          )
        })}
      </div>

      <div style={{
        marginTop: 30,
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 20,
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)'
      }}>
        <h5 style={{margin: '0 0 12px 0', fontSize: 14, color: '#e6eef8'}}>Qualification Frequency (EU GMP Annex 1)</h5>
        <div style={{fontSize: 13, color: 'var(--muted)', lineHeight: 1.7}}>
          <strong style={{color: '#3b82f6'}}>Critical systems:</strong> Requalification at least annually or when significant changes occur.<br/>
          <strong style={{color: '#10b981'}}>Supporting systems:</strong> Risk-based approach, typically 12-24 months.<br/>
          <strong style={{color: '#f59e0b'}}>Continuous monitoring:</strong> Particle counts, pressure differentials (real-time).
        </div>
      </div>
    </div>
  )
}

// HEPA Integrity & Laminar Flow Tester — next-level interactive skeleton
export function HEPAIntegrityLaminarTester() {
  const [cols, rows] = [12, 8]
  const [threshold, setThreshold] = useState(0.01) // allowable leakage (e.g., 1.0%)
  const [scanned, setScanned] = useState<Record<string, number>>({})
  const [seed] = useState(() => Math.random())
  const [showFlow, setShowFlow] = useState(true)

  // pseudo-random leakage map seeded, with a couple of intentional leaks
  const leakValue = (x: number, y: number) => {
    const base = (Math.sin((x + 1) * 1.73 + seed) + Math.cos((y + 1) * 2.11 + seed)) * 0.002 + 0.006
    const leakHotspot = (x === 4 && y === 2) || (x === 9 && y === 6)
    return leakHotspot ? base + 0.02 + (Math.random() * 0.01) : base + (Math.random() * 0.003)
  }

  const keyFor = (x: number, y: number) => `${x}-${y}`
  const handleScan = (x: number, y: number) => {
    const val = leakValue(x, y)
    setScanned(prev => ({ ...prev, [keyFor(x, y)]: val }))
  }

  const coverage = (Object.keys(scanned).length / (cols * rows)) * 100
  const leaks = Object.values(scanned).filter(v => v > threshold)
  const integrityPass = leaks.length === 0 && coverage >= 80 // require 80% scanned for provisional pass

  // Laminar flow velocity sample points (5 points)
  const [velPoints, setVelPoints] = useState<number[]>(() => Array.from({ length: 5 }, () => 0.42 + (Math.random() - 0.5) * 0.12))
  const regenerateVelocities = () => setVelPoints(Array.from({ length: 5 }, () => 0.42 + (Math.random() - 0.5) * 0.12))
  const velocityPass = velPoints.every(v => v >= 0.36 && v <= 0.54)

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1.2fr 0.8fr', gap: 20, padding: 20 }}>
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>HEPA Integrity – DOP/PAO skeniranje</h4>
          <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
            <div style={{ fontSize: 12, color: '#94a3b8' }}>Meja puščanja</div>
            <input type="range" min={0.005} max={0.03} step={0.001} value={threshold}
              onChange={e => setThreshold(parseFloat(e.target.value))}
              style={{ width: 160 }} />
            <div style={{ width: 60, textAlign: 'right', fontVariantNumeric: 'tabular-nums' }}>{(threshold * 100).toFixed(1)}%</div>
          </div>
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: `repeat(${cols}, 1fr)`, gap: 4 }}>
          {Array.from({ length: rows }).map((_, y) => (
            Array.from({ length: cols }).map((__, x) => {
              const k = keyFor(x, y)
              const val = scanned[k]
              const isLeak = val !== undefined && val > threshold
              const bg = val === undefined ? 'rgba(255,255,255,0.06)' : isLeak ? 'rgba(239,68,68,0.5)' : 'rgba(16,185,129,0.4)'
              return (
                <motion.div key={k}
                  onMouseEnter={() => handleScan(x, y)}
                  whileHover={{ scale: 1.05 }}
                  style={{
                    height: 26,
                    borderRadius: 6,
                    background: bg,
                    border: '1px solid rgba(255,255,255,0.08)',
                    display: 'flex', alignItems: 'center', justifyContent: 'center',
                    fontSize: 10, color: '#e2e8f0'
                  }}
                  title={val === undefined ? 'Premakni sondo za skeniranje' : `${(val * 100).toFixed(2)}%`}
                >
                  {val !== undefined ? `${(val * 100).toFixed(2)}%` : ''}
                </motion.div>
              )
            })
          ))}
        </div>

        <div style={{ marginTop: 12, display: 'flex', gap: 16, alignItems: 'center' }}>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Pokritost skeniranja</div>
          <div style={{ flex: 1, height: 10, background: 'rgba(255,255,255,0.08)', borderRadius: 999 }}>
            <motion.div initial={{ width: '0%' }} animate={{ width: `${coverage.toFixed(0)}%` }} transition={{ duration: 0.6 }}
              style={{ height: 10, borderRadius: 999, background: coverage >= 80 ? '#10b981' : '#f59e0b' }} />
          </div>
          <div style={{ width: 60, textAlign: 'right', fontVariantNumeric: 'tabular-nums' }}>{coverage.toFixed(0)}%</div>
          <div style={{ padding: '6px 10px', borderRadius: 999, fontSize: 12, fontWeight: 700, color: 'white', background: integrityPass ? '#10b981' : leaks.length ? '#ef4444' : '#f59e0b' }}>
            {integrityPass ? 'PASS' : leaks.length ? 'LEAK DETECTED' : 'SCAN MORE'}
          </div>
        </div>
      </div>

      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>Laminarni tok – smoke & velocity</h4>
          <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
            <button onClick={() => setShowFlow(!showFlow)} style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: 'rgba(255,255,255,0.06)', color: 'white', cursor: 'pointer' }}>
              {showFlow ? 'Skrij smoke' : 'Prikaži smoke'}
            </button>
            <button onClick={regenerateVelocities} style={{ padding: '6px 10px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: 'rgba(255,255,255,0.06)', color: 'white', cursor: 'pointer' }}>
              Ponovi meritve
            </button>
          </div>
        </div>

        <div style={{ height: 160, position: 'relative', overflow: 'hidden', borderRadius: 12, background: 'linear-gradient(180deg, rgba(2,6,23,0.4), rgba(2,6,23,0.2))', border: '1px solid rgba(255,255,255,0.06)', marginBottom: 12 }}>
          {showFlow && Array.from({ length: 20 }).map((_, i) => (
            <motion.div key={i}
              initial={{ x: '-10%', y: 8 + i * 7 }}
              animate={{ x: ['-10%', '110%'] }}
              transition={{ duration: 3 + (i % 5) * 0.4, repeat: Infinity, ease: 'linear' }}
              style={{ position: 'absolute', width: 120, height: 2, background: 'rgba(148,163,184,0.6)', filter: 'blur(0.5px)' }}
            />
          ))}
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: 8 }}>
          {velPoints.map((v, idx) => (
            <div key={idx} style={{ background: 'rgba(255,255,255,0.06)', padding: 10, borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 6 }}>Točka {idx + 1}</div>
              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                <div style={{ flex: 1, height: 8, background: 'rgba(255,255,255,0.08)', borderRadius: 999 }}>
                  <motion.div initial={{ width: '0%' }} animate={{ width: `${Math.min(100, Math.max(0, ((v - 0.2) / 0.6) * 100)).toFixed(0)}%` }} transition={{ duration: 0.6 }}
                    style={{ height: 8, borderRadius: 999, background: v < 0.36 || v > 0.54 ? '#ef4444' : '#10b981' }} />
                </div>
                <div style={{ width: 64, textAlign: 'right', fontVariantNumeric: 'tabular-nums' }}>{v.toFixed(2)} m/s</div>
              </div>
            </div>
          ))}
        </div>

        <div style={{ marginTop: 12, display: 'flex', alignItems: 'center', gap: 12 }}>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Kriterij: 0.36–0.54 m/s</div>
          <div style={{ padding: '6px 10px', borderRadius: 999, fontSize: 12, fontWeight: 700, color: 'white', background: velocityPass ? '#10b981' : '#ef4444' }}>
            {velocityPass ? 'PASS' : 'FAIL'}
          </div>
        </div>
      </div>
    </div>
  )
}

// Calibration Uncertainty Lab — skeleton with bias and U95
export function CalibrationUncertaintyLab() {
  type Point = { id: number; ref: number; uRef: number; meas: number }
  const [unit, setUnit] = useState<'g' | '°C' | 'bar' | 'Pa'>('g')
  const [tolerance, setTolerance] = useState(0.2) // absolute tolerance in unit
  const [kFactor, setKFactor] = useState(2)
  const [points, setPoints] = useState<Point[]>([
    { id: 1, ref: 20, uRef: 0.05, meas: 20.03 },
    { id: 2, ref: 50, uRef: 0.05, meas: 49.96 },
    { id: 3, ref: 100, uRef: 0.06, meas: 99.92 },
    { id: 4, ref: 150, uRef: 0.06, meas: 150.10 }
  ])

  const updatePoint = (id: number, key: keyof Point, value: number) => {
    setPoints(prev => prev.map(p => (p.id === id ? { ...p, [key]: value } : p)))
  }

  const residuals = points.map(p => p.meas - p.ref)
  const meanBias = residuals.reduce((a, b) => a + b, 0) / (residuals.length || 1)
  const variance = residuals.reduce((a, r) => a + Math.pow(r - meanBias, 2), 0) / Math.max(1, residuals.length - 1)
  const sd = Math.sqrt(variance)
  const uA = sd / Math.sqrt(points.length || 1) // type A uncertainty
  const uB = Math.sqrt(points.reduce((a, p) => a + p.uRef * p.uRef, 0) / (points.length || 1)) // simplified pooling
  const uc = Math.sqrt(uA * uA + uB * uB)
  const U95 = kFactor * uc
  const pass = Math.abs(meanBias) + U95 <= tolerance

  const exportJSON = () => {
    const payload = {
      instrument: { unit, tolerance, kFactor },
      dataPoints: points,
      results: { meanBias, sd, uA, uB, uc, U95, pass }
    }
    const blob = new Blob([JSON.stringify(payload, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'calibration-result.json'
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1.1fr 0.9fr', gap: 20, padding: 20 }}>
      {/* Left: Measurements table */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>Kalibracijski laboratorij – negotovost</h4>
          <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
            <select value={unit} onChange={e => setUnit(e.target.value as any)} style={{ padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }}>
              <option value="g">g</option>
              <option value="°C">°C</option>
              <option value="bar">bar</option>
              <option value="Pa">Pa</option>
            </select>
            <div style={{ fontSize: 12, color: '#94a3b8' }}>Toleranca</div>
            <input type="number" step={0.01} value={tolerance} onChange={e => setTolerance(parseFloat(e.target.value || '0'))} style={{ width: 90, padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
            <div style={{ fontSize: 12, color: '#94a3b8' }}>{unit}</div>
          </div>
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: '60px 1fr 1fr 1fr', gap: 8, marginBottom: 8, fontSize: 12, color: '#94a3b8' }}>
          <div>ID</div><div>Referenca ({unit})</div><div>Uref ({unit})</div><div>Meritev ({unit})</div>
        </div>
        {points.map((p) => (
          <div key={p.id} style={{ display: 'grid', gridTemplateColumns: '60px 1fr 1fr 1fr', gap: 8, marginBottom: 8 }}>
            <div style={{ color: '#e2e8f0' }}>#{p.id}</div>
            <input type="number" value={p.ref} onChange={e => updatePoint(p.id, 'ref', parseFloat(e.target.value || '0'))} style={{ padding: '8px 10px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
            <input type="number" value={p.uRef} step={0.01} onChange={e => updatePoint(p.id, 'uRef', parseFloat(e.target.value || '0'))} style={{ padding: '8px 10px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
            <input type="number" value={p.meas} onChange={e => updatePoint(p.id, 'meas', parseFloat(e.target.value || '0'))} style={{ padding: '8px 10px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
          </div>
        ))}

        <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
          <button onClick={() => setPoints(prev => [...prev, { id: prev.length + 1, ref: 0, uRef: 0.05, meas: 0 }])} style={{ padding: '8px 12px', borderRadius: 8, background: 'rgba(34,197,94,0.2)', color: '#a7f3d0', border: '1px solid rgba(34,197,94,0.3)', cursor: 'pointer' }}>+ Dodaj točko</button>
          <button onClick={() => setPoints(points.slice(0, -1))} disabled={points.length <= 1} style={{ padding: '8px 12px', borderRadius: 8, background: 'rgba(239,68,68,0.2)', color: '#fecaca', border: '1px solid rgba(239,68,68,0.3)', cursor: 'pointer' }}>− Odstrani zadnjo</button>
        </div>
      </div>

      {/* Right: Results */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>Analiza rezultatov</h4>
          <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>
            <div style={{ fontSize: 12, color: '#94a3b8' }}>k‑faktor</div>
            <input type="number" step={0.1} value={kFactor} onChange={e => setKFactor(parseFloat(e.target.value || '2'))} style={{ width: 80, padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
          </div>
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, marginBottom: 12 }}>
          <LabMetric label={`Srednji bias`} value={`${meanBias.toFixed(3)} ${unit}`} color="#60a5fa" />
          <LabMetric label={`SD residualov`} value={`${sd.toFixed(3)} ${unit}`} color="#a78bfa" />
          <LabMetric label={`uA (Tip A)`} value={`${uA.toFixed(3)} ${unit}`} color="#34d399" />
          <LabMetric label={`uB (Tip B)`} value={`${uB.toFixed(3)} ${unit}`} color="#fbbf24" />
          <LabMetric label={`uc (komb.)`} value={`${uc.toFixed(3)} ${unit}`} color="#f472b6" />
          <LabMetric label={`U95 (k=${kFactor})`} value={`${U95.toFixed(3)} ${unit}`} color="#fb7185" />
        </div>

        <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Kriterij</div>
          <div style={{ padding: '6px 10px', borderRadius: 999, background: pass ? '#10b981' : '#ef4444', color: 'white', fontWeight: 700 }}>
            {pass ? 'PASS' : 'FAIL'} – |bias| + U ≤ {tolerance.toFixed(3)} {unit}
          </div>
        </div>

        <div style={{ marginTop: 16, display: 'flex', gap: 8 }}>
          <button onClick={exportJSON} style={{ padding: '10px 14px', borderRadius: 10, background: 'linear-gradient(135deg, #06b6d4, #3b82f6)', color: 'white', border: 'none', cursor: 'pointer', fontWeight: 700 }}>📄 Izvozi JSON poročilo</button>
        </div>
      </div>
    </div>
  )
}

// Digital Twin PM Scheduler (2D prototype) — plant map + 14-day planner
export function DigitalTwinPMScheduler2D() {
  type Equip = { id: string; name: string; x: number; y: number; color: string; durationH: number; dueInDays: number; criticality: 'high'|'med'|'low'; }
  const [equipment] = useState<Equip[]>([
    { id: 'hepa', name: 'HEPA Filter', x: 60,  y: 40,  color: '#3b82f6', durationH: 2,  dueInDays: 3,  criticality: 'high' },
    { id: 'autoclave', name: 'Sterilizer', x: 180, y: 80,  color: '#ef4444', durationH: 4,  dueInDays: 1,  criticality: 'high' },
    { id: 'isolator', name: 'Isolator', x: 260, y: 36, color: '#8b5cf6', durationH: 3,  dueInDays: 6,  criticality: 'med' },
    { id: 'wfi', name: 'WFI Loop', x: 320, y: 110, color: '#06b6d4', durationH: 6, dueInDays: 8,  criticality: 'high' },
    { id: 'hvac', name: 'HVAC AHU', x: 120, y: 120, color: '#10b981', durationH: 5, dueInDays: 10, criticality: 'med' }
  ])
  const days = Array.from({ length: 14 }, (_, i) => i) // day 0..13
  const [selectedEquip, setSelectedEquip] = useState<string | null>(null)
  const [blackouts, setBlackouts] = useState<number[]>([2, 3, 9]) // production windows
  const [schedule, setSchedule] = useState<Record<string, number | null>>({
    hepa: null, autoclave: null, isolator: null, wfi: null, hvac: null
  })

  const toggleBlackout = (d: number) => {
    setBlackouts(prev => prev.includes(d) ? prev.filter(x => x !== d) : [...prev, d])
  }

  const assign = (equipId: string, day: number) => {
    if (blackouts.includes(day)) return
    setSchedule(prev => ({ ...prev, [equipId]: day }))
  }

  const autoSchedule = () => {
    const newSched: Record<string, number | null> = { ...schedule }
    for (const e of equipment) {
      // try to place on/before due date
      let day = Math.min(13, Math.max(0, e.dueInDays))
      while (day >= 0 && (blackouts.includes(day) || Object.values(newSched).includes(day))) day--
      if (day < 0) {
        // place after due
        day = Math.min(13, e.dueInDays)
        while (day <= 13 && (blackouts.includes(day) || Object.values(newSched).includes(day))) day++
      }
      newSched[e.id] = day >= 0 && day <= 13 ? day : null
    }
    setSchedule(newSched)
  }

  // KPI: total downtime and on-time rate
  const totalDowntime = equipment.reduce((sum, e) => sum + (schedule[e.id] != null ? e.durationH : 0), 0)
  const onTime = equipment.filter(e => schedule[e.id] != null && (schedule[e.id]! <= e.dueInDays)).length
  const scheduledCount = equipment.filter(e => schedule[e.id] != null).length
  const onTimeRate = scheduledCount ? Math.round((onTime / scheduledCount) * 100) : 0

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1.1fr 0.9fr', gap: 20, padding: 20 }}>
      {/* Plant map */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>Digital Twin – 2D zemljevid</h4>
          <div style={{ display: 'flex', gap: 8 }}>
            <button onClick={autoSchedule} style={{ padding: '8px 12px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: 'rgba(34,197,94,0.15)', color: '#86efac', cursor: 'pointer' }}>⚡ Auto-schedule</button>
          </div>
        </div>

        <div style={{ position: 'relative', height: 180, borderRadius: 12, border: '1px solid rgba(255,255,255,0.06)', background: 'linear-gradient(135deg, rgba(2,6,23,0.35), rgba(2,6,23,0.15))' }}>
          {/* illustrative pipes */}
          <div style={{ position: 'absolute', left: 40, top: 30, right: 40, height: 4, background: 'rgba(148,163,184,0.3)', borderRadius: 2 }} />
          <div style={{ position: 'absolute', left: 100, top: 30, width: 4, bottom: 30, background: 'rgba(148,163,184,0.2)', borderRadius: 2 }} />
          {equipment.map(e => {
            const isSel = selectedEquip === e.id
            const day = schedule[e.id]
            const overdue = day != null ? day > e.dueInDays : false
            return (
              <motion.div key={e.id}
                onClick={() => setSelectedEquip(isSel ? null : e.id)}
                whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.98 }}
                style={{ position: 'absolute', left: e.x, top: e.y, background: 'rgba(255,255,255,0.06)', border: `2px solid ${isSel ? e.color : 'rgba(255,255,255,0.1)'}`, borderRadius: 12, padding: '10px 12px', cursor: 'pointer', boxShadow: overdue ? '0 0 0 2px #ef4444 inset' : undefined }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                  <div style={{ width: 10, height: 10, borderRadius: 999, background: e.color }} />
                  <div style={{ color: '#e2e8f0', fontWeight: 700 }}>{e.name}</div>
                </div>
                <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 4 }}>Due v {e.dueInDays} d • {e.durationH} h</div>
                {schedule[e.id] != null && (
                  <div style={{ marginTop: 6, fontSize: 11, color: overdue ? '#fecaca' : '#a7f3d0' }}>
                    {overdue ? '⏰ Po roku' : '✅ Na času'} – Dan {schedule[e.id]}
                  </div>
                )}
              </motion.div>
            )
          })}
        </div>

        {/* KPIs */}
        <div style={{ marginTop: 12, display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
          <div style={{ background: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>Skupni downtime</div>
            <div style={{ fontWeight: 800, color: '#e2e8f0' }}>{totalDowntime} h</div>
          </div>
          <div style={{ background: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>On‑time stopnja</div>
            <div style={{ fontWeight: 800, color: onTimeRate >= 80 ? '#a7f3d0' : '#fde68a' }}>{onTimeRate}%</div>
          </div>
        </div>
      </div>

      {/* 14-day Planner */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>Planer – 14 dni</h4>
          <div style={{ display: 'flex', gap: 8 }}>
            <button onClick={() => setSchedule({ hepa: null, autoclave: null, isolator: null, wfi: null, hvac: null })} style={{ padding: '8px 12px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: 'rgba(239,68,68,0.15)', color: '#fecaca', cursor: 'pointer' }}>🗑️ Počisti</button>
          </div>
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: `120px repeat(${days.length}, 1fr)`, gap: 6, alignItems: 'stretch' }}>
          {/* Header row */}
          <div />
          {days.map(d => (
            <div key={`h-${d}`} onClick={() => toggleBlackout(d)} title={blackouts.includes(d) ? 'Klik: odstrani blackout' : 'Klik: dodaj blackout'}
              style={{ textAlign: 'center', fontSize: 12, color: '#94a3b8', padding: 8, borderRadius: 8, border: '1px dashed rgba(255,255,255,0.08)', background: blackouts.includes(d) ? 'rgba(239,68,68,0.15)' : 'rgba(255,255,255,0.03)', cursor: 'pointer' }}>D{d}</div>
          ))}

          {equipment.map(e => (
            <>
              <div key={`l-${e.id}`} style={{ display: 'flex', alignItems: 'center', gap: 8, paddingLeft: 6 }}>
                <div style={{ width: 10, height: 10, borderRadius: 999, background: e.color }} />
                <div style={{ color: '#e2e8f0', fontWeight: 700 }}>{e.name}</div>
              </div>
              {days.map(d => {
                const isAssigned = schedule[e.id] === d
                const isBlack = blackouts.includes(d)
                const isLate = d > e.dueInDays
                return (
                  <div key={`${e.id}-${d}`} onClick={() => assign(e.id, d)}
                    style={{ height: 36, borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)', background: isAssigned ? (isLate ? 'rgba(239,68,68,0.35)' : 'rgba(16,185,129,0.35)') : isBlack ? 'rgba(239,68,68,0.15)' : 'rgba(255,255,255,0.03)', cursor: isBlack ? 'not-allowed' : 'pointer' }}
                    title={isBlack ? 'Blackout – ni mogoče planirati' : isAssigned ? `Načrtovano (trajanje ${e.durationH} h)` : 'Klikni za planiranje'}
                  />
                )
              })}
            </>
          ))}
        </div>
      </div>
    </div>
  )
}

// Predictive Maintenance AI Sandbox — signals vs thresholds vs trends
export function PredictiveMaintenanceSandbox() {
  type Point = { t: number; vib: number; temp: number; curr: number }
  const [n, setN] = useState(120)
  const [seed, setSeed] = useState(1)
  const [vibThresh, setVibThresh] = useState(2.2)
  const [model, setModel] = useState<'rule' | 'trend'>('trend')
  const [downtimeCost, setDowntimeCost] = useState(1500) // €/h
  const [pmCost, setPmCost] = useState(800) // €
  const [failureHours, setFailureHours] = useState(16) // h
  const [pmHours, setPmHours] = useState(4) // h

  const series = useMemo(() => generateSeries(n, seed), [n, seed])
  const failureIdxRule = series.findIndex(p => p.vib >= vibThresh)

  // trend model: fit y=a+bt on last window; predict crossing of vibThresh
  const win = 30
  const lastWin = series.slice(-win)
  const { a, b } = linearFit(lastWin.map(p => [p.t, p.vib]))
  const predictedCrossT = b > 0 ? Math.ceil((vibThresh - a) / b) : Infinity
  const failureIdxTrend = isFinite(predictedCrossT) ? predictedCrossT : -1
  const failureIdx = model === 'rule' ? failureIdxRule : failureIdxTrend

  // naive optimization: test PM day across 0..n-1
  const candidates = Array.from({ length: n }, (_, d) => d)
  const costFor = (d: number) => {
    if (failureIdx >= 0 && failureIdx < d) {
      // fail happens first: failure cost
      return failureHours * downtimeCost + pmCost * 1.5 // penalty replace
    }
    // planned PM at d
    return pmHours * downtimeCost + pmCost
  }
  let bestDay = 0
  let bestCost = Number.POSITIVE_INFINITY
  for (const d of candidates) {
    const c = costFor(d)
    if (c < bestCost) { bestCost = c; bestDay = d }
  }
  const baselineCost = failureHours * downtimeCost + pmCost * 1.5
  const expectedSaving = Math.max(0, baselineCost - bestCost)

  const regenerate = () => setSeed(s => s + 1)

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1.2fr 0.8fr', gap: 20, padding: 20 }}>
      {/* Chart + controls */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
          <h4 style={{ margin: 0 }}>Predictive Maintenance – signalni peskovnik</h4>
          <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
            <button onClick={regenerate} style={{ padding: '8px 10px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: 'rgba(59,130,246,0.15)', color: '#bfdbfe', cursor: 'pointer' }}>🔁 Regeneriraj</button>
            <select value={model} onChange={e => setModel(e.target.value as any)} style={{ padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }}>
              <option value="rule">Rule‑based</option>
              <option value="trend">Trend model</option>
            </select>
          </div>
        </div>

        <div style={{ display: 'flex', gap: 16, alignItems: 'center', marginBottom: 12 }}>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Vib. threshold</div>
          <input type="range" min={1} max={4} step={0.1} value={vibThresh} onChange={e => setVibThresh(parseFloat(e.target.value))} style={{ width: 180 }} />
          <div style={{ width: 50, textAlign: 'right', color: '#e2e8f0' }}>{vibThresh.toFixed(1)} g</div>
          <div style={{ fontSize: 12, color: '#94a3b8', marginLeft: 12 }}>Točk</div>
          <input type="range" min={60} max={240} step={10} value={n} onChange={e => setN(parseInt(e.target.value))} style={{ width: 180 }} />
          <div style={{ width: 40, textAlign: 'right', color: '#e2e8f0' }}>{n}</div>
        </div>

        <SignalChart series={series} vibThresh={vibThresh} failureIdxRule={failureIdxRule} failureIdxTrend={failureIdxTrend} model={model} />
      </div>

      {/* Cost model */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ marginBottom: 10 }}>
          <h4 style={{ margin: 0 }}>Model stroškov</h4>
        </div>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 10 }}>
          <CostField label="€ / h izdaje" value={downtimeCost} setValue={setDowntimeCost} />
          <CostField label="€ PM" value={pmCost} setValue={setPmCost} />
          <CostField label="h – izpad ob okvari" value={failureHours} setValue={v => setFailureHours(Number(v))} />
          <CostField label="h – planiran PM" value={pmHours} setValue={v => setPmHours(Number(v))} />
        </div>

        <div style={{ marginTop: 12, display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
          <PmMetric label="Napoved okvare" value={failureIdx >= 0 ? `D${failureIdx}` : '—'} color="#fca5a5" />
          <PmMetric label="Priporočen dan PM" value={`D${bestDay}`} color="#86efac" />
          <PmMetric label="Strošek baseline" value={`€${formatMoney(baselineCost)}`} color="#fbbf24" />
          <PmMetric label="Prihranek" value={`€${formatMoney(expectedSaving)}`} color="#60a5fa" />
        </div>
      </div>
    </div>
  )

  function generateSeries(count: number, s: number): Point[] {
    const rng = mulberry32(s)
    const out: Point[] = []
    const driftStart = Math.floor(count * 0.55)
    let vib = 1.2
    let temp = 38
    let curr = 6
    for (let t = 0; t < count; t++) {
      const noise = (rng() - 0.5) * 0.2
      if (t > driftStart) vib += 0.02 + (rng() - 0.5) * 0.02
      const vibVal = vib + noise
      const tempVal = temp + (t > driftStart ? 0.02 : 0) + (rng() - 0.5) * 0.3
      const currVal = curr + (t > driftStart ? 0.01 : 0) + (rng() - 0.5) * 0.2
      out.push({ t, vib: Math.max(0.2, vibVal), temp: tempVal, curr: currVal })
    }
    return out
  }

  function linearFit(pairs: [number, number][]) {
    const n = pairs.length || 1
    const sx = pairs.reduce((a, [x]) => a + x, 0)
    const sy = pairs.reduce((a, [, y]) => a + y, 0)
    const sxx = pairs.reduce((a, [x]) => a + x * x, 0)
    const sxy = pairs.reduce((a, [x, y]) => a + x * y, 0)
    const denom = n * sxx - sx * sx || 1
    const b = (n * sxy - sx * sy) / denom
    const a = (sy - b * sx) / n
    return { a, b }
  }

  function mulberry32(a: number) {
    return function() {
      a |= 0; a = a + 0x6D2B79F5 | 0
      let t = Math.imul(a ^ a >>> 15, 1 | a)
      t = t + Math.imul(t ^ t >>> 7, 61 | t) ^ t
      return ((t ^ t >>> 14) >>> 0) / 4294967296
    }
  }
}

// EM Monitoring Console — Viable & Non‑Viable particles side-by-side
export function ViableNonViableMonitoringConsole() {
  type NVPoint = { t: number; c05: number; c50: number }
  type Sample = { id: string; t: number; volumeL: number; cfu: number; status: 'PASS' | 'ALERT' | 'ACTION' }
  const [running, setRunning] = useState(true)
  const [grade, setGrade] = useState<'A' | 'B' | 'C' | 'D'>('B')
  const [state, setState] = useState<'at-rest' | 'in-operation'>('in-operation')
  const [nvSeries, setNvSeries] = useState<NVPoint[]>([])
  const [samples, setSamples] = useState<Sample[]>([])
  const [flowLmin, setFlowLmin] = useState(100) // active air sampler flow
  const [durationMin, setDurationMin] = useState(2)

  // Limits (adjustable by grade/state). Defaults are indicative and can be tuned.
  const limits = useMemo(() => {
    // 0.5µm and 5.0µm per m3 (indicative Annex 1 values)
    const map: Record<string, { c05: number; c50: number; cfuAction: number; cfuAlert: number }> = {
      'A-at-rest': { c05: 3520, c50: 20, cfuAction: 1, cfuAlert: 1 },
      'A-in-operation': { c05: 3520, c50: 20, cfuAction: 1, cfuAlert: 1 },
      'B-at-rest': { c05: 3520, c50: 29, cfuAction: 10, cfuAlert: 5 },
      'B-in-operation': { c05: 352000, c50: 2900, cfuAction: 10, cfuAlert: 5 },
      'C-at-rest': { c05: 352000, c50: 2900, cfuAction: 100, cfuAlert: 50 },
      'C-in-operation': { c05: 3520000, c50: 29000, cfuAction: 100, cfuAlert: 50 },
      'D-at-rest': { c05: 3520000, c50: 29000, cfuAction: 200, cfuAlert: 100 },
      'D-in-operation': { c05: 3520000, c50: 29000, cfuAction: 200, cfuAlert: 100 }
    }
    return map[`${grade}-${state}`]
  }, [grade, state])

  // Stream NV counts (1s ~ 1 min)
  useEffect(() => {
    if (!running) return
    const id = setInterval(() => {
      setNvSeries(prev => {
        const last = prev.length ? prev[prev.length - 1] : undefined
        const t = ((last?.t) ?? -1) + 1
        const base = baseByGrade()
        const spike = Math.random() < 0.06 ? Math.random() * base.c05 * 0.6 : 0
        const c05 = Math.max(0, normal(base.c05, base.c05 * 0.15) + spike)
        const c50 = Math.max(0, normal(base.c50, Math.max(1, base.c50 * 0.25)))
        const next = [...prev, { t, c05, c50 }].slice(-180)
        return next
      })
    }, 1000)
    return () => clearInterval(id)
  }, [running, grade, state])

  // Derived: last minute status
  const last = nvSeries.length ? nvSeries[nvSeries.length - 1] : undefined
  const nvStatus = last ? statusFrom(last.c05, last.c50, limits) : 'PASS'

  // Take viable sample (active air)
  function takeSample() {
    const volumeL = flowLmin * durationMin
    // Poisson mean scales with contamination level and class
    const classFactor = ({ A: 0.01, B: 0.05, C: 0.2, D: 0.4 } as const)[grade]
    const stateFactor = state === 'in-operation' ? 2.5 : 1
    const meanCfu = classFactor * stateFactor * (volumeL / 1000) // per m^3 equivalent
    const cfu = Math.max(0, poisson(meanCfu))
    const status: Sample['status'] = cfu >= limits.cfuAction ? 'ACTION' : (cfu >= limits.cfuAlert ? 'ALERT' : 'PASS')
    setSamples(s => [{ id: `s${Date.now()}`, t: Date.now(), volumeL, cfu, status }, ...s].slice(0, 12))
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1.2fr 0.8fr', gap: 16, padding: 20 }}>
      {/* Non‑viable live chart */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
          <h4 style={{ margin: 0 }}>EM – Neživi delci (0.5µm / 5.0µm)</h4>
          <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
            <select value={grade} onChange={e => setGrade(e.target.value as any)} style={selectStyle()}>
              <option value="A">Grade A</option>
              <option value="B">Grade B</option>
              <option value="C">Grade C</option>
              <option value="D">Grade D</option>
            </select>
            <select value={state} onChange={e => setState(e.target.value as any)} style={selectStyle()}>
              <option value="at-rest">At Rest</option>
              <option value="in-operation">In Operation</option>
            </select>
            <button onClick={() => setRunning(r => !r)} style={btnStyle(running ? '#ef4444' : '#22c55e')}>{running ? '⏸️ Ustavi' : '▶️ Zaženi'}</button>
          </div>
        </div>

        <NVChart series={nvSeries} limits={limits} />

        <div style={{ marginTop: 10, display: 'flex', gap: 10 }}>
          <EmBadge label="Status" value={nvStatus} color={nvStatus === 'ACTION' ? '#ef4444' : nvStatus === 'ALERT' ? '#f59e0b' : '#22c55e'} />
          <EmBadge label="Meja 0.5µm" value={`${formatNum(limits.c05)} /m³`} color="#60a5fa" />
          <EmBadge label="Meja 5.0µm" value={`${formatNum(limits.c50)} /m³`} color="#c084fc" />
        </div>
      </div>

      {/* Viable sampling */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <h4 style={{ marginTop: 0 }}>EM – Živi delci (CFU)</h4>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 10, marginBottom: 10 }}>
          <Field label="Pretok (L/min)" value={flowLmin} setValue={v => setFlowLmin(Number(v))} />
          <Field label="Trajanje (min)" value={durationMin} setValue={v => setDurationMin(Number(v))} />
        </div>
        <div style={{ display: 'flex', gap: 10, alignItems: 'center', marginBottom: 10 }}>
          <button onClick={takeSample} style={btnStyle('#2563eb')}>🧫 Aktivni vzorec</button>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Volumen: {flowLmin * durationMin} L</div>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Meje: Alert {limits.cfuAlert} CFU, Action {limits.cfuAction} CFU</div>
        </div>
        <div style={{ maxHeight: 220, overflow: 'auto', border: '1px solid rgba(255,255,255,0.08)', borderRadius: 8 }}>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr style={{ color: '#94a3b8', textAlign: 'left' }}>
                <th style={{ padding: 6 }}>Čas</th>
                <th style={{ padding: 6 }}>Vol. (L)</th>
                <th style={{ padding: 6 }}>CFU</th>
                <th style={{ padding: 6 }}>Status</th>
              </tr>
            </thead>
            <tbody>
              {samples.map(s => (
                <tr key={s.id} style={{ borderTop: '1px solid rgba(255,255,255,0.08)' }}>
                  <td style={{ padding: 6, color: '#e2e8f0' }}>{new Date(s.t).toLocaleTimeString()}</td>
                  <td style={{ padding: 6 }}>{s.volumeL}</td>
                  <td style={{ padding: 6 }}>{s.cfu}</td>
                  <td style={{ padding: 6, color: s.status === 'ACTION' ? '#ef4444' : s.status === 'ALERT' ? '#f59e0b' : '#22c55e', fontWeight: 700 }}>{s.status}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )

  function baseByGrade() {
    const mult = grade === 'A' ? 0.01 : grade === 'B' ? 0.05 : grade === 'C' ? 0.3 : 0.6
    const stateK = state === 'in-operation' ? 12 : 1
    return { c05: 2500 * mult * stateK, c50: 18 * mult * stateK }
  }
  function formatNum(n: number) { return n.toLocaleString('sl-SI') }
  function selectStyle() { return { padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' } as React.CSSProperties }
  function btnStyle(bg: string) { return { padding: '8px 10px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: bg, color: 'white', cursor: 'pointer' } as React.CSSProperties }
  function statusFrom(c05: number, c50: number, lim: { c05: number; c50: number }) {
    const a = c05 >= lim.c05 || c50 >= lim.c50
    const warn = c05 >= lim.c05 * 0.8 || c50 >= lim.c50 * 0.8
    return a ? 'ACTION' : warn ? 'ALERT' : 'PASS'
  }
  function normal(mu: number, sigma: number) {
    const u = 1 - Math.random(); const v = 1 - Math.random()
    const z = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v)
    return mu + z * sigma
  }
  function poisson(mean: number) {
    const L = Math.exp(-mean); let k = 0; let p = 1
    do { k++; p *= Math.random() } while (p > L)
    return k - 1
  }
}

function NVChart({ series, limits }: { series: { t: number; c05: number; c50: number }[]; limits: { c05: number; c50: number } }) {
  const w = 560; const h = 180; const pad = 24
  const xs = (t: number) => pad + (series.length ? t / Math.max(1, (series[series.length - 1]!.t)) : 0) * (w - pad * 2)
  const range = (vals: number[]) => [Math.min(...vals, 0), Math.max(...vals, limits.c05 * 1.2)] as [number, number]
  const [minV, maxV] = range(series.map(s => Math.max(s.c05, s.c50)))
  const ys = (v: number) => h - pad - ((v - minV) / Math.max(0.001, (maxV - minV))) * (h - pad * 2)
  const path = (vals: number[]) => vals.map((v, i) => `${i === 0 ? 'M' : 'L'} ${xs(series[i].t)} ${ys(v)}`).join(' ')
  const p05 = path(series.map(s => s.c05))
  const p50 = path(series.map(s => s.c50))

  return (
    <svg width={w} height={h} style={{ display: 'block', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', background: 'linear-gradient(180deg, rgba(2,6,23,0.4), rgba(2,6,23,0.2))' }}>
      <path d={p05} fill="none" stroke="#60a5fa" strokeWidth={2} />
      <path d={p50} fill="none" stroke="#c084fc" strokeWidth={2} />
      <line x1={pad} x2={w - pad} y1={ys(limits.c05)} y2={ys(limits.c05)} stroke="#f59e0b" strokeDasharray="4 4" />
      <line x1={pad} x2={w - pad} y1={ys(limits.c50)} y2={ys(limits.c50)} stroke="#f59e0b" strokeDasharray="4 4" />
      <line x1={pad} x2={pad} y1={pad} y2={h - pad} stroke="rgba(255,255,255,0.2)" />
      <line x1={pad} x2={w - pad} y1={h - pad} y2={h - pad} stroke="rgba(255,255,255,0.2)" />
    </svg>
  )
}

function Field({ label, value, setValue }: { label: string; value: number; setValue: (v: number) => void }) {
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
      <div style={{ fontSize: 12, color: '#94a3b8' }}>{label}</div>
      <input type="number" value={value} onChange={e => setValue(parseFloat(e.target.value || '0'))} style={{ padding: '8px 10px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
    </div>
  )
}

function EmBadge({ label, value, color }: { label: string; value: string; color: string }) {
  return (
    <div style={{ background: 'rgba(255,255,255,0.06)', padding: 10, borderRadius: 10, border: '1px solid rgba(255,255,255,0.08)' }}>
      <div style={{ fontSize: 12, color: '#94a3b8' }}>{label}</div>
      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <div style={{ width: 8, height: 8, borderRadius: 999, background: color }} />
        <div style={{ fontWeight: 700, color: '#e2e8f0' }}>{value}</div>
      </div>
    </div>
  )
}

function SignalChart({ series, vibThresh, failureIdxRule, failureIdxTrend, model }: { series: { t: number; vib: number; temp: number; curr: number }[]; vibThresh: number; failureIdxRule: number; failureIdxTrend: number; model: 'rule' | 'trend' }) {
  const w = 540; const h = 160; const pad = 20
  const xs = (t: number) => pad + (t / Math.max(1, series.length - 1)) * (w - pad * 2)
  const range = (arr: number[]) => [Math.min(...arr), Math.max(...arr)] as [number, number]
  const [minV, maxV] = range(series.map(p => p.vib))
  const ysV = (v: number) => h - pad - ((v - minV) / Math.max(0.001, (maxV - minV))) * (h - pad * 2)
  const pathOf = (vals: number[]) => vals.map((v, i) => `${i === 0 ? 'M' : 'L'} ${xs(i)} ${ysV(v)}`).join(' ')
  const vibPath = pathOf(series.map(p => p.vib))
  const threshY = ysV(vibThresh)
  const failX = (model === 'rule' ? failureIdxRule : failureIdxTrend)
  const failXpos = failX >= 0 ? xs(Math.min(failX, series.length - 1)) : null

  return (
    <svg width={w} height={h} style={{ display: 'block', borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)', background: 'linear-gradient(180deg, rgba(2,6,23,0.4), rgba(2,6,23,0.2))' }}>
      <path d={vibPath} fill="none" stroke="#60a5fa" strokeWidth={2} />
      <line x1={pad} x2={w - pad} y1={threshY} y2={threshY} stroke="#fbbf24" strokeDasharray="4 4" />
      {failXpos != null && (
        <line x1={failXpos} x2={failXpos} y1={pad} y2={h - pad} stroke="#ef4444" strokeDasharray="5 5" />
      )}
      {/* axes */}
      <line x1={pad} x2={pad} y1={pad} y2={h - pad} stroke="rgba(255,255,255,0.2)" />
      <line x1={pad} x2={w - pad} y1={h - pad} y2={h - pad} stroke="rgba(255,255,255,0.2)" />
    </svg>
  )
}

function CostField({ label, value, setValue }: { label: string; value: number; setValue: (v: number) => void }) {
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
      <div style={{ fontSize: 12, color: '#94a3b8' }}>{label}</div>
      <input type="number" value={value} onChange={e => setValue(parseFloat(e.target.value || '0'))} style={{ padding: '8px 10px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' }} />
    </div>
  )
}

function PmMetric({ label, value, color }: { label: string; value: string; color: string }) {
  return (
    <div style={{ background: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>{label}</div>
      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <div style={{ width: 8, height: 8, borderRadius: 999, background: color }} />
        <div style={{ fontWeight: 700, color: '#e2e8f0' }}>{value}</div>
      </div>
    </div>
  )
}

function formatMoney(n: number) {
  return n.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ' ')
}

function LabMetric({ label, value, color }: { label: string; value: string; color: string }) {
  return (
    <div style={{ background: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>{label}</div>
      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <div style={{ width: 8, height: 8, borderRadius: 999, background: color }} />
        <div style={{ fontWeight: 700, color: '#e2e8f0' }}>{value}</div>
      </div>
    </div>
  )
}

// HEPA Replacement Procedure — multi-step commissioning wizard
export function HEPAReplacementProcedure() {
  const [step, setStep] = useState<1 | 2 | 3 | 4 | 5>(1)

  // Step 1: Pre-change tests
  const [preGrid, setPreGrid] = useState<number[][]>(() => Array.from({ length: 5 }, () => Array(5).fill(0)))
  const [preScanDone, setPreScanDone] = useState(false)
  const [preScanPass, setPreScanPass] = useState<boolean>(false)
  const [preVelBase, setPreVelBase] = useState(0.47) // m/s
  const [preFan, setPreFan] = useState(1)
  const preVelMatrix = useMemo(() => makeVelMatrix(preVelBase * preFan), [preVelBase, preFan])
  const preVelMean = mean(preVelMatrix.flat())
  const preVelPass = preVelMean >= 0.36 && preVelMean <= 0.54
  const [preSmokePass, setPreSmokePass] = useState<boolean>(true)

  // Step 2: Replacement work
  const [removed, setRemoved] = useState(false)
  const [cleaned, setCleaned] = useState(false)
  const [installed, setInstalled] = useState(false)

  // Step 3: Sealing & inspection
  const [gasket, setGasket] = useState<'gel' | 'neoprene'>('gel')
  const [torques, setTorques] = useState<number[]>([1.5, 1.8, 2.2, 1.9, 2.1, 1.6]) // N·m for 6 clips
  const minTorqueReq = gasket === 'gel' ? 1.8 : 2.0
  const seatLeak = Math.max(0.0004, 0.03 - 0.01 * Math.min(...torques) + (gasket === 'gel' ? -0.005 : 0)) // %
  const seatLeakPass = Math.min(...torques) >= minTorqueReq && seatLeak < 0.01
  const [visualOk, setVisualOk] = useState(true)

  // Step 4: Post-change tests
  const [postGrid, setPostGrid] = useState<number[][]>(() => Array.from({ length: 5 }, () => Array(5).fill(0)))
  const [postScanPass, setPostScanPass] = useState<boolean>(false)
  const [postVelBase, setPostVelBase] = useState(0.45)
  const [postFan, setPostFan] = useState(1)
  const postVelMatrix = useMemo(() => makeVelMatrix(postVelBase * postFan), [postVelBase, postFan])
  const postVelMean = mean(postVelMatrix.flat())
  const postVelPass = postVelMean >= 0.36 && postVelMean <= 0.54
  const [postSmokePass, setPostSmokePass] = useState<boolean>(true)

  // Completion status
  const step1Pass = preScanPass && preVelPass && preSmokePass
  const step2Pass = removed && cleaned && installed
  const step3Pass = seatLeakPass && visualOk
  const step4Pass = postScanPass && postVelPass && postSmokePass
  const allPass = step1Pass && step2Pass && step3Pass && step4Pass

  function runPreScan() {
    const grid = randomScan(0.004, 0.010) // nagnjeno k PASS, a še vedno realno
    setPreGrid(grid)
    setPreScanPass(max(grid.flat()) < 0.01)
    setPreScanDone(true)
  }
  function runPostScan() {
    const grid = randomScan(0.003, 0.008) // tighter after replacement
    setPostGrid(grid)
    setPostScanPass(max(grid.flat()) < 0.01)
  }

  function exportReport() {
    const report = {
      timestamp: new Date().toISOString(),
      steps: {
        preTests: { scanPass: preScanPass, velMean: round(preVelMean, 3), velPass: preVelPass, smokePass: preSmokePass },
        replacement: { removed, cleaned, installed },
        sealing: { gasket, torques, seatLeak: round(seatLeak, 4), seatLeakPass, visualOk },
        postTests: { scanPass: postScanPass, velMean: round(postVelMean, 3), velPass: postVelPass, smokePass: postSmokePass }
      },
      overallPASS: allPass
    }
    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url; a.download = `hepa-replacement-report-${Date.now()}.json`; a.click(); URL.revokeObjectURL(url)
  }

  return (
    <div style={{ display: 'grid', gridTemplateColumns: '1.3fr 0.7fr', gap: 16, padding: 20 }}>
      {/* Left: Stage content */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
          <h4 style={{ margin: 0 }}>Menjava HEPA filtra – postopek</h4>
          <div style={{ display: 'flex', gap: 8 }}>
            <HepaStepBadge n={1} active={step === 1} done={step > 1} label="Pred‑menjavo – testi" />
            <HepaStepBadge n={2} active={step === 2} done={step > 2} label="Demontaža in čiščenje" />
            <HepaStepBadge n={3} active={step === 3} done={step > 3} label="Tesnenje in vizualni pregled" />
            <HepaStepBadge n={4} active={step === 4} done={step > 4} label="Po‑menjavi – testi" />
            <HepaStepBadge n={5} active={step === 5} done={false} label="Poročilo" />
          </div>
        </div>

        {step === 1 && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Lokalno skeniranje – DOP/PAO</h5>
              <HepaGridScan grid={preGrid} limit={0.01} />
              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>
                <button onClick={runPreScan} style={btn('#2563eb')}>🔍 Zaženi skeniranje</button>
                <div style={{ fontSize: 12, color: preScanPass ? '#86efac' : '#fca5a5' }}>{preScanPass ? 'PASS' : '—'}</div>
              </div>
            </div>
            <div style={{ display: 'grid', gridTemplateRows: '1fr 1fr', gap: 12 }}>
              <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
                <h5 style={{ margin: '0 0 8px 0' }}>Hitrost lamin. toka</h5>
                <VelMatrix matrix={preVelMatrix} />
                <div style={{ display: 'flex', gap: 10, alignItems: 'center', marginTop: 8 }}>
                  <div style={{ fontSize: 12, color: '#94a3b8' }}>Vent. faktor</div>
                  <input type="range" min={0.8} max={1.2} step={0.01} value={preFan} onChange={e => setPreFan(parseFloat(e.target.value))} style={{ width: 160 }} />
                  <div style={{ fontSize: 12, color: preVelPass ? '#86efac' : '#fca5a5' }}>{preVelMean.toFixed(2)} m/s</div>
                </div>
              </div>
              <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
                <h5 style={{ margin: '0 0 8px 0' }}>Smoke test (vizualno)</h5>
                <SmokePanel pass={preSmokePass} onToggle={setPreSmokePass} />
              </div>
            </div>
          </div>
        )}

        {step === 2 && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Demontaža</h5>
              <div style={{ display: 'flex', gap: 10 }}>
                <button onClick={() => setRemoved(true)} style={btn(removed ? '#16a34a' : '#2563eb')}>{removed ? '✅ Odstranjeno' : '🛠️ Odstrani filter'}</button>
              </div>
              <div style={{ marginTop: 8, fontSize: 12, color: '#94a3b8' }}>Sledi: čiščenje ohišja/ogrodja.</div>
            </div>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Čiščenje ohišja</h5>
              <div style={{ display: 'flex', gap: 10 }}>
                <button onClick={() => simulateClean(setCleaned)} style={btn(cleaned ? '#16a34a' : '#2563eb')}>{cleaned ? '✅ Počiščeno' : '🧽 Očisti sedež'}</button>
                <button onClick={() => setInstalled(true)} disabled={!cleaned} style={btn(installed ? '#16a34a' : (!cleaned ? '#475569' : '#2563eb'))}>{installed ? '✅ Vgrajeno' : '📦 Vgradi nov filter'}</button>
              </div>
              <div style={{ marginTop: 8, fontSize: 12, color: '#94a3b8' }}>Uporabi ustrezna čistila, zaščito in protokole.</div>
            </div>
          </div>
        )}

        {step === 3 && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Tesnenje naseda</h5>
              <div style={{ display: 'flex', gap: 10, alignItems: 'center' }}>
                <div style={{ fontSize: 12, color: '#94a3b8' }}>Tesnilo</div>
                <select value={gasket} onChange={e => setGasket(e.target.value as any)} style={select()}>
                  <option value="gel">Gel</option>
                  <option value="neoprene">Neopren</option>
                </select>
                <div style={{ fontSize: 12, color: '#94a3b8' }}>Min. moment: {minTorqueReq.toFixed(1)} N·m</div>
              </div>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3,1fr)', gap: 8, marginTop: 8 }}>
                {torques.map((t, i) => (
                  <div key={i} style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 8, padding: 8 }}>
                    <div style={{ fontSize: 12, color: '#94a3b8' }}>Sponka {i + 1}</div>
                    <input type="range" min={1} max={3} step={0.1} value={t} onChange={e => setTorques(arrSet(torques, i, parseFloat(e.target.value)))} />
                    <div style={{ fontSize: 12, color: t >= minTorqueReq ? '#86efac' : '#fca5a5' }}>{t.toFixed(1)} N·m</div>
                  </div>
                ))}
              </div>
              <div style={{ marginTop: 10, display: 'flex', gap: 12 }}>
                <HepaKpi label="Leak sedeža" value={`${(seatLeak * 100).toFixed(2)}%`} color={seatLeakPass ? '#86efac' : '#fca5a5'} />
                <HepaKpi label="PASS" value={seatLeakPass ? 'DA' : 'NE'} color={seatLeakPass ? '#86efac' : '#fca5a5'} />
              </div>
            </div>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Vizualni pregled</h5>
              <div style={{ display: 'flex', gap: 10, alignItems: 'center' }}>
                <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                  <input type="checkbox" checked={visualOk} onChange={e => setVisualOk(e.target.checked)} />
                  Brez poškodb in pravilna orientacija pretoka
                </label>
              </div>
              <div style={{ marginTop: 8, fontSize: 12, color: '#94a3b8' }}>Preglej gel korito/neopren, poškodbe okvirja, puščanja tesnila.</div>
            </div>
          </div>
        )}

        {step === 4 && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Lokalno skeniranje – DOP/PAO</h5>
              <HepaGridScan grid={postGrid} limit={0.01} />
              <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>
                <button onClick={runPostScan} style={btn('#2563eb')}>🔍 Zaženi skeniranje</button>
                <div style={{ fontSize: 12, color: postScanPass ? '#86efac' : '#fca5a5' }}>{postScanPass ? 'PASS' : '—'}</div>
              </div>
            </div>
            <div style={{ display: 'grid', gridTemplateRows: '1fr 1fr', gap: 12 }}>
              <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
                <h5 style={{ margin: '0 0 8px 0' }}>Hitrost lamin. toka</h5>
                <VelMatrix matrix={postVelMatrix} />
                <div style={{ display: 'flex', gap: 10, alignItems: 'center', marginTop: 8 }}>
                  <div style={{ fontSize: 12, color: '#94a3b8' }}>Vent. faktor</div>
                  <input type="range" min={0.8} max={1.2} step={0.01} value={postFan} onChange={e => setPostFan(parseFloat(e.target.value))} style={{ width: 160 }} />
                  <div style={{ fontSize: 12, color: postVelPass ? '#86efac' : '#fca5a5' }}>{postVelMean.toFixed(2)} m/s</div>
                </div>
              </div>
              <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
                <h5 style={{ margin: '0 0 8px 0' }}>Smoke test (vizualno)</h5>
                <SmokePanel pass={postSmokePass} onToggle={setPostSmokePass} />
              </div>
            </div>
          </div>
        )}

        {step === 5 && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Povzetek</h5>
              <ul style={{ margin: 0, paddingLeft: 18, lineHeight: 1.6 }}>
                <li>Pred‑menjavo: skeniranje {tick(preScanPass)}, hitrost {tick(preVelPass)} ({preVelMean.toFixed(2)} m/s), smoke {tick(preSmokePass)}</li>
                <li>Demontaža/čiščenje/vgradnja: {tick(step2Pass)}</li>
                <li>Tesnenje/visual: leak {(seatLeak * 100).toFixed(2)}% {tick(seatLeakPass)}, vizualni pregled {tick(visualOk)}</li>
                <li>Po‑menjavi: skeniranje {tick(postScanPass)}, hitrost {tick(postVelPass)} ({postVelMean.toFixed(2)} m/s), smoke {tick(postSmokePass)}</li>
              </ul>
            </div>
            <div style={{ background: 'rgba(255,255,255,0.06)', borderRadius: 12, padding: 12 }}>
              <h5 style={{ margin: '0 0 8px 0' }}>Poročilo</h5>
              <div style={{ marginBottom: 8, color: allPass ? '#86efac' : '#fca5a5', fontWeight: 700 }}>{allPass ? 'OVERALL: PASS' : 'OVERALL: FAIL'}</div>
              <button onClick={exportReport} style={btn('#2563eb')}>⬇️ Izvozi JSON</button>
            </div>
          </div>
        )}

        <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 12 }}>
          <button onClick={() => setStep(prev => (prev === 1 ? 1 : ((prev - 1) as 1 | 2 | 3 | 4 | 5)))} style={btn('#475569')}>← Nazaj</button>
          <button onClick={() => setStep(nextStep())} style={btn(nextEnabled() ? '#2563eb' : '#475569')} disabled={!nextEnabled()}>Naprej →</button>
        </div>
      </div>

      {/* Right: KPIs */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <h4 style={{ marginTop: 0 }}>KPI in status</h4>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
          <HepaKpi label="1) Pred‑menjavo" value={step1Pass ? 'PASS' : '—'} color={step1Pass ? '#86efac' : '#94a3b8'} />
          <HepaKpi label="2) Menjava" value={step2Pass ? 'OK' : '—'} color={step2Pass ? '#86efac' : '#94a3b8'} />
          <HepaKpi label="3) Tesnenje" value={step3Pass ? 'PASS' : '—'} color={step3Pass ? '#86efac' : '#94a3b8'} />
          <HepaKpi label="4) Po‑menjavi" value={step4Pass ? 'PASS' : '—'} color={step4Pass ? '#86efac' : '#94a3b8'} />
        </div>
        <div style={{ marginTop: 12, fontSize: 12, color: '#94a3b8' }}>
          Opomba: Meja lokalne puščanja 0.01%, cilj laminarne hitrosti 0.36–0.54 m/s.
        </div>
      </div>
    </div>
  )

  function nextEnabled() {
    // V 1. koraku omogočimo naprej, ko je test izveden (ne nujno PASS), da ne obtičiš
    if (step === 1) return preScanDone
    if (step === 2) return step2Pass
    if (step === 3) return step3Pass
    if (step === 4) return step4Pass
    return false
  }
  function nextStep(): 1 | 2 | 3 | 4 | 5 { return (Math.min(5, (step + 1)) as any) }
  function simulateClean(done: (b: boolean) => void) { setTimeout(() => done(true), 400) }
  function btn(bg: string) { return { padding: '8px 10px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: bg, color: 'white', cursor: 'pointer' } as React.CSSProperties }
  function select() { return { padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' } as React.CSSProperties }
}

function HepaStepBadge({ n, active, done, label }: { n: number; active: boolean; done: boolean; label: string }) {
  const bg = done ? '#16a34a' : active ? '#2563eb' : 'rgba(255,255,255,0.08)'
  const fg = done || active ? 'white' : '#94a3b8'
  return (
    <div style={{ padding: '6px 10px', borderRadius: 999, background: bg, color: fg, fontSize: 12, display: 'flex', gap: 6, alignItems: 'center' }}>
      <span style={{ fontWeight: 700 }}>{n}</span>
      <span>{label}</span>
    </div>
  )
}

function HepaKpi({ label, value, color }: { label: string; value: string; color: string }) {
  return (
    <div style={{ background: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>{label}</div>
      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <div style={{ width: 8, height: 8, borderRadius: 999, background: color }} />
        <div style={{ fontWeight: 700, color: '#e2e8f0' }}>{value}</div>
      </div>
    </div>
  )
}

function HepaGridScan({ grid, limit }: { grid: number[][]; limit: number }) {
  const w = 240; const h = 240; const rows = grid.length; const cols = grid[0]?.length || 0
  const cellW = w / Math.max(1, cols), cellH = h / Math.max(1, rows)
  return (
    <svg width={w} height={h} style={{ borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)', background: 'rgba(2,6,23,0.3)' }}>
      {grid.map((row, r) => row.map((val, c) => {
        const x = c * cellW; const y = r * cellH; const pass = val < limit
        const col = pass ? 'rgba(34,197,94,0.4)' : 'rgba(239,68,68,0.5)'
        return (
          <g key={`${r}-${c}`}>
            <rect x={x} y={y} width={cellW} height={cellH} fill={col} stroke="rgba(255,255,255,0.1)" />
            <text x={x + cellW/2} y={y + cellH/2} dominantBaseline="middle" textAnchor="middle" fontSize={11} fill="#e2e8f0">{(val * 100).toFixed(2)}%</text>
          </g>
        )
      }))}
    </svg>
  )
}

function VelMatrix({ matrix }: { matrix: number[][] }) {
  const w = 240; const h = 240; const rows = matrix.length; const cols = matrix[0]?.length || 0
  const cellW = w / Math.max(1, cols), cellH = h / Math.max(1, rows)
  const vals = matrix.flat(); const minV = Math.min(...vals); const maxV = Math.max(...vals)
  const color = (v: number) => {
    const t = (v - minV) / Math.max(0.0001, (maxV - minV))
    const r = Math.floor(96 + 96 * t), g = Math.floor(165 + 60 * (1 - Math.abs(t - 0.5) * 2)), b = Math.floor(250 * (1 - t))
    return `rgba(${r},${g},${b},0.7)`
  }
  return (
    <svg width={w} height={h} style={{ borderRadius: 8, border: '1px solid rgba(255,255,255,0.08)', background: 'rgba(2,6,23,0.3)' }}>
      {matrix.map((row, r) => row.map((val, c) => {
        const x = c * cellW; const y = r * cellH
        return (
          <g key={`${r}-${c}`}>
            <rect x={x} y={y} width={cellW} height={cellH} fill={color(val)} stroke="rgba(255,255,255,0.1)" />
            <text x={x + cellW/2} y={y + cellH/2} dominantBaseline="middle" textAnchor="middle" fontSize={11} fill="#e2e8f0">{val.toFixed(2)}</text>
          </g>
        )
      }))}
    </svg>
  )
}

function SmokePanel({ pass, onToggle }: { pass: boolean; onToggle: (v: boolean) => void }) {
  return (
    <div>
      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>Vizualizacija tokov je informativna – PASS pomeni jasne vertikalne linije brez recirkulacije.</div>
      <div style={{ display: 'flex', gap: 10, alignItems: 'center' }}>
        <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
          <input type="checkbox" checked={pass} onChange={e => onToggle(e.target.checked)} />
          Laminarno vedenje potrjeno
        </label>
      </div>
      <div style={{ marginTop: 8, height: 120, borderRadius: 8, overflow: 'hidden', position: 'relative', background: 'linear-gradient(180deg, rgba(2,6,23,0.4), rgba(2,6,23,0.2))', border: '1px solid rgba(255,255,255,0.08)' }}>
        {[...Array(10)].map((_, i) => (
          <div key={i} style={{ position: 'absolute', left: `${5 + i * 9}%`, top: '-10%', width: 2, height: '120%', background: pass ? 'rgba(148,163,184,0.6)' : 'rgba(239,68,68,0.5)', transform: pass ? 'none' : `skewX(${i%2?8:-8}deg)` }} />
        ))}
      </div>
    </div>
  )
}

// Helpers
function randomScan(min: number, max: number) {
  const out: number[][] = []
  for (let r = 0; r < 5; r++) {
    const row: number[] = []
    for (let c = 0; c < 5; c++) {
      row.push(clamp(randn((min + max) / 2, (max - min) / 6), min / 2, max * 1.2))
    }
    out.push(row)
  }
  return out
}
function makeVelMatrix(center: number) {
  const out: number[][] = []
  for (let r = 0; r < 3; r++) {
    const row: number[] = []
    for (let c = 0; c < 3; c++) {
      const val = clamp(center + (r - 1) * 0.03 + (c - 1) * 0.02 + (Math.random() - 0.5) * 0.02, 0.2, 0.8)
      row.push(val)
    }
    out.push(row)
  }
  return out
}
function arrSet<T>(arr: T[], idx: number, val: T): T[] { return arr.map((v, i) => i === idx ? val : v) }
function clamp(n: number, a: number, b: number) { return Math.max(a, Math.min(b, n)) }
function randn(mu: number, sigma: number) { const u=1-Math.random(), v=1-Math.random(); const z=Math.sqrt(-2*Math.log(u))*Math.cos(2*Math.PI*v); return mu + z * sigma }
function round(n: number, d: number) { const k = Math.pow(10, d); return Math.round(n * k) / k }
function mean(xs: number[]) { return (xs.reduce((a,b)=>a+b,0) / Math.max(1, xs.length)) }
function max(xs: number[]) { return xs.reduce((m, v) => Math.max(m, v), -Infinity) }
function tick(b: boolean) { return b ? 'PASS' : '—' }

// Spare Parts & Tools Optimizer — service level vs safety stock (Monte Carlo-lite)
export function SparePartsToolsOptimizer() {
  type Part = {
    id: string
    name: string
    mttfDays: number
    leadTimeDays: number
    unitCost: number
    demandPerEvent: number
    onHand: number
  }

  const [serviceLevel, setServiceLevel] = useState(0.95)
  const [carryRate, setCarryRate] = useState(0.2)
  const [parts, setParts] = useState<Part[]>([
    { id: 'p1', name: 'HEPA filter H14', mttfDays: 365, leadTimeDays: 21, unitCost: 300, demandPerEvent: 1, onHand: 2 },
    { id: 'p2', name: 'Tesnilo črpalke', mttfDays: 180, leadTimeDays: 14, unitCost: 120, demandPerEvent: 1, onHand: 3 },
    { id: 'p3', name: 'Temp. sonda Pt100', mttfDays: 540, leadTimeDays: 7, unitCost: 80, demandPerEvent: 1, onHand: 5 }
  ])

  type Result = { id: string; recSS: number; stockoutProb: number; annualCarrying: number }

  const results: Result[] = React.useMemo(() => {
    return parts.map(p => {
      const meanUnits = (p.leadTimeDays / Math.max(1, p.mttfDays)) * p.demandPerEvent
      // Binary search minimal safety stock to meet target
      const targetOut = Math.max(0, 1 - serviceLevel)
      let lo = 0, hi = Math.max(3, Math.ceil(meanUnits + 6 * Math.sqrt(meanUnits + 1))) + 20
      let best = hi
      for (let iter = 0; iter < 12; iter++) {
        const mid = Math.floor((lo + hi) / 2)
        const prob = stockoutProb(meanUnits, p.onHand + mid)
        if (prob <= targetOut) { best = mid; hi = Math.max(lo, mid) } else { lo = mid + 1 }
      }
      const recSS = Math.max(0, Math.min(best, 999))
      const probAtRec = stockoutProb(meanUnits, p.onHand + recSS)
      const annualCarrying = recSS * p.unitCost * carryRate
      return { id: p.id, recSS, stockoutProb: probAtRec, annualCarrying }
    })
  }, [parts, serviceLevel, carryRate])

  const totals = results.reduce((acc, r) => ({
    annual: acc.annual + r.annualCarrying,
    ss: acc.ss + r.recSS
  }), { annual: 0, ss: 0 })

  return (
    <div style={{ padding: 20, display: 'grid', gridTemplateColumns: '1.1fr 0.9fr', gap: 16 }}>
      {/* Config and table */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <h4 style={{ marginTop: 0 }}>🔧 Spare Parts & Tools Optimizer</h4>

        <div style={{ display: 'flex', gap: 16, alignItems: 'center', marginBottom: 12, flexWrap: 'wrap' }}>
          <div style={{ fontSize: 12, color: '#94a3b8' }}>Ciljni service level</div>
          <input type="range" min={0.85} max={0.999} step={0.001} value={serviceLevel} onChange={e => setServiceLevel(parseFloat(e.target.value))} style={{ width: 200 }} />
          <div style={{ width: 70, textAlign: 'right', color: '#e2e8f0' }}>{(serviceLevel * 100).toFixed(1)}%</div>
          <div style={{ fontSize: 12, color: '#94a3b8', marginLeft: 12 }}>Letna stroškovna stopnja</div>
          <input type="range" min={0} max={0.4} step={0.01} value={carryRate} onChange={e => setCarryRate(parseFloat(e.target.value))} style={{ width: 180 }} />
          <div style={{ width: 60, textAlign: 'right', color: '#e2e8f0' }}>{(carryRate * 100).toFixed(0)}%</div>
        </div>

        <div style={{ overflowX: 'auto' }}>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              <tr style={{ color: '#94a3b8', textAlign: 'left' }}>
                <th style={{ padding: '8px 6px' }}>Del</th>
                <th style={{ padding: '8px 6px' }}>MTTF (dni)</th>
                <th style={{ padding: '8px 6px' }}>Lead time (dni)</th>
                <th style={{ padding: '8px 6px' }}>Na zalogi</th>
                <th style={{ padding: '8px 6px' }}>€ / kos</th>
                <th style={{ padding: '8px 6px' }}>Prip. SS (kos)</th>
                <th style={{ padding: '8px 6px' }}>P(stockout)</th>
                <th style={{ padding: '8px 6px' }}>€ / leto (SS)</th>
              </tr>
            </thead>
            <tbody>
              {parts.map((p, idx) => {
                const r = results[idx]
                return (
                  <tr key={p.id} style={{ borderTop: '1px solid rgba(255,255,255,0.08)' }}>
                    <td style={{ padding: '8px 6px', color: '#e2e8f0' }}>{p.name}</td>
                    <td style={{ padding: '8px 6px' }}>
                      <input type="number" value={p.mttfDays} min={1} onChange={e => updatePart(p.id, { mttfDays: parseFloat(e.target.value || '0') })} style={numStyle()} />
                    </td>
                    <td style={{ padding: '8px 6px' }}>
                      <input type="number" value={p.leadTimeDays} min={0} onChange={e => updatePart(p.id, { leadTimeDays: parseFloat(e.target.value || '0') })} style={numStyle()} />
                    </td>
                    <td style={{ padding: '8px 6px' }}>
                      <input type="number" value={p.onHand} min={0} onChange={e => updatePart(p.id, { onHand: parseFloat(e.target.value || '0') })} style={numStyle()} />
                    </td>
                    <td style={{ padding: '8px 6px' }}>
                      <input type="number" value={p.unitCost} min={0} onChange={e => updatePart(p.id, { unitCost: parseFloat(e.target.value || '0') })} style={numStyle()} />
                    </td>
                    <td style={{ padding: '8px 6px', color: '#86efac', fontWeight: 700 }}>{r.recSS}</td>
                    <td style={{ padding: '8px 6px', color: r.stockoutProb <= (1 - serviceLevel + 0.01) ? '#86efac' : '#fca5a5' }}>{(r.stockoutProb * 100).toFixed(2)}%</td>
                    <td style={{ padding: '8px 6px', color: '#fbbf24' }}>€{formatMoney(r.annualCarrying)}</td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>

        <div style={{ marginTop: 12, display: 'flex', gap: 12 }}>
          <button onClick={() => addPart()} style={btnStyle('#2563eb')}>➕ Dodaj del</button>
          <button onClick={() => resetDefaults()} style={btnStyle('#475569')}>↺ Ponastavi</button>
        </div>
      </div>

      {/* KPIs */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 16, padding: 16 }}>
        <div style={{ marginBottom: 10 }}>
          <h4 style={{ margin: 0 }}>KPI – zaloge in tveganje</h4>
        </div>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
          <InventoryMetric label="Skupni SS (kosi)" value={String(totals.ss)} color="#60a5fa" />
          <InventoryMetric label="Letni strošek SS" value={`€${formatMoney(totals.annual)}`} color="#fbbf24" />
          <InventoryMetric label="Ciljni service level" value={`${(serviceLevel * 100).toFixed(1)}%`} color="#86efac" />
          <InventoryMetric label="Deli" value={String(parts.length)} color="#c4b5fd" />
        </div>
        <div style={{ marginTop: 12, fontSize: 12, color: '#94a3b8' }}>
          Opomba: Model uporablja Poissonovo povpraševanje v času dobave in Monte Carlo oceno P(stockout). Rezultat je priporočilo SS za dosego izbranega service level.
        </div>
      </div>
    </div>
  )

  function btnStyle(bg: string) {
    return { padding: '8px 10px', borderRadius: 8, border: '1px solid rgba(255,255,255,0.1)', background: bg, color: 'white', cursor: 'pointer' } as React.CSSProperties
  }

  function numStyle() {
    return { width: 100, padding: '6px 8px', borderRadius: 8, background: 'rgba(255,255,255,0.06)', color: 'white', border: '1px solid rgba(255,255,255,0.1)' } as React.CSSProperties
  }

  function updatePart(id: string, patch: Partial<Part>) {
    setParts(ps => ps.map(p => p.id === id ? { ...p, ...patch } : p))
  }

  function addPart() {
    const nid = `p${Math.floor(Math.random() * 1e6)}`
    setParts(ps => [...ps, { id: nid, name: 'Nov del', mttfDays: 365, leadTimeDays: 14, unitCost: 100, demandPerEvent: 1, onHand: 1 }])
  }

  function resetDefaults() {
    setParts([
      { id: 'p1', name: 'HEPA filter H14', mttfDays: 365, leadTimeDays: 21, unitCost: 300, demandPerEvent: 1, onHand: 2 },
      { id: 'p2', name: 'Tesnilo črpalke', mttfDays: 180, leadTimeDays: 14, unitCost: 120, demandPerEvent: 1, onHand: 3 },
      { id: 'p3', name: 'Temp. sonda Pt100', mttfDays: 540, leadTimeDays: 7, unitCost: 80, demandPerEvent: 1, onHand: 5 }
    ])
  }

  function stockoutProb(meanUnits: number, availableUnits: number) {
    const trials = 800
    let out = 0
    for (let i = 0; i < trials; i++) {
      const demandUnits = poisson(meanUnits)
      if (demandUnits > availableUnits) out++
    }
    return out / trials
  }

  function poisson(meanUnits: number) {
    // Knuth's algorithm
    const L = Math.exp(-meanUnits)
    let k = 0
    let p = 1
    do {
      k++
      p *= Math.random()
    } while (p > L)
    return k - 1
  }
}

function InventoryMetric({ label, value, color }: { label: string; value: string; color: string }) {
  return (
    <div style={{ background: 'rgba(255,255,255,0.06)', padding: 12, borderRadius: 12, border: '1px solid rgba(255,255,255,0.08)' }}>
      <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 6 }}>{label}</div>
      <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
        <div style={{ width: 8, height: 8, borderRadius: 999, background: color }} />
        <div style={{ fontWeight: 700, color: '#e2e8f0' }}>{value}</div>
      </div>
    </div>
  )
}

// Dead‑Leg Finder & Loop Balancing (WFI/PW) — Slovenian UI
export function DeadLegFinder() {
  type Branch = { id: string; naziv: string; dolzinaM: number; premerMm: number; izolacija: boolean; omejitevPretoka: number }
  const [pretokSkupaj, setPretokSkupaj] = useState(50) // L/min
  const [veje, setVeje] = useState<Branch[]>([
    { id: 'v1', naziv: 'VejA-1', dolzinaM: 8, premerMm: 25, izolacija: true,  omejitevPretoka: 0 },
    { id: 'v2', naziv: 'VejA-2', dolzinaM: 2, premerMm: 20, izolacija: true,  omejitevPretoka: 15 },
    { id: 'v3', naziv: 'VejA-3', dolzinaM: 1, premerMm: 12, izolacija: false, omejitevPretoka: 0 },
    { id: 'v4', naziv: 'VejA-4', dolzinaM: 0.6, premerMm: 10, izolacija: true,  omejitevPretoka: 30 }
  ])

  // Poenostavljen model porazdelitve pretoka: glede na presek in omejitev
  const preseki = veje.map(v => Math.PI * Math.pow(v.premerMm / 2000, 2)) // m^2 (mm -> m)
  const upori = veje.map((v, i) => (1 + v.omejitevPretoka / 100) * (1 + v.dolzinaM / 10) / (preseki[i] || 1))
  const vsotaInverzov = upori.reduce((acc, u) => acc + (1 / u), 0)
  const porazdeljenPretok = upori.map(u => pretokSkupaj / 60 * (1 / u) / (vsotaInverzov || 1)) // m^3/s
  const hitrosti = porazdeljenPretok.map((q, i) => q / (preseki[i] || 1)) // m/s

  const opozorila = veje.map((v, i) => {
    const deadLegLimitM = 1.5 * (v.premerMm / 1000)
    const jeDeadLeg = v.dolzinaM > deadLegLimitM
    const nizkaHitrost = hitrosti[i] < 1 // cilj 1–2 m/s
    const nizkaTemp = v.izolacija ? false : true // brez izolacije → večje tveganje padca T
    return { id: v.id, jeDeadLeg, nizkaHitrost, nizkaTemp }
  })

  const skladnost = (() => {
    let score = 100
    opozorila.forEach((o, i) => {
      if (o.jeDeadLeg) score -= 15
      if (o.nizkaHitrost) score -= 10
      if (o.nizkaTemp) score -= 10
    })
    // Globalni cilj temperatur: ≥ 75–80°C implicitno (informativno)
    return Math.max(0, Math.min(100, score))
  })()

  return (
    <div style={{ padding: 24 }}>
      <h4 style={{ color: '#7c3aed', marginBottom: 16, textAlign: 'center' }}>🧩 Dead‑Leg Finder & Uravnoteženje Zanke</h4>

      {/* Kontrole zanke */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginBottom: 16 }}>
        <div style={{
          background: 'linear-gradient(135deg, rgba(124,58,237,0.08), rgba(2,6,23,0.8))',
          border: '1px solid rgba(124,58,237,0.3)',
          borderRadius: 12,
          padding: 16
        }}>
          <div style={{ color: '#cbd5e1', fontSize: 12, marginBottom: 8 }}>Skupni pretok (L/min)</div>
          <input type="range" min={10} max={120} value={pretokSkupaj} onChange={e => setPretokSkupaj(parseInt(e.target.value))} style={{ width: '100%' }} />
          <div style={{ color: '#e6eef8', fontWeight: 700, marginTop: 6 }}>{pretokSkupaj} L/min</div>

          <div style={{ marginTop: 12, color: '#94a3b8', fontSize: 12 }}>
            Cilj hitrosti v vejah: 1–2 m/s • Ciljna temperatura v zanki: ≥ 75–80°C
          </div>
        </div>

        <div style={{
          background: 'linear-gradient(135deg, rgba(15,23,42,0.8), rgba(124,58,237,0.08))',
          border: '1px solid rgba(124,58,237,0.3)',
          borderRadius: 12,
          padding: 16
        }}>
          <div style={{ color: '#cbd5e1', fontSize: 12, marginBottom: 8 }}>Skladnost z dobrimi praksami</div>
          <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
            <div style={{ flex: 1, height: 10, background: 'rgba(255,255,255,0.08)', borderRadius: 999 }}>
              <motion.div initial={{ width: 0 }} animate={{ width: `${skladnost}%` }} transition={{ duration: 0.5 }} style={{ height: 10, borderRadius: 999, background: skladnost > 70 ? '#10b981' : skladnost > 40 ? '#f59e0b' : '#ef4444' }} />
            </div>
            <div style={{ width: 46, textAlign: 'right', color: '#e6eef8', fontWeight: 700 }}>{Math.round(skladnost)}%</div>
          </div>
          <div style={{ color: '#94a3b8', fontSize: 12, marginTop: 8 }}>Odpravite označene dead‑lege, povečajte hitrost ali izolacijo.</div>
        </div>
      </div>

      {/* Urejanje vej */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(240px, 1fr))', gap: 12, marginBottom: 16 }}>
        {veje.map((v, i) => (
          <div key={v.id} style={{
            background: 'rgba(255,255,255,0.04)',
            border: `1px solid ${opozorila[i].jeDeadLeg || opozorila[i].nizkaHitrost ? '#f59e0b55' : 'rgba(255,255,255,0.1)'}`,
            borderRadius: 10,
            padding: 12
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 6 }}>
              <div style={{ color: '#e6eef8', fontWeight: 700 }}>{v.naziv}</div>
              <div style={{ color: opozorila[i].jeDeadLeg || opozorila[i].nizkaHitrost ? '#f59e0b' : '#10b981', fontWeight: 700 }}>{hitrosti[i].toFixed(2)} m/s</div>
            </div>
            <div style={{ display: 'grid', gap: 8, fontSize: 12, color: '#cbd5e1' }}>
              <div>
                Dolžina: {v.dolzinaM.toFixed(2)} m • Premer: {v.premerMm} mm
              </div>
              <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                Omejitev pretoka: <input type="range" min={0} max={80} value={v.omejitevPretoka} onChange={e => {
                  const val = parseInt(e.target.value)
                  setVeje(prev => prev.map(p => p.id === v.id ? { ...p, omejitevPretoka: val } : p))
                }} style={{ flex: 1 }} /> <span>{v.omejitevPretoka}%</span>
              </div>
              <label style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
                <input type="checkbox" checked={v.izolacija} onChange={e => setVeje(prev => prev.map(p => p.id === v.id ? { ...p, izolacija: e.target.checked } : p))} />
                Izolacija prisotna
              </label>
            </div>
            {(opozorila[i].jeDeadLeg || opozorila[i].nizkaHitrost || opozorila[i].nizkaTemp) && (
              <div style={{ marginTop: 8, color: '#f59e0b', fontSize: 12 }}>
                {opozorila[i].jeDeadLeg && <div>⚠️ Dead‑leg: dolžina {'>'} 1.5×D</div>}
                {opozorila[i].nizkaHitrost && <div>⚠️ Hitrost {'<'} 1 m/s</div>}
                {opozorila[i].nizkaTemp && <div>⚠️ Brez izolacije — padec T</div>}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Shema zanke */}
      <div style={{ background: 'rgba(15,23,42,0.6)', border: '1px solid rgba(124,58,237,0.25)', borderRadius: 12, padding: 12 }}>
        <svg width="100%" height="220" viewBox="0 0 800 220">
          {/* Glavna zanka */}
          <path d="M 60 60 L 740 60 L 740 160 L 60 160 Z" fill="none" stroke="#06b6d4" strokeWidth="6" />
          {/* Veje */}
          {veje.map((v, i) => (
            <g key={v.id}>
              <path d={`M ${120 + i * 150} 60 L ${120 + i * 150} ${140}`} fill="none" stroke={
                hitrosti[i] >= 1 ? '#22c55e' : '#f59e0b'
              } strokeWidth={6} />
              <circle cx={120 + i * 150} cy={145} r={8} fill={v.izolacija ? '#22c55e' : '#f59e0b'} />
              <text x={120 + i * 150} y={170} textAnchor="middle" fill="#cbd5e1" fontSize="11">{hitrosti[i].toFixed(2)} m/s</text>
              {opozorila[i].jeDeadLeg && <text x={120 + i * 150} y={188} textAnchor="middle" fill="#f59e0b" fontSize="11">Dead‑leg</text>}
            </g>
          ))}
        </svg>
      </div>
    </div>
  )
}

// Point‑of‑Use Qualification Mapper — Slovenian UI
export function POUQualificationMapper() {
  type Util = 'WFI' | 'PARA' | 'ZRAK'
  type PoU = { id: string; naziv: string; util: Util; trend: number[] }
  const init = (): PoU[] => [
    { id: 'p1', naziv: 'Polnjenje A', util: 'WFI',  trend: Array.from({ length: 20 }, () => 0.9 + Math.random() * 0.6) }, // prevodnost µS/cm
    { id: 'p2', naziv: 'Umivalnik B', util: 'WFI',  trend: Array.from({ length: 20 }, () => 0.8 + Math.random() * 0.7) },
    { id: 'p3', naziv: 'Avtoklav 1', util: 'PARA', trend: Array.from({ length: 20 }, () => 2.5 + Math.random() * 1.3) }, // NCG %
    { id: 'p4', naziv: 'POU-CA-2', util: 'ZRAK', trend: Array.from({ length: 20 }, () => -45 + Math.random() * 6) },     // rosišče °C
    { id: 'p5', naziv: 'Mešalnik C', util: 'ZRAK', trend: Array.from({ length: 20 }, () => -42 + Math.random() * 8) },
  ]
  const [pous, setPous] = useState<PoU[]>(init)

  // Pragovi: WFI prevodnost < 1.3 µS/cm; PARA NCG < 3.5%; ZRAK rosišče < -40°C
  const oceni = (p: PoU) => {
    const zadnja = p.trend[p.trend.length - 1]
    if (p.util === 'WFI') return { ok: zadnja < 1.3, label: `${zadnja.toFixed(2)} µS/cm`, target: '< 1.3 µS/cm' }
    if (p.util === 'PARA') return { ok: zadnja < 3.5, label: `${zadnja.toFixed(1)}% NCG`, target: '< 3.5% NCG' }
    return { ok: zadnja < -40, label: `${zadnja.toFixed(1)}°C`, target: '< -40°C' }
  }

  const spark = (values: number[], color: string) => {
    const w = 120, h = 40
    const min = Math.min(...values), max = Math.max(...values)
    const pts = values.map((v, i) => {
      const x = (i / (values.length - 1)) * w
      const y = h - ((v - min) / (max - min || 1)) * h
      return `${x},${y}`
    }).join(' ')
    return (
      <svg width={w} height={h}>
        <polyline points={pts} fill="none" stroke={color} strokeWidth={2} />
      </svg>
    )
  }

  return (
    <div style={{ padding: 24 }}>
      <h4 style={{ color: '#7c3aed', marginBottom: 16, textAlign: 'center' }}>📍 PoU Kvalifikacijski Pregled</h4>
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))', gap: 12 }}>
        {pous.map((p, idx) => {
          const res = oceni(p)
          const color = p.util === 'WFI' ? '#06b6d4' : p.util === 'PARA' ? '#10b981' : '#fbbf24'
          return (
            <motion.div key={p.id} initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: idx * 0.05 }} style={{
              background: 'rgba(255,255,255,0.04)', border: `1px solid ${res.ok ? 'rgba(16,185,129,0.4)' : 'rgba(239,68,68,0.5)'}`, borderRadius: 12, padding: 12
            }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                <div style={{ color: '#e6eef8', fontWeight: 700 }}>{p.naziv}</div>
                <div style={{ color: res.ok ? '#10b981' : '#ef4444', fontWeight: 700 }}>{res.ok ? 'QUALIFIED' : 'PENDING'}</div>
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8, color: '#94a3b8', fontSize: 12 }}>
                <div>Tip: {p.util}</div>
                <div>Cilj: {res.target}</div>
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                {spark(p.trend, color)}
                <div style={{ color: res.ok ? '#10b981' : '#ef4444', fontWeight: 700, minWidth: 96, textAlign: 'right' }}>{res.label}</div>
              </div>
              <div style={{ display: 'flex', gap: 8, marginTop: 10 }}>
                <motion.button whileHover={{ scale: 1.03 }} whileTap={{ scale: 0.97 }} className="filter-btn" onClick={() => {
                  // preprosto osveži zadnje 3 točke z blago izboljšavo za simulacijo ukrepov
                  setPous(prev => prev.map(x => x.id === p.id ? { ...x, trend: x.trend.map((v, i) => i > x.trend.length - 4 ? (p.util === 'WFI' ? v - 0.05 : p.util === 'PARA' ? v - 0.2 : v - 1) : v) } : x))
                }}>Ukrepi izvedeni</motion.button>
                <motion.button whileHover={{ scale: 1.03 }} whileTap={{ scale: 0.97 }} className="filter-btn" onClick={() => {
                  setPous(prev => prev.map(x => x.id === p.id ? { ...x, trend: [...x.trend.slice(1), (p.util === 'WFI' ? 0.8 + Math.random() * 0.7 : p.util === 'PARA' ? 2.5 + Math.random() * 1.3 : -45 + Math.random() * 6)] } : x))
                }}>Dodaj nov odvzem</motion.button>
              </div>
            </motion.div>
          )
        })}
      </div>
    </div>
  )
}

export function EnvironmentalTrend() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [dataType, setDataType] = useState<'particles' | 'cfu'>('particles')

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    const width = canvas.width
    const height = canvas.height
    const padding = 60

    // Generate trending data
    const days = 30
    const data: number[] = []
    let baseValue = dataType === 'particles' ? 50 : 2
    
    for (let i = 0; i < days; i++) {
      // Simulate gradual increase with some noise
      baseValue += (Math.random() - 0.45) * (dataType === 'particles' ? 10 : 0.5)
      baseValue = Math.max(0, baseValue)
      data.push(baseValue)
    }

    // Alert and Action limits
    const alertLimit = dataType === 'particles' ? 100 : 5
    const actionLimit = dataType === 'particles' ? 150 : 10
    const maxValue = Math.max(...data, actionLimit * 1.2)

    ctx.clearRect(0, 0, width, height)

    // Draw grid
    ctx.strokeStyle = 'rgba(255,255,255,0.05)'
    ctx.lineWidth = 1
    for (let i = 0; i <= 5; i++) {
      const y = padding + (height - padding * 2) * (i / 5)
      ctx.beginPath()
      ctx.moveTo(padding, y)
      ctx.lineTo(width - padding, y)
      ctx.stroke()
    }

    // Draw limit lines
    const alertY = padding + (height - padding * 2) * (1 - alertLimit / maxValue)
    const actionY = padding + (height - padding * 2) * (1 - actionLimit / maxValue)

    // Action limit (red)
    ctx.strokeStyle = '#ef4444'
    ctx.lineWidth = 2
    ctx.setLineDash([5, 5])
    ctx.beginPath()
    ctx.moveTo(padding, actionY)
    ctx.lineTo(width - padding, actionY)
    ctx.stroke()
    ctx.fillStyle = '#ef4444'
    ctx.font = 'bold 12px Inter'
    ctx.textAlign = 'right'
    ctx.fillText('Action Limit', width - padding - 10, actionY - 5)

    // Alert limit (orange)
    ctx.strokeStyle = '#f59e0b'
    ctx.beginPath()
    ctx.moveTo(padding, alertY)
    ctx.lineTo(width - padding, alertY)
    ctx.stroke()
    ctx.fillStyle = '#f59e0b'
    ctx.fillText('Alert Limit', width - padding - 10, alertY - 5)

    ctx.setLineDash([])

    // Draw data line
    ctx.strokeStyle = '#06b6d4'
    ctx.lineWidth = 3
    ctx.beginPath()

    const xStep = (width - padding * 2) / (days - 1)
    data.forEach((value, i) => {
      const x = padding + i * xStep
      const y = padding + (height - padding * 2) * (1 - value / maxValue)
      if (i === 0) {
        ctx.moveTo(x, y)
      } else {
        ctx.lineTo(x, y)
      }
    })
    ctx.stroke()

    // Draw data points
    data.forEach((value, i) => {
      const x = padding + i * xStep
      const y = padding + (height - padding * 2) * (1 - value / maxValue)
      
      // Color based on limit
      let color = '#10b981' // Green - Normal
      if (value >= actionLimit) {
        color = '#ef4444' // Red - Action
      } else if (value >= alertLimit) {
        color = '#f59e0b' // Orange - Alert
      }

      ctx.fillStyle = color
      ctx.beginPath()
      ctx.arc(x, y, 4, 0, Math.PI * 2)
      ctx.fill()
    })

    // Y-axis labels
    ctx.fillStyle = '#cbd5e1'
    ctx.font = '11px Inter'
    ctx.textAlign = 'right'
    for (let i = 0; i <= 5; i++) {
      const value = (maxValue / 5) * (5 - i)
      const y = padding + (height - padding * 2) * (i / 5)
      ctx.fillText(value.toFixed(0), padding - 10, y + 4)
    }

    // X-axis labels
    ctx.textAlign = 'center'
    for (let i = 0; i < days; i += 5) {
      const x = padding + i * xStep
      ctx.fillText(`D${i + 1}`, x, height - padding + 20)
    }

    // Labels
    ctx.save()
    ctx.translate(20, height / 2)
    ctx.rotate(-Math.PI / 2)
    ctx.textAlign = 'center'
    ctx.font = 'bold 12px Inter'
    ctx.fillStyle = '#e6eef8'
    ctx.fillText(dataType === 'particles' ? 'Particles (0.5 µm/m³)' : 'CFU (colony forming units)', 0, 0)
    ctx.restore()

    ctx.font = 'bold 12px Inter'
    ctx.textAlign = 'center'
    ctx.fillText('Days', width / 2, height - 10)

  }, [dataType])

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 20, textAlign: 'center'}}>Environmental Monitoring Trends</h4>
      <canvas ref={canvasRef} width={700} height={400} style={{maxWidth: '100%', background: 'rgba(0,0,0,0.3)', borderRadius: 8, display: 'block', margin: '0 auto'}} />
      
      <div style={{display: 'flex', gap: 12, justifyContent: 'center', marginTop: 16}}>
        <motion.button
          className={dataType === 'particles' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setDataType('particles')}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          💨 Particle Count
        </motion.button>
        <motion.button
          className={dataType === 'cfu' ? 'filter-btn active' : 'filter-btn'}
          onClick={() => setDataType('cfu')}
          whileHover={{scale: 1.05}}
          whileTap={{scale: 0.95}}
        >
          🦠 Microbial (CFU)
        </motion.button>
      </div>

      <div style={{
        marginTop: 20,
        display: 'grid',
        gridTemplateColumns: 'repeat(3, 1fr)',
        gap: 12
      }}>
        <div style={{background: 'rgba(16, 185, 129, 0.1)', padding: 12, borderRadius: 8, border: '2px solid #10b981'}}>
          <div style={{fontSize: 11, color: '#10b981', fontWeight: 700, marginBottom: 4}}>● NORMAL</div>
          <div style={{fontSize: 12, color: 'var(--muted)'}}>Below Alert Limit</div>
        </div>
        <div style={{background: 'rgba(245, 158, 11, 0.1)', padding: 12, borderRadius: 8, border: '2px solid #f59e0b'}}>
          <div style={{fontSize: 11, color: '#f59e0b', fontWeight: 700, marginBottom: 4}}>● ALERT</div>
          <div style={{fontSize: 12, color: 'var(--muted)'}}>Investigation Required</div>
        </div>
        <div style={{background: 'rgba(239, 68, 68, 0.1)', padding: 12, borderRadius: 8, border: '2px solid #ef4444'}}>
          <div style={{fontSize: 11, color: '#ef4444', fontWeight: 700, marginBottom: 4}}>● ACTION</div>
          <div style={{fontSize: 12, color: 'var(--muted)'}}>Immediate Corrective Action</div>
        </div>
      </div>

      <p style={{color: 'var(--muted)', fontSize: 13, textAlign: 'center', marginTop: 16}}>
        Trend analysis reveals gradual deterioration - enables proactive intervention before Action Limit
      </p>
    </div>
  )
}

export function IncidentTimeline() {
  const [activeStep, setActiveStep] = useState(0)

  const steps = [
    {
      title: 'Incident Detected',
      icon: '🚨',
      color: '#ef4444',
      description: 'Contamination found in environmental monitoring',
      action: 'Immediate containment - Quarantine area',
      duration: '0-2h'
    },
    {
      title: 'Documentation',
      icon: '📝',
      color: '#f59e0b',
      description: 'Record all details: What, When, Where, Who',
      action: 'Open deviation/incident report',
      duration: '2-4h'
    },
    {
      title: 'Root Cause Analysis',
      icon: '🔍',
      color: '#fbbf24',
      description: '5 Why / Fishbone / Fault Tree Analysis',
      action: 'Identify TRUE root cause (not "human error")',
      duration: '1-3 days'
    },
    {
      title: 'Corrective Action',
      icon: '🔧',
      color: '#06b6d4',
      description: 'Fix the immediate problem',
      action: 'Implement solution for THIS occurrence',
      duration: '3-7 days'
    },
    {
      title: 'Preventive Action',
      icon: '🛡️',
      color: '#10b981',
      description: 'Prevent recurrence everywhere',
      action: 'Extend solution to all similar situations',
      duration: '1-2 weeks'
    },
    {
      title: 'Verification',
      icon: '✅',
      color: '#22c55e',
      description: 'Confirm effectiveness of CAPA',
      action: 'Monitor trends, re-test, audit compliance',
      duration: '1-3 months'
    },
    {
      title: 'Closure',
      icon: '📋',
      color: '#a78bfa',
      description: 'QA review and approval',
      action: 'Document lessons learned, close CAPA',
      duration: 'Final'
    }
  ]

  return (
    <div style={{padding: 24}}>
      <h4 style={{color: '#7c3aed', marginBottom: 30, textAlign: 'center'}}>CAPA Process Timeline</h4>
      
      <div style={{position: 'relative', paddingLeft: 40}}>
        {/* Timeline line */}
        <div style={{
          position: 'absolute',
          left: 20,
          top: 0,
          bottom: 0,
          width: 3,
          background: 'linear-gradient(180deg, #ef4444, #f59e0b, #fbbf24, #06b6d4, #10b981, #22c55e, #a78bfa)'
        }} />

        {steps.map((step, i) => (
          <motion.div
            key={i}
            style={{
              position: 'relative',
              marginBottom: 30,
              paddingLeft: 30,
              cursor: 'pointer'
            }}
            initial={{opacity: 0, x: -20}}
            animate={{opacity: 1, x: 0}}
            transition={{delay: i * 0.1}}
            onClick={() => setActiveStep(i)}
          >
            {/* Step indicator */}
            <motion.div
              style={{
                position: 'absolute',
                left: 8,
                top: 0,
                width: 28,
                height: 28,
                borderRadius: '50%',
                background: step.color,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 16,
                border: activeStep === i ? '3px solid white' : '2px solid rgba(255,255,255,0.3)',
                boxShadow: activeStep === i ? `0 0 20px ${step.color}` : 'none'
              }}
              whileHover={{scale: 1.2}}
              animate={{scale: activeStep === i ? 1.15 : 1}}
            >
              {step.icon}
            </motion.div>

            {/* Step content */}
            <div style={{
              background: activeStep === i ? `linear-gradient(135deg, ${step.color}22, ${step.color}11)` : 'rgba(255,255,255,0.03)',
              padding: 16,
              borderRadius: 12,
              border: `2px solid ${activeStep === i ? step.color : 'rgba(255,255,255,0.1)'}`,
              transition: 'all 0.3s'
            }}>
              <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: 8}}>
                <h5 style={{margin: 0, color: step.color, fontSize: 16, fontWeight: 700}}>
                  {i + 1}. {step.title}
                </h5>
                <span style={{
                  background: `${step.color}33`,
                  color: step.color,
                  padding: '4px 10px',
                  borderRadius: 12,
                  fontSize: 11,
                  fontWeight: 600
                }}>
                  {step.duration}
                </span>
              </div>
              
              <p style={{margin: '8px 0', color: '#e6eef8', fontSize: 14}}>
                {step.description}
              </p>

              <AnimatePresence>
                {activeStep === i && (
                  <motion.div
                    initial={{height: 0, opacity: 0}}
                    animate={{height: 'auto', opacity: 1}}
                    exit={{height: 0, opacity: 0}}
                    style={{
                      marginTop: 12,
                      paddingTop: 12,
                      borderTop: `1px solid ${step.color}33`
                    }}
                  >
                    <div style={{fontSize: 13, color: 'var(--muted)'}}>
                      <strong style={{color: step.color}}>Action Required:</strong> {step.action}
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        ))}
      </div>

      <div style={{
        marginTop: 30,
        background: 'rgba(124, 58, 237, 0.1)',
        padding: 16,
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)',
        textAlign: 'center'
      }}>
        <div style={{fontSize: 13, color: 'var(--muted)', lineHeight: 1.7}}>
          <strong style={{color: '#e6eef8'}}>Ključno:</strong> Root cause = sistemski problem (ne "human error"). 
          Corrective = popravi TA incident. Preventive = prepreči POVSOD. Verifikacija = potrditev da deluje.
        </div>
      </div>
    </div>
  )
}

// INCIDENT MANAGEMENT & CAPA — Three simple, high-impact tools
export function RootCauseCanvas() {
  const [problem, setProblem] = useState('')
  const [whys, setWhys] = useState<Array<{ why: string; category: 'Man'|'Machine'|'Material'|'Method'|'Measurement'|'Mother Nature'; evidence: boolean }>>([
    { why: '', category: 'Man', evidence: false }
  ])
  const [capa, setCapa] = useState<Array<{ action: string; owner: string; due: string; type: 'Corrective'|'Preventive'; done: boolean }>>([])

  const addWhy = () => setWhys(prev => [...prev, { why: '', category: 'Man', evidence: false }])
  const removeWhy = (i: number) => setWhys(prev => prev.filter((_, idx) => idx !== i))
  const addCAPA = () => setCapa(prev => [...prev, { action: '', owner: '', due: new Date().toISOString().slice(0,10), type: 'Corrective', done: false }])
  const removeCAPA = (i: number) => setCapa(prev => prev.filter((_, idx) => idx !== i))

  const exportTxt = () => {
    const lines: string[] = []
    lines.push('INCIDENT:')
    lines.push(problem || '-')
    lines.push('')
    lines.push('5 WHY ANALIZA:')
    whys.forEach((w, i) => lines.push(`${i+1}. Zakaj? ${w.why}  [${w.category}] ${w.evidence ? '✓ dokaz' : ''}`))
    lines.push('')
    lines.push('CAPA:')
    capa.forEach((c, i) => lines.push(`${i+1}. ${c.type}: ${c.action}  (Lastnik: ${c.owner || '-'}, Rok: ${c.due || '-'}) ${c.done ? '✓ izvedeno' : ''}`))
    const blob = new Blob([lines.join('\n')], { type: 'text/plain;charset=utf-8' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a'); a.href = url; a.download = 'root-cause-capa.txt'; a.click(); URL.revokeObjectURL(url)
  }

  return (
    <div style={{ padding: 24, background: 'rgba(124,58,237,0.06)', border: '1px solid rgba(124,58,237,0.25)', borderRadius: 12 }}>
      <h4 style={{ color: '#c4b5fd', marginTop: 0, marginBottom: 8 }}>🧠 Root‑Cause Canvas (5 Why + Ishikawa)</h4>
      <p style={{ color: '#94a3b8', marginTop: 0 }}>Hitro zapišite problem, 5‑Why verigo in CAPA naloge. Namig: 'human error' ni korenina – poiščite sistemske vzroke.</p>

      <label style={{ display: 'block', marginBottom: 12 }}>
        <div style={{ color: '#e6eef8', fontWeight: 700, marginBottom: 6 }}>Problem</div>
        <input value={problem} onChange={e=>setProblem(e.target.value)} placeholder="Kratek opis incidenta" />
      </label>

      <div style={{ display: 'grid', gap: 10 }}>
        {whys.map((w, i) => (
          <div key={i} style={{ display: 'grid', gridTemplateColumns: '1fr 160px 120px 36px', gap: 8, alignItems: 'center', background: 'rgba(255,255,255,0.04)', border: '1px solid rgba(255,255,255,0.08)', padding: 8, borderRadius: 8 }}>
            <input value={w.why} onChange={e=>setWhys(prev=> prev.map((p,pi)=> pi===i? { ...p, why: e.target.value }: p))} placeholder={`Zakaj #${i+1}?`} />
            <select value={w.category} onChange={e=>setWhys(prev=> prev.map((p,pi)=> pi===i? { ...p, category: e.target.value as any }: p))}>
              <option>Man</option>
              <option>Machine</option>
              <option>Material</option>
              <option>Method</option>
              <option>Measurement</option>
              <option>Mother Nature</option>
            </select>
            <label style={{ display: 'flex', gap: 6, alignItems: 'center', color: '#cbd5e1', fontSize: 12 }}>
              <input type="checkbox" checked={w.evidence} onChange={e=>setWhys(prev=> prev.map((p,pi)=> pi===i? { ...p, evidence: e.target.checked }: p))} /> Dokaz prisoten
            </label>
            <button className="btn-ghost" onClick={()=>removeWhy(i)}>✖</button>
          </div>
        ))}
      </div>
      <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>
        <button className="btn-ghost" onClick={addWhy}>+ Dodaj "Zakaj"</button>
      </div>

      <div style={{ marginTop: 16, color: '#e6eef8', fontWeight: 700 }}>CAPA</div>
      <div style={{ display: 'grid', gap: 8 }}>
        {capa.map((c, i) => (
          <div key={i} style={{ display: 'grid', gridTemplateColumns: '1fr 160px 130px 130px 36px', gap: 8, alignItems: 'center', background: 'rgba(255,255,255,0.04)', border: '1px solid rgba(255,255,255,0.08)', padding: 8, borderRadius: 8 }}>
            <input value={c.action} onChange={e=>setCapa(prev=> prev.map((p,pi)=> pi===i? { ...p, action: e.target.value }: p))} placeholder="Ukrep" />
            <select value={c.type} onChange={e=>setCapa(prev=> prev.map((p,pi)=> pi===i? { ...p, type: e.target.value as any }: p))}>
              <option>Corrective</option>
              <option>Preventive</option>
            </select>
            <input value={c.owner} onChange={e=>setCapa(prev=> prev.map((p,pi)=> pi===i? { ...p, owner: e.target.value }: p))} placeholder="Lastnik" />
            <input type="date" value={c.due} onChange={e=>setCapa(prev=> prev.map((p,pi)=> pi===i? { ...p, due: e.target.value }: p))} />
            <label title="Označi kot izvedeno" style={{ display: 'flex', alignItems: 'center', gap: 6, justifyContent: 'center' }}>
              <input type="checkbox" checked={c.done} onChange={e=>setCapa(prev=> prev.map((p,pi)=> pi===i? { ...p, done: e.target.checked }: p))} />
            </label>
            <button className="btn-ghost" onClick={()=>removeCAPA(i)}>✖</button>
          </div>
        ))}
      </div>
      <div style={{ marginTop: 8, display: 'flex', gap: 8 }}>
        <button className="btn-ghost" onClick={addCAPA}>+ Dodaj CAPA</button>
        <button className="btn-primary" onClick={exportTxt}>⬇️ Izvozi TXT</button>
      </div>

      <div style={{ marginTop: 16, display: 'grid', gridTemplateColumns: 'repeat(auto-fit,minmax(160px,1fr))', gap: 8 }}>
        <div className="metric"><div className="metric-label">Št. zakajev</div><div className="metric-value">{whys.filter(w=>w.why.trim()).length}</div></div>
        <div className="metric"><div className="metric-label">Dokazi</div><div className="metric-value">{whys.filter(w=>w.evidence).length}</div></div>
        <div className="metric"><div className="metric-label">CAPA naloge</div><div className="metric-value">{capa.length}</div></div>
        <div className="metric"><div className="metric-label">Izvedenih</div><div className="metric-value">{capa.filter(c=>c.done).length}</div></div>
      </div>
    </div>
  )
}

export function DeviationTriageBoard() {
  type Sev = 'Minor'|'Major'|'Critical'
  type Det = 'Nizka'|'Srednja'|'Visoka'
  const [items, setItems] = useState<Array<{ id: number; title: string; severity: Sev; detectability: Det; recommended: string }>>([])
  const [title, setTitle] = useState('')
  const [severity, setSeverity] = useState<Sev>('Major')
  const [detectability, setDetectability] = useState<Det>('Srednja')

  function recommendation(s: Sev, d: Det){
    const matrix: Record<Sev, Record<Det, string>> = {
      Minor: {
        Nizka: 'Zabeleži in spremljaj trend',
        Srednja: 'Lokalna korekcija + spremljanje',
        Visoka: 'Korektivni ukrep + mini RCA'
      },
      Major: {
        Nizka: 'RCA + CAPA; QA obvestilo',
        Srednja: 'RCA + CAPA; ocena vpliva na serije',
        Visoka: 'Takojšnji containment; RCA + CAPA; QA odobritev'
      },
      Critical: {
        Nizka: 'Takojšnji containment; QA; preveri serije',
        Srednja: 'Ustavi proces; QA; polni RCA; regulatorna ocena',
        Visoka: 'STOP; krizni tim; regulatorna notifikacija možna'
      }
    }
    return matrix[s][d]
  }

  const addItem = () => {
    if (!title.trim()) return
    const rec = recommendation(severity, detectability)
    setItems(prev => [{ id: Date.now(), title, severity, detectability, recommended: rec }, ...prev])
    setTitle('')
  }
  const removeItem = (id: number) => setItems(prev => prev.filter(i => i.id !== id))

  const exportCsv = () => {
    const rows = [ ['Naslov', 'Resnost', 'Detektabilnost', 'Priporočilo'] ]
    items.forEach(i => rows.push([i.title, i.severity, i.detectability, i.recommended]))
    const csv = rows.map(r => r.map(f => '"'+String(f).replace(/"/g,'""')+'"').join(',')).join('\n')
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a'); a.href = url; a.download = 'deviation-triage.csv'; a.click(); URL.revokeObjectURL(url)
  }

  return (
    <div style={{ padding: 24, background: 'rgba(234,179,8,0.06)', border: '1px solid rgba(234,179,8,0.25)', borderRadius: 12 }}>
      <h4 style={{ color: '#fde68a', marginTop: 0, marginBottom: 8 }}>🧭 Deviation Triage Board</h4>
      <p style={{ color: '#94a3b8', marginTop: 0 }}>Hitra ocena resnosti in detektabilnosti z avtomatskim priporočilom ukrepov.</p>

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 140px 160px 140px', gap: 8, alignItems: 'center' }}>
        <input value={title} onChange={e=>setTitle(e.target.value)} placeholder="Opis odstopanja" />
        <select value={severity} onChange={e=>setSeverity(e.target.value as Sev)}>
          <option>Minor</option>
          <option>Major</option>
          <option>Critical</option>
        </select>
        <select value={detectability} onChange={e=>setDetectability(e.target.value as Det)}>
          <option>Nizka</option>
          <option>Srednja</option>
          <option>Visoka</option>
        </select>
        <button className="btn-primary" onClick={addItem}>➕ Dodaj</button>
      </div>

      {title.trim() && (
        <div style={{ marginTop: 8, fontSize: 12, color: '#cbd5e1' }}>Predlog: {recommendation(severity, detectability)}</div>
      )}

      <div style={{ marginTop: 12, display: 'grid', gap: 8 }}>
        {items.map(i => (
          <div key={i.id} style={{ display: 'grid', gridTemplateColumns: '1fr 100px 120px 1fr 36px', gap: 8, alignItems: 'center', background: 'rgba(255,255,255,0.04)', border: '1px solid rgba(255,255,255,0.08)', padding: 8, borderRadius: 8 }}>
            <div style={{ color: '#e6eef8', fontWeight: 700 }}>{i.title}</div>
            <span style={{ color: i.severity==='Critical' ? '#f87171' : i.severity==='Major' ? '#fbbf24' : '#86efac', fontWeight: 700 }}>{i.severity}</span>
            <span style={{ color: '#93c5fd' }}>{i.detectability}</span>
            <div style={{ color: '#cbd5e1', fontSize: 12 }}>{i.recommended}</div>
            <button className="btn-ghost" onClick={()=>removeItem(i.id)}>✖</button>
          </div>
        ))}
      </div>

      <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>
        <button className="btn-ghost" onClick={()=>setItems([])}>🧹 Počisti</button>
        <button className="btn-primary" onClick={exportCsv}>⬇️ Izvozi CSV</button>
      </div>
    </div>
  )
}

export function EffectivenessCheckPlanner() {
  type Check = { measure: string; metric: string; targets: string; schedule: Array<{ when: string; status: 'planned'|'done'|'fail' }> }
  const [checks, setChecks] = useState<Check[]>([{
    measure: 'Usposabljanje osebja',
    metric: '% uspešno opravljenih opazovanj',
    targets: '>= 95% v 3 mesecih',
    schedule: [
      { when: addMonths(1), status: 'planned' },
      { when: addMonths(3), status: 'planned' },
      { when: addMonths(6), status: 'planned' }
    ]
  }])

  function addMonths(m: number){ const d = new Date(); d.setMonth(d.getMonth()+m); return d.toISOString().slice(0,10) }

  const addCheck = () => setChecks(prev => [...prev, { measure: '', metric: '', targets: '', schedule: [ { when: addMonths(1), status: 'planned' } ] }])
  const removeCheck = (i: number) => setChecks(prev => prev.filter((_,idx)=> idx!==i))

  const exportJson = () => {
    const blob = new Blob([JSON.stringify({ generatedAt: new Date().toISOString(), checks }, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a'); a.href = url; a.download = 'effectiveness-checks.json'; a.click(); URL.revokeObjectURL(url)
  }

  return (
    <div style={{ padding: 24, background: 'rgba(34,197,94,0.06)', border: '1px solid rgba(34,197,94,0.25)', borderRadius: 12 }}>
      <h4 style={{ color: '#86efac', marginTop: 0, marginBottom: 8 }}>✅ Effectiveness Check Planner</h4>
      <p style={{ color: '#94a3b8', marginTop: 0 }}>Definirajte CAPA ukrepe, metrike, cilje in samodejno ustvarite preverjanja po datumih.</p>

      <div style={{ display: 'grid', gap: 10 }}>
        {checks.map((c, i) => (
          <div key={i} style={{ background: 'rgba(255,255,255,0.04)', border: '1px solid rgba(255,255,255,0.08)', borderRadius: 10, padding: 10, display: 'grid', gap: 8 }}>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 36px', gap: 8, alignItems: 'center' }}>
              <input value={c.measure} onChange={e=>setChecks(prev=> prev.map((p,pi)=> pi===i? { ...p, measure: e.target.value }: p))} placeholder="Ukrep (npr. standardizacija SOP)" />
              <input value={c.metric} onChange={e=>setChecks(prev=> prev.map((p,pi)=> pi===i? { ...p, metric: e.target.value }: p))} placeholder="Metrika (npr. % napak)" />
              <input value={c.targets} onChange={e=>setChecks(prev=> prev.map((p,pi)=> pi===i? { ...p, targets: e.target.value }: p))} placeholder="Cilji (npr. <= 0.5% v 3 m)" />
              <button className="btn-ghost" onClick={()=>removeCheck(i)}>✖</button>
            </div>

            <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
              {c.schedule.map((s, si) => (
                <div key={si} style={{ display: 'grid', gridTemplateColumns: '130px 1fr', gap: 8, alignItems: 'center', background: 'rgba(0,0,0,0.25)', border: '1px solid rgba(255,255,255,0.06)', padding: 8, borderRadius: 8 }}>
                  <input type="date" value={s.when} onChange={e=>setChecks(prev=> prev.map((p,pi)=> pi===i? { ...p, schedule: p.schedule.map((ss,ssi)=> ssi===si? { ...ss, when: e.target.value }: ss) }: p))} />
                  <select value={s.status} onChange={e=>setChecks(prev=> prev.map((p,pi)=> pi===i? { ...p, schedule: p.schedule.map((ss,ssi)=> ssi===si? { ...ss, status: e.target.value as any }: ss) }: p))}>
                    <option value="planned">Planirano</option>
                    <option value="done">Opravljeno</option>
                    <option value="fail">Ni doseglo cilja</option>
                  </select>
                </div>
              ))}
              <button className="btn-ghost" onClick={()=>setChecks(prev=> prev.map((p,pi)=> pi===i? { ...p, schedule: [...p.schedule, { when: new Date().toISOString().slice(0,10), status: 'planned' }] }: p))}>+ Dodaj termin</button>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit,minmax(160px,1fr))', gap: 8 }}>
              <div className="metric"><div className="metric-label">Planiranih</div><div className="metric-value">{c.schedule.length}</div></div>
              <div className="metric"><div className="metric-label">Opravljenih</div><div className="metric-value">{c.schedule.filter(s=>s.status==='done').length}</div></div>
              <div className="metric"><div className="metric-label">Neuspešnih</div><div className="metric-value">{c.schedule.filter(s=>s.status==='fail').length}</div></div>
            </div>
          </div>
        ))}
      </div>

      <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>
        <button className="btn-ghost" onClick={addCheck}>+ Dodaj ukrep</button>
        <button className="btn-primary" onClick={exportJson}>⬇️ Izvozi JSON</button>
      </div>
    </div>
  )
}

// UNIVERSAL LAZY-LOADED VISUALIZATION SELECTOR
interface VisualizationItem {
  id: string
  name: string
  description: string
  component: JSX.Element
}

function LazyVisualizationSelector({ 
  visualizations, 
  title = '🎬 Interaktivne Vizualizacije - Izberi',
  subtitle = 'Klikni na gumb za prikaz posamezne vizualizacije',
  accentColor = '#7c3aed',
  accentColorLight = '#a855f7',
  accentColorVeryLight = '#c4b5fd'
}: { 
  visualizations: VisualizationItem[]
  title?: string
  subtitle?: string
  accentColor?: string
  accentColorLight?: string
  accentColorVeryLight?: string
}) {
  const [activeViz, setActiveViz] = useState<string | null>(null)
  const [isFullscreen, setIsFullscreen] = useState(false)
  const containerRef = useRef<HTMLDivElement>(null)

  const toggleFullscreen = () => {
    if (!containerRef.current) return

    if (!isFullscreen) {
      // Enter fullscreen
      if (containerRef.current.requestFullscreen) {
        containerRef.current.requestFullscreen()
      } else if ((containerRef.current as any).webkitRequestFullscreen) {
        (containerRef.current as any).webkitRequestFullscreen()
      } else if ((containerRef.current as any).msRequestFullscreen) {
        (containerRef.current as any).msRequestFullscreen()
      }
      setIsFullscreen(true)
    } else {
      // Exit fullscreen
      if (document.exitFullscreen) {
        document.exitFullscreen()
      } else if ((document as any).webkitExitFullscreen) {
        (document as any).webkitExitFullscreen()
      } else if ((document as any).msExitFullscreen) {
        (document as any).msExitFullscreen()
      }
      setIsFullscreen(false)
    }
  }

  // Listen for fullscreen changes
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement)
    }

    document.addEventListener('fullscreenchange', handleFullscreenChange)
    document.addEventListener('webkitfullscreenchange', handleFullscreenChange)
    document.addEventListener('msfullscreenchange', handleFullscreenChange)

    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange)
      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange)
      document.removeEventListener('msfullscreenchange', handleFullscreenChange)
    }
  }, [])

  return (
    <div 
      ref={containerRef}
      style={{ 
        padding: 24, 
        background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', 
        borderRadius: 16,
        position: isFullscreen ? 'fixed' : 'relative',
        inset: isFullscreen ? 0 : 'auto',
        zIndex: isFullscreen ? 9999 : 'auto',
        overflow: isFullscreen ? 'auto' : 'visible'
      }}
    >
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        {title}
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        {subtitle}
      </p>

      {/* Visualization buttons */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 16, marginBottom: 24 }}>
        {visualizations.map(viz => (
          <motion.button
            key={viz.id}
            onClick={() => setActiveViz(activeViz === viz.id ? null : viz.id)}
            style={{
              padding: 20,
              background: activeViz === viz.id 
                ? `linear-gradient(135deg, ${accentColor}, ${accentColorLight})` 
                : 'rgba(255, 255, 255, 0.05)',
              border: activeViz === viz.id 
                ? `2px solid ${accentColor}` 
                : '2px solid rgba(255, 255, 255, 0.1)',
              borderRadius: 12,
              cursor: 'pointer',
              textAlign: 'left',
              transition: 'all 0.3s ease'
            }}
            whileHover={{ scale: 1.02, y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <div style={{ fontSize: 18, color: '#e6eef8', fontWeight: 700, marginBottom: 8 }}>
              {viz.name}
            </div>
            <div style={{ fontSize: 13, color: '#94a3b8', lineHeight: 1.4 }}>
              {viz.description}
            </div>
            <div style={{ 
              marginTop: 12, 
              fontSize: 12, 
              color: activeViz === viz.id ? accentColorVeryLight : accentColor,
              fontWeight: 600 
            }}>
              {activeViz === viz.id ? '▼ Prikazan' : '▶ Prikaži'}
            </div>
          </motion.button>
        ))}
      </div>

      {/* Fullscreen button */}
      {activeViz && (
        <motion.button
          onClick={toggleFullscreen}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          style={{
            position: isFullscreen ? 'fixed' : 'absolute',
            top: isFullscreen ? 20 : 20,
            right: isFullscreen ? 20 : 20,
            padding: '12px 20px',
            background: 'rgba(124, 58, 237, 0.9)',
            border: '2px solid rgba(167, 139, 250, 0.5)',
            borderRadius: 10,
            color: 'white',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: 8,
            zIndex: 10000,
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.3)'
          }}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          {isFullscreen ? '⬇️ Zapri celozaslonski način' : '⬆️ Celozaslonski način'}
        </motion.button>
      )}

      {/* Active visualization */}
      <AnimatePresence mode="wait">
        {activeViz && (
          <motion.div
            key={activeViz}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
          >
            {visualizations.find(v => v.id === activeViz)?.component}
          </motion.div>
        )}
      </AnimatePresence>

      {!activeViz && (
        <div style={{
          padding: 40,
          textAlign: 'center',
          background: 'rgba(0, 0, 0, 0.2)',
          borderRadius: 12,
          border: '2px dashed rgba(255, 255, 255, 0.1)'
        }}>
          <div style={{ fontSize: 48, marginBottom: 16 }}>🎯</div>
          <div style={{ fontSize: 16, color: '#94a3b8' }}>
            Izberi vizualizacijo zgoraj za prikaz
          </div>
        </div>
      )}
    </div>
  )
}

// LESSON 101 - Osnove Annex 1
function Lesson101VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'airflow',
          name: '🌊 3D Vizualizacija Pretoka Zraka',
          description: 'Interaktivna 3D scena s čistim prostorom, laminarnim pretokom in operaterjem',
          component: <AdvancedAirflowVisualization />
        },
        {
          id: 'ccp',
          name: '🎯 Kritične Kontrolne Točke (CCP)',
          description: '5 kritičnih kontrolnih točk z monitoringom parametrov, tveganj in kontrol',
          component: <InteractiveRiskMatrix />
        }
      ]}
      accentColor="#22c55e"
      accentColorLight="#16a34a"
      accentColorVeryLight="#86efac"
    />
  )
}

// LESSON 102 - HEPA Filtracija
function Lesson102VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: '3d-mechanisms',
          name: '🧬 3D Mehanizmi Filtracije',
          description: 'Interaktivna 3D vizualizacija treh mehanizmov ujetja delcev',
          component: <HepaFilterMechanisms3D />
        },
        {
          id: 'efficiency',
          name: '📊 Graf Učinkovitosti HEPA Filtrov',
          description: 'Primerjava učinkovitosti H13, H14 in U15 filtrov',
          component: <HepaEfficiencyChart />
        }
      ]}
      accentColor="#06b6d4"
      accentColorLight="#3b82f6"
      accentColorVeryLight="#bae6fd"
    />
  )
}

// LESSON 103 - Klasifikacija Prostorov
function Lesson103VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'simulator',
          name: '🔬 Napredni Simulator Štetja',
          description: 'Kompleksen simulator z različnimi scenariji kontaminacije',
          component: <ParticleCounterSimulation />
        },
        {
          id: 'counter',
          name: '📊 Štetje Delcev v Realnem Času',
          description: 'Animacija štetja delcev po razredih',
          component: <ParticleCounterSimulation />
        },
        {
          id: 'comparison',
          name: '📈 Primerjava Mej po Razredih',
          description: 'Grafični prikaz dovoljenih mej delcev',
          component: <ClassComparisonChart />
        },
        {
          id: 'rest-operation',
          name: '⚖️ Mirovanje vs. Delovanje',
          description: 'Primerjava pogojev mirovanja in delovanja',
          component: <AtRestVsOperationComparison />
        }
      ]}
      accentColor="#7c3aed"
      accentColorLight="#a855f7"
      accentColorVeryLight="#c4b5fd"
    />
  )
}

// LESSON 104 - Tlačne razlike
function Lesson104VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'airlock',
          name: '� Simulacija Zračnih Zapornic',
          description: 'Interaktivna simulacija 3 tipov zračnih zapornic z odpiranjem vrat',
          component: <AirLockSimulation />
        }
      ]}
      accentColor="#f59e0b"
      accentColorLight="#f97316"
      accentColorVeryLight="#fcd34d"
    />
  )
}

// RECOVERY TIME SIMULATOR - Interactive visualization of cleanroom recovery testing
export function RecoveryTimeSimulator() {
  const [testPhase, setTestPhase] = useState<'idle' | 'injection' | 'recovery' | 'complete'>('idle')
  const [roomClass, setRoomClass] = useState<'A' | 'B' | 'C' | 'D'>('A')
  const [achRate, setAchRate] = useState(750)
  const [currentConcentration, setCurrentConcentration] = useState(0)
  const [elapsedTime, setElapsedTime] = useState(0)
  const [recoveryTime90, setRecoveryTime90] = useState<number | null>(null)
  const [recoveryTime99, setRecoveryTime99] = useState<number | null>(null)
  const [testHistory, setTestHistory] = useState<Array<{ time: number; concentration: number }>>([])

  const roomConfigs = {
    A: { name: 'Razred A', ach: 750, color: '#22c55e', expected90: 0.15, expected99: 0.3 },
    B: { name: 'Razred B', ach: 750, color: '#06b6d4', expected90: 0.15, expected99: 0.3 },
    C: { name: 'Razred C', ach: 30, color: '#f59e0b', expected90: 8, expected99: 18 },
    D: { name: 'Razred D', ach: 15, color: '#ef4444', expected90: 15, expected99: 35 }
  }

  const currentRoom = roomConfigs[roomClass]

  // Recovery simulation based on ACH
  useEffect(() => {
    if (testPhase !== 'recovery') return

    const interval = setInterval(() => {
      setElapsedTime(prev => {
        const newTime = prev + 0.1
        
        // Exponential decay: C(t) = C0 * e^(-ACH * t / 60)
        // ACH = air changes per hour, t = time in minutes
        const decayRate = achRate / 60 // Convert ACH to per-minute rate
        const concentration = 100 * Math.exp(-decayRate * newTime)
        
        setCurrentConcentration(concentration)
        
        // Record 90% recovery time (10% remaining)
        if (concentration <= 10 && recoveryTime90 === null) {
          setRecoveryTime90(newTime)
        }
        
        // Record 99% recovery time (1% remaining)
        if (concentration <= 1 && recoveryTime99 === null) {
          setRecoveryTime99(newTime)
          setTestPhase('complete')
        }
        
        // Update history
        setTestHistory(prev => [...prev, { time: newTime, concentration }])
        
        return newTime
      })
    }, 100)

    return () => clearInterval(interval)
  }, [testPhase, achRate, recoveryTime90, recoveryTime99])

  const startTest = () => {
    setTestPhase('injection')
    setCurrentConcentration(0)
    setElapsedTime(0)
    setRecoveryTime90(null)
    setRecoveryTime99(null)
    setTestHistory([])
    
    // Simulate injection phase (1 second)
    setTimeout(() => {
      setCurrentConcentration(100)
      setTestHistory([{ time: 0, concentration: 100 }])
      setTestPhase('recovery')
    }, 1000)
  }

  const resetTest = () => {
    setTestPhase('idle')
    setCurrentConcentration(0)
    setElapsedTime(0)
    setRecoveryTime90(null)
    setRecoveryTime99(null)
    setTestHistory([])
  }

  // Calculate expected recovery times based on ACH
  const calculateExpectedRecovery = (percentage: number) => {
    // t = -ln(remaining) / (ACH/60)
    const remaining = (100 - percentage) / 100
    const recoveryMinutes = -Math.log(remaining) / (achRate / 60)
    return recoveryMinutes
  }

  const expected90 = calculateExpectedRecovery(90)
  const expected99 = calculateExpectedRecovery(99)

  return (
    <div style={{ padding: 24, background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)', borderRadius: 16 }}>
      <h3 style={{ color: '#e6eef8', marginBottom: 8, fontSize: 24, fontWeight: 700 }}>
        🧪 Simulator Časa Obnove (Recovery Time)
      </h3>
      <p style={{ color: '#94a3b8', marginBottom: 24, fontSize: 14 }}>
        Preskus z aerosolom za preverjanje učinkovitosti prezračevanja
      </p>

      {/* Room Class Selection */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 12, marginBottom: 24 }}>
        {(['A', 'B', 'C', 'D'] as const).map(cls => (
          <motion.button
            key={cls}
            onClick={() => {
              setRoomClass(cls)
              setAchRate(roomConfigs[cls].ach)
              if (testPhase !== 'idle') resetTest()
            }}
            style={{
              padding: 16,
              background: roomClass === cls 
                ? `linear-gradient(135deg, ${roomConfigs[cls].color}, ${roomConfigs[cls].color}dd)` 
                : 'rgba(255, 255, 255, 0.05)',
              border: `2px solid ${roomClass === cls ? roomConfigs[cls].color : 'rgba(255, 255, 255, 0.1)'}`,
              borderRadius: 12,
              cursor: 'pointer',
              textAlign: 'center'
            }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.98 }}
            disabled={testPhase === 'recovery'}
          >
            <div style={{ fontSize: 14, color: '#e6eef8', fontWeight: 700 }}>
              {roomConfigs[cls].name}
            </div>
            <div style={{ fontSize: 11, color: '#94a3b8', marginTop: 4 }}>
              {roomConfigs[cls].ach} ACH
            </div>
          </motion.button>
        ))}
      </div>

      {/* ACH Control */}
      <div style={{
        padding: 20,
        background: 'rgba(0, 0, 0, 0.4)',
        borderRadius: 12,
        border: `2px solid ${currentRoom.color}`,
        marginBottom: 24
      }}>
        <div style={{ marginBottom: 16 }}>
          <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 8 }}>
            Izmenjave Zraka na Uro (ACH)
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div style={{ fontSize: 28, color: currentRoom.color, fontWeight: 800 }}>
              {achRate} <span style={{ fontSize: 14, fontWeight: 400 }}>ACH</span>
            </div>
            <div style={{ textAlign: 'right' }}>
              <div style={{ fontSize: 11, color: '#64748b' }}>Pričakovani čas obnove</div>
              <div style={{ fontSize: 13, color: '#22c55e' }}>90%: ~{expected90.toFixed(2)} min</div>
              <div style={{ fontSize: 13, color: '#3b82f6' }}>99%: ~{expected99.toFixed(2)} min</div>
            </div>
          </div>
        </div>
        
        <input
          type="range"
          min={roomClass === 'A' || roomClass === 'B' ? 400 : roomClass === 'C' ? 15 : 5}
          max={roomClass === 'A' || roomClass === 'B' ? 1000 : roomClass === 'C' ? 50 : 30}
          value={achRate}
          onChange={(e) => setAchRate(Number(e.target.value))}
          disabled={testPhase === 'recovery'}
          style={{
            width: '100%',
            height: 8,
            borderRadius: 4,
            outline: 'none',
            background: `linear-gradient(to right, ${currentRoom.color} ${((achRate - (roomClass === 'A' || roomClass === 'B' ? 400 : roomClass === 'C' ? 15 : 5)) / ((roomClass === 'A' || roomClass === 'B' ? 1000 : roomClass === 'C' ? 50 : 30) - (roomClass === 'A' || roomClass === 'B' ? 400 : roomClass === 'C' ? 15 : 5))) * 100}%, rgba(255, 255, 255, 0.1) ${((achRate - (roomClass === 'A' || roomClass === 'B' ? 400 : roomClass === 'C' ? 15 : 5)) / ((roomClass === 'A' || roomClass === 'B' ? 1000 : roomClass === 'C' ? 50 : 30) - (roomClass === 'A' || roomClass === 'B' ? 400 : roomClass === 'C' ? 15 : 5))) * 100}%)`,
            cursor: testPhase === 'recovery' ? 'not-allowed' : 'pointer',
            opacity: testPhase === 'recovery' ? 0.5 : 1
          }}
        />
      </div>

      {/* Test Status */}
      <div style={{
        padding: 20,
        background: `linear-gradient(135deg, ${currentRoom.color}22, ${currentRoom.color}11)`,
        borderRadius: 12,
        border: `2px solid ${currentRoom.color}`,
        marginBottom: 24
      }}>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 20, marginBottom: 20 }}>
          {/* Current Concentration */}
          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>
              Trenutna Koncentracija
            </div>
            <div style={{ fontSize: 32, color: currentRoom.color, fontWeight: 800 }}>
              {currentConcentration.toFixed(1)}
              <span style={{ fontSize: 14, fontWeight: 400, color: '#94a3b8' }}>%</span>
            </div>
          </div>

          {/* Elapsed Time */}
          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>
              Pretečeni Čas
            </div>
            <div style={{ fontSize: 32, color: '#3b82f6', fontWeight: 800 }}>
              {elapsedTime.toFixed(1)}
              <span style={{ fontSize: 14, fontWeight: 400, color: '#94a3b8' }}>min</span>
            </div>
          </div>

          {/* Test Status */}
          <div>
            <div style={{ fontSize: 12, color: '#94a3b8', marginBottom: 4 }}>
              Status Testa
            </div>
            <div style={{ fontSize: 16, color: '#e6eef8', fontWeight: 700 }}>
              {testPhase === 'idle' && '⏸️ Pripravljen'}
              {testPhase === 'injection' && '💉 Injiciranje...'}
              {testPhase === 'recovery' && '🔄 Obnova v teku'}
              {testPhase === 'complete' && '✅ Zaključeno'}
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        {testPhase !== 'idle' && (
          <div style={{ marginBottom: 20 }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
              <span style={{ fontSize: 12, color: '#94a3b8' }}>Odstranitev</span>
              <span style={{ fontSize: 12, color: currentRoom.color, fontWeight: 600 }}>
                {(100 - currentConcentration).toFixed(1)}%
              </span>
            </div>
            <div style={{
              width: '100%',
              height: 20,
              background: 'rgba(0, 0, 0, 0.4)',
              borderRadius: 10,
              overflow: 'hidden',
              border: '1px solid rgba(255, 255, 255, 0.1)'
            }}>
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: `${100 - currentConcentration}%` }}
                style={{
                  height: '100%',
                  background: `linear-gradient(90deg, ${currentRoom.color}, ${currentRoom.color}dd)`,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'flex-end',
                  paddingRight: 8
                }}
              >
                {currentConcentration < 50 && (
                  <span style={{ fontSize: 11, color: 'white', fontWeight: 700 }}>
                    {(100 - currentConcentration).toFixed(0)}%
                  </span>
                )}
              </motion.div>
            </div>
          </div>
        )}

        {/* Recovery Milestones */}
        {(recoveryTime90 !== null || recoveryTime99 !== null) && (
          <div style={{
            padding: 16,
            background: 'rgba(0, 0, 0, 0.3)',
            borderRadius: 8,
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: 16
          }}>
            <div>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>
                90% Odstranitev
              </div>
              <div style={{ fontSize: 20, color: '#22c55e', fontWeight: 700 }}>
                {recoveryTime90 !== null ? `${recoveryTime90.toFixed(2)} min` : '—'}
              </div>
              <div style={{ fontSize: 10, color: '#64748b' }}>
                Pričakovano: {expected90.toFixed(2)} min
              </div>
            </div>
            <div>
              <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 4 }}>
                99% Odstranitev
              </div>
              <div style={{ fontSize: 20, color: '#3b82f6', fontWeight: 700 }}>
                {recoveryTime99 !== null ? `${recoveryTime99.toFixed(2)} min` : '—'}
              </div>
              <div style={{ fontSize: 10, color: '#64748b' }}>
                Pričakovano: {expected99.toFixed(2)} min
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Control Buttons */}
      <div style={{ display: 'flex', gap: 12, marginBottom: 24 }}>
        <motion.button
          onClick={startTest}
          disabled={testPhase === 'recovery' || testPhase === 'injection'}
          style={{
            flex: 1,
            padding: '16px 24px',
            background: testPhase === 'idle' || testPhase === 'complete'
              ? `linear-gradient(135deg, ${currentRoom.color}, ${currentRoom.color}dd)` 
              : 'rgba(100, 116, 139, 0.3)',
            border: `2px solid ${testPhase === 'idle' || testPhase === 'complete' ? currentRoom.color : '#64748b'}`,
            borderRadius: 12,
            color: 'white',
            fontSize: 16,
            fontWeight: 700,
            cursor: testPhase === 'idle' || testPhase === 'complete' ? 'pointer' : 'not-allowed',
            opacity: testPhase === 'idle' || testPhase === 'complete' ? 1 : 0.5
          }}
          whileHover={testPhase === 'idle' || testPhase === 'complete' ? { scale: 1.02 } : {}}
          whileTap={testPhase === 'idle' || testPhase === 'complete' ? { scale: 0.98 } : {}}
        >
          {testPhase === 'idle' ? '🚀 Začni Test' : testPhase === 'complete' ? '🔄 Nov Test' : '⏳ Test v Teku...'}
        </motion.button>

        {testPhase !== 'idle' && (
          <motion.button
            onClick={resetTest}
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            style={{
              padding: '16px 24px',
              background: 'rgba(239, 68, 68, 0.2)',
              border: '2px solid #ef4444',
              borderRadius: 12,
              color: '#fca5a5',
              fontSize: 16,
              fontWeight: 700,
              cursor: 'pointer'
            }}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            ❌ Prekini
          </motion.button>
        )}
      </div>

      {/* Recovery Graph */}
      {testHistory.length > 0 && (
        <div style={{
          padding: 20,
          background: 'rgba(0, 0, 0, 0.4)',
          borderRadius: 12,
          border: '2px solid rgba(255, 255, 255, 0.1)',
          marginBottom: 24
        }}>
          <div style={{ fontSize: 16, color: '#e6eef8', fontWeight: 700, marginBottom: 16 }}>
            📈 Graf Obnove
          </div>
          
          <svg viewBox="0 0 600 300" style={{ width: '100%', height: 'auto' }}>
            {/* Grid */}
            <rect x="50" y="20" width="530" height="240" fill="rgba(15, 23, 42, 0.6)" stroke="rgba(255, 255, 255, 0.1)" strokeWidth="1" />
            
            {/* Y-axis labels (concentration) */}
            {[0, 25, 50, 75, 100].map(val => (
              <g key={val}>
                <line
                  x1="50"
                  y1={260 - (val * 2.4)}
                  x2="580"
                  y2={260 - (val * 2.4)}
                  stroke="rgba(255, 255, 255, 0.1)"
                  strokeDasharray="4"
                />
                <text
                  x="40"
                  y={260 - (val * 2.4) + 4}
                  fill="#94a3b8"
                  fontSize="11"
                  textAnchor="end"
                >
                  {val}%
                </text>
              </g>
            ))}

            {/* 90% and 99% recovery lines */}
            <line x1="50" y1={260 - (90 * 2.4)} x2="580" y2={260 - (90 * 2.4)} stroke="#22c55e" strokeWidth="2" strokeDasharray="6" opacity="0.5" />
            <text x="585" y={260 - (90 * 2.4) + 4} fill="#22c55e" fontSize="10" fontWeight="600">90%</text>
            
            <line x1="50" y1={260 - (99 * 2.4)} x2="580" y2={260 - (99 * 2.4)} stroke="#3b82f6" strokeWidth="2" strokeDasharray="6" opacity="0.5" />
            <text x="585" y={260 - (99 * 2.4) + 4} fill="#3b82f6" fontSize="10" fontWeight="600">99%</text>

            {/* Recovery curve */}
            <motion.path
              d={testHistory.map((point, idx) => {
                const x = 50 + (point.time / Math.max(elapsedTime, 1)) * 530
                const y = 260 - ((100 - point.concentration) * 2.4)
                return `${idx === 0 ? 'M' : 'L'} ${x} ${y}`
              }).join(' ')}
              fill="none"
              stroke={currentRoom.color}
              strokeWidth="3"
              strokeLinecap="round"
              initial={{ pathLength: 0 }}
              animate={{ pathLength: 1 }}
            />

            {/* X-axis label */}
            <text x="300" y="290" fill="#94a3b8" fontSize="12" textAnchor="middle" fontWeight="600">
              Čas (minute)
            </text>
            <text x="30" y="150" fill="#94a3b8" fontSize="12" textAnchor="middle" transform="rotate(-90 30 150)" fontWeight="600">
              Odstranitev (%)
            </text>
          </svg>
        </div>
      )}

      {/* Info Boxes */}
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16, marginBottom: 20 }}>
        <div style={{
          padding: 16,
          background: 'rgba(34, 197, 94, 0.1)',
          borderRadius: 12,
          border: '1px solid rgba(34, 197, 94, 0.3)'
        }}>
          <div style={{ fontSize: 14, color: '#22c55e', fontWeight: 700, marginBottom: 8 }}>
            📋 Dimni Preskus
          </div>
          <div style={{ fontSize: 12, color: '#cbd5e1', lineHeight: 1.5 }}>
            Uporaba dima ali aerosola (npr. PAO, DOP) za vizualizacijo pretoka zraka in preverjanje časa, potrebnega za odstranitev kontaminantov.
          </div>
        </div>

        <div style={{
          padding: 16,
          background: 'rgba(59, 130, 246, 0.1)',
          borderRadius: 12,
          border: '1px solid rgba(59, 130, 246, 0.3)'
        }}>
          <div style={{ fontSize: 14, color: '#3b82f6', fontWeight: 700, marginBottom: 8 }}>
            🔄 Kdaj Testiramo?
          </div>
          <div style={{ fontSize: 12, color: '#cbd5e1', lineHeight: 1.5 }}>
            Po incidentih, spremembah HVAC sistema, redna revalidacija, po vzdrževalnih delih ali pri sumljivih rezultatih monitoringa.
          </div>
        </div>
      </div>

      {/* Formula Box */}
      <div style={{
        padding: 16,
        background: 'rgba(124, 58, 237, 0.1)',
        borderRadius: 12,
        border: '1px solid rgba(124, 58, 237, 0.3)',
        fontSize: 13,
        color: '#cbd5e1',
        lineHeight: 1.6
      }}>
        <strong style={{ color: '#e6eef8' }}>🧮 Formula:</strong> Čas obnove se izračuna po formuli: <code style={{ background: 'rgba(0, 0, 0, 0.3)', padding: '2px 6px', borderRadius: 4, color: '#a78bfa' }}>t = -ln(R) / (ACH/60)</code>, kjer je <strong>R</strong> delež preostalih delcev (0.1 za 90%, 0.01 za 99%) in <strong>ACH</strong> število izmenjav na uro. Večji kot je ACH, hitrejša je obnova!
      </div>
    </div>
  )
}

// LESSON 105 - Izmenjava zraka
function Lesson105VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'air-changes',
          name: '💨 Simulacija Izmenjav Zraka',
          description: 'Interaktivna primerjava izmenjav zraka po razredih A, B, C in D',
          component: <AirChangeRateSimulation />
        },
        {
          id: 'recovery-time',
          name: '🧪 Simulator Časa Obnove',
          description: 'Preskus z aerosolom za potrjevanje učinkovitosti prezračevanja (90% in 99% odstranitev)',
          component: <RecoveryTimeSimulator />
        }
      ]}
      accentColor="#0ea5e9"
      accentColorLight="#06b6d4"
      accentColorVeryLight="#7dd3fc"
    />
  )
}

// LESSON 106 - Mikrobiološki monitoring
function Lesson106VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'monitoring-methods',
          name: '🧫 Metode Spremljanja (razredi A–D)',
          description: 'Simulacija aktivnega vzorčenja zraka, sedimentacijskih plošč, odtisov in brisov z mejami skladnosti po razredih',
          component: <MonitoringMethodsSimulator />
        },
        {
          id: 'microbe-growth',
          name: '🦠 Rast Mikrobov',
          description: 'Animirana vizualizacija rasti mikroorganizmov',
          component: <MicrobeGrowth />
        }
      ]}
      accentColor="#ec4899"
      accentColorLight="#f43f5e"
      accentColorVeryLight="#fbcfe8"
    />
  )
}

// LESSON 107 - Čiščenje in razkuževanje
function Lesson107VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'cleaning-disinfection',
          name: '🧼 Simulator Čiščenja in Razkuževanja',
          description: 'Interaktivna simulacija fizikalnega/kemijskega čiščenja, razkuževanja in pravilnih/nepravilnih postopkov',
          component: <CleaningDisinfectionSimulator />
        },
        {
          id: 'disinfection',
          name: '🔄 Cikel Razkuževanja',
          description: 'Korak-po-korak proces čiščenja in razkuževanja',
          component: <DisinfectionCycle />
        }
      ]}
      accentColor="#10b981"
      accentColorLight="#059669"
      accentColorVeryLight="#6ee7b7"
    />
  )
}

// LESSON 108 - Osebna higiena
function Lesson108VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'personnel',
          name: '👤 Obnašanje Osebja',
          description: 'Pravilni in nepravilni postopki osebne higiene',
          component: <PersonnelBehavior />
        },
        {
          id: 'gowning-control',
          name: '🎯 Kontrola Pravilnosti Oblačenja',
          description: 'Vizualna kontrola, dokumentiranje, mikrobiološko vzorčenje, video analiza in periodično usposabljanje',
          component: <GowningControlSimulator />
        }
      ]}
      accentColor="#8b5cf6"
      accentColorLight="#7c3aed"
      accentColorVeryLight="#c4b5fd"
    />
  )
}

// LESSON 109 - Kvalifikacija in validacija
function Lesson109VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'dq-simulator',
          name: '📋 Design Qualification (DQ) Simulator',
          description: '3D vizualizacija in interaktivni koraki DQ procesa: zahteve, specifikacije, primernost, kritični parametri in dokumentacija',
          component: <DesignQualificationSimulator />
        },
        {
          id: 'iq-simulator',
          name: '🏗️ Installation Qualification (IQ) Simulator',
          description: '3D vizualizacija namestitve z 6 moduli: namestitev, dokumentacija, kalibracija, materiali, varnost in usposabljanje',
          component: <InstallationQualificationSimulator />
        },
        {
          id: 'oq-simulator',
          name: '⚙️ Operational Qualification (OQ) Simulator',
          description: '3D operativno testiranje s 5 moduli: funkcije, območje uporabe, alarmi, nenormalni pogoji in dokumentacija',
          component: <OperationalQualificationSimulator />
        },
        {
          id: 'pq-simulator',
          name: '🏭 Performance Qualification (PQ) Simulator',
          description: '3D proizvodna linija s 5 fazami: proizvodni pogoji, pravi materiali, daljše obdobje, konsistentnost in zmogljivost sistema',
          component: <PerformanceQualificationSimulator />
        },
         {
           id: 'media-fill',
           name: '🧪 Media Fill Validation Simulator',
           description: '3D aseptični proces s 5 sekcijami: simulacija z gojiščem, zaporedni testi, kontaminacija <0.1%, worst-case pogoji in kritični koraki',
           component: <MediaFillValidationSimulator />
         },
        {
          id: 'cleaning-validation',
          name: '🧼 Validacija Čiščenja',
          description: '5 modulov: odstranitev ostankov, sprejemljive meje, analitske metode, worst-case testiranje in časovni intervali',
          component: <CleaningValidationSimulator />
        },
        {
          id: 'amv-simulator',
          name: '🧪 Validacija Analitskih Metod (AMV)',
          description: 'Specifičnost, točnost/natančnost, linearnost/območje, LOD/LOQ in robustnost/ponovljivost z interaktivnimi metrikami',
          component: <AnalyticalMethodValidationSimulator />
        },
        {
          id: 'validation',
          name: '✅ Faze Validacije',
          description: 'DQ, IQ, OQ, PQ faze kvalifikacije',
          component: <ValidationPhases />
        }
      ]}
      accentColor="#06b6d4"
      accentColorLight="#0284c7"
      accentColorVeryLight="#67e8f9"
    />
  )
}

// LESSON 110 - Nadzor materialov
function Lesson110VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'traceability',
          name: '📦 Sledljivost Materialov',
          description: 'Tok materialov skozi sistem s sledljivostjo',
          component: <TraceabilityFlow />
        },
        {
          id: 'cleaning-validation-pro',
          name: '🧼 Validacija Čiščenja PRO',
          description: 'Napredna interaktivna simulacija CIP: ostanki, MACO, validacija metod, worst-case, časovni intervali',
          component: <CleaningValidationProSimulator />
        }
      ]}
      accentColor="#f59e0b"
      accentColorLight="#d97706"
      accentColorVeryLight="#fbbf24"
    />
  )
}

// LESSON 111 - Vizualni pregled pretoka zraka (neinteraktivno)
function AirflowShowcase() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [scene, setScene] = useState(0)
  const [playing, setPlaying] = useState(true)
  const prefersReducedMotion = typeof window !== 'undefined' && window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches

  const scenes = [
    {
      title: 'HEPA in laminarni tok',
      description: 'Zrak skozi HEPA filter enakomerno pada proti delovni površini — cilj je minimalno mešanje in stabilen, navpičen tok.',
      palette: { bg: '#0b1220', line: '#60a5fa', accent: '#93c5fd' }
    },
    {
      title: 'Laminarno vs. turbulentno',
      description: 'Primerjava: levo laminarne, vzporedne tokovne linije; desno vrtinci in nepredvidljive poti pri turbulenci.',
      palette: { bg: '#0b1220', line: '#34d399', accent: '#86efac' }
    },
    {
      title: 'Vpliv ovir in opreme',
      description: 'Mize, stojala in operaterji povzročijo lokalne vrtince in recirkulacije — načrtujte postavitev, da ohranite tok.',
      palette: { bg: '#0b1220', line: '#f59e0b', accent: '#fbbf24' }
    },
    {
      title: 'Recovery po odprtju vrat',
      description: 'Po motnji se delci povišajo; recovery je čas do povrnitve na osnovno raven čistosti.',
      palette: { bg: '#0b1220', line: '#f472b6', accent: '#f9a8d4' }
    },
    {
      title: 'Dimni test – dobre prakse',
      description: 'Uporabite enakomeren vir dima, sledite smerem toka, posnemite, označite kritične točke in ukrepajte.',
      palette: { bg: '#0b1220', line: '#a78bfa', accent: '#c4b5fd' }
    },
    {
      title: 'Vzdrževanje in nadzor',
      description: 'Redni pregledi HEPA, preskusi puščanj, tlakov in pretokov ohranjajo zanesljivost sistema.',
      palette: { bg: '#0b1220', line: '#22c55e', accent: '#86efac' }
    }
  ]

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')!
    let raf = 0
    let t = 0
    const draw = () => {
      const w = canvas.width
      const h = canvas.height
      const s = scenes[scene]
      // background
      ctx.fillStyle = s.palette.bg
      ctx.fillRect(0,0,w,h)

      // header band
      ctx.fillStyle = 'rgba(255,255,255,0.06)'
      ctx.fillRect(0,0,w,28)
      ctx.fillStyle = '#e2e8f0'
      ctx.font = 'bold 12px Inter, system-ui, sans-serif'
      ctx.fillText(`${scene+1} / ${scenes.length} — ${s.title}`, 10, 18)

      // airflow lines
      const L = prefersReducedMotion ? 24 : 48
      for (let i=0;i<L;i++){
        const x0 = (i % 12) * (w/12) + 10
        const phase = prefersReducedMotion ? 0 : (t*0.8 + i*0.3)
        let y = 36
        ctx.strokeStyle = s.palette.line
        ctx.lineWidth = 1
        ctx.beginPath()
        ctx.moveTo(x0, y)
        const segments = 10
        for (let k=1;k<=segments;k++){
          const yy = 36 + (h-56) * (k/segments)
          let xx = x0
          // simple scene-specific modulation
          if (scene===1){ // turbulence on right half
            const amt = (x0 > w/2 ? 10 : 2)
            xx += Math.sin(phase + k)*amt
          } else if (scene===2){ // obstacles — add deflection bands
            const band = Math.floor(k/3)
            xx += Math.sin(phase + band)*6
          } else if (scene===3){ // recovery — decay of disturbance over depth
            const decay = Math.exp(-k/segments * 2)
            xx += Math.sin(phase)*10*decay
          } else if (scene===4){ // smoke ribbons
            xx += Math.sin(phase + k*0.6)*4
          }
          ctx.lineTo(xx, yy)
        }
        ctx.stroke()
      }

      // subtle accents area (e.g., HEPA panel)
      ctx.fillStyle = scenes[scene].palette.accent + '33'
      ctx.fillRect(0,28,w,6)

      if (!prefersReducedMotion && playing) t += 0.04
      raf = requestAnimationFrame(draw)
    }
    draw()
    return () => cancelAnimationFrame(raf)
  }, [scene, playing])

  // auto-advance scenes if playing
  useEffect(() => {
    if (!playing) return
    const id = setInterval(() => {
      setScene((s)=> (s+1) % scenes.length)
    }, 8000)
    return () => clearInterval(id)
  }, [playing])

  return (
    <div style={{ display:'grid', gridTemplateColumns:'minmax(340px, 520px) 1fr', gap:16, padding:16, background:'rgba(34,197,94,0.06)', border:'1px solid rgba(34,197,94,0.25)', borderRadius:12 }}>
      <div>
        <canvas ref={canvasRef} width={520} height={300} style={{ width:'100%', height:'auto', background:'#0b1220', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }} />
        <div style={{ display:'flex', gap:8, marginTop:10 }}>
          <button className="btn-ghost" onClick={()=>setScene((s)=> (s-1+scenes.length)%scenes.length)}>◀︎ Nazaj</button>
          <button className="btn-primary" onClick={()=>setPlaying(p=>!p)}>{playing ? '⏸︎ Premor' : '▶︎ Predvajaj'}</button>
          <button className="btn-ghost" onClick={()=>setScene((s)=> (s+1)%scenes.length)}>Naprej ▶︎</button>
        </div>
      </div>
      <div style={{ display:'grid', gap:12 }}>
        <div style={{ color:'#e6eef8', fontWeight:800, fontSize:18 }}>{scenes[scene].title}</div>
        <div style={{ color:'#cbd5e1', fontSize:14, lineHeight:1.5 }}>{scenes[scene].description}</div>
        <div style={{ marginTop:6, background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12, color:'#94a3b8', fontSize:12 }}>
          Opomba: Vsebina je neinteraktivna in namenjena pasivnemu ogledu. Za uporabnike z zmanjšanimi animacijami se prikaz omeji na statične kompozicije.
        </div>
      </div>
    </div>
  )
}

// Interactive 3D airflow simulator with particles and obstacles
function Airflow3DRealisticSimulator() {
  const mountRef = useRef<HTMLDivElement>(null)
  const [scenario, setScenario] = useState<'laminar'|'obstacle'|'door-open'>('laminar')
  const [particleCount, setParticleCount] = useState(6000)
  const [playing, setPlaying] = useState(true)
  const [usePrecomputed, setUsePrecomputed] = useState(true)
  const [turbulence, setTurbulence] = useState(0.6)
  const [staticPerson, setStaticPerson] = useState(true)
  const [movingPerson, setMovingPerson] = useState(true)
  const [movingSpeed, setMovingSpeed] = useState(0.35)

  // precomputed vector field grid (CFD-like feel)
  const gridRef = useRef<{nx:number,ny:number,nz:number, vx:Float32Array, vy:Float32Array, vz:Float32Array} | null>(null)
  const roomBounds = { x:[-2,2], y:[0,3], z:[-1.5,1.5] }

  function buildGrid(nx=24, ny=16, nz=18) {
    const vx = new Float32Array(nx*ny*nz)
    const vy = new Float32Array(nx*ny*nz)
    const vz = new Float32Array(nx*ny*nz)
    function idx(i:number,j:number,k:number){ return i + nx*(j + ny*k) }
    for (let k=0;k<nz;k++){
      const z = roomBounds.z[0] + (k/(nz-1))*(roomBounds.z[1]-roomBounds.z[0])
      for (let j=0;j<ny;j++){
        const y = roomBounds.y[0] + (j/(ny-1))*(roomBounds.y[1]-roomBounds.y[0])
        for (let i=0;i<nx;i++){
          const x = roomBounds.x[0] + (i/(nx-1))*(roomBounds.x[1]-roomBounds.x[0])
          // base laminar downward
          let Vx = 0, Vy = -1.1, Vz = 0
          // gentle coherent noise to break uniformity
          const n = Math.sin(x*1.5)*Math.cos(z*1.1)
          Vx += turbulence*0.12*n
          Vz += turbulence*0.1*Math.cos(x*1.2)
          // scenario contributions
          if (scenario==='obstacle'){
            // deflection around central obstacle
            const dx=x-0.3, dy=y-0.45, dz=z-0
            const r2=dx*dx+dy*dy+dz*dz
            if (r2<0.8){ const inv=1/Math.max(0.12,r2); Vx += dx*inv*0.45; Vy += dy*inv*0.2; Vz += dz*inv*0.45 }
          } else if (scenario==='door-open'){
            // lateral inflow near left wall and mid-height
            const gate = Math.max(0, 1 - Math.abs(y-1.8)/0.9)
            const nearDoor = 1 - Math.min(1, (x+2)/0.6)
            Vx += 1.0 * gate * nearDoor
          }
          // boundary layer damping near floor/ceil
          const floorDamp = Math.max(0.35, (y-0.2))
          Vy *= Math.max(0.35, Math.min(1, floorDamp))
          // static person plume (optional) — mild upward, local recirc
          if (staticPerson){
            const px=0.0, py=0.0+1.2, pz=0.2
            const dx=x-px, dy=y-py, dz=z-pz
            const r2=dx*dx+dy*dy+dz*dz
            if (r2<0.7){ const inv=1/Math.max(0.1,r2); Vy += 0.8*inv; Vx += dx*inv*0.15; Vz += dz*inv*0.15 }
          }
          const id=idx(i,j,k)
          vx[id]=Vx; vy[id]=Vy; vz[id]=Vz
        }
      }
    }
    gridRef.current = { nx, ny, nz, vx, vy, vz }
  }

  function sampleField(x:number,y:number,z:number){
    const grid = gridRef.current
    if (!usePrecomputed || !grid){
      // fallback simple field (procedural)
      let vx=0, vy=-1.0, vz=0
      const n = Math.sin(x*1.5)*Math.cos(z*1.2)
      vx += turbulence*0.18*n
      vz += turbulence*0.16*Math.cos(x*1.3)
      if (scenario==='obstacle'){
        const dx=x-0.3, dy=y-0.45, dz=z
        const r2=dx*dx+dy*dy+dz*dz
        if (r2<0.6){ const inv=1/Math.max(0.08,r2); vx += dx*inv*0.35; vy += dy*inv*0.15; vz += dz*inv*0.35 }
      }
      if (scenario==='door-open'){
        const gate = Math.max(0, 1 - Math.abs(y-1.8)/0.9)
        vx += 1.2 * gate * (1 - Math.min(1, (x+2)/0.6))
      }
      return {x:vx,y:vy,z:vz}
    }
    const {nx,ny,nz,vx,vy,vz} = grid
    const fx = (x - roomBounds.x[0]) / (roomBounds.x[1]-roomBounds.x[0]) * (nx-1)
    const fy = (y - roomBounds.y[0]) / (roomBounds.y[1]-roomBounds.y[0]) * (ny-1)
    const fz = (z - roomBounds.z[0]) / (roomBounds.z[1]-roomBounds.z[0]) * (nz-1)
    const i0=Math.max(0,Math.min(nx-2, Math.floor(fx))), j0=Math.max(0,Math.min(ny-2, Math.floor(fy))), k0=Math.max(0,Math.min(nz-2, Math.floor(fz)))
    const tx=fx-i0, ty=fy-j0, tz=fz-k0
    const idx=(i:number,j:number,k:number)=> i + nx*(j + ny*k)
    function tri(a000:number,a100:number,a010:number,a110:number,a001:number,a101:number,a011:number,a111:number){
      const a00=a000*(1-tx)+a100*tx
      const a01=a001*(1-tx)+a101*tx
      const a10=a010*(1-tx)+a110*tx
      const a11=a011*(1-tx)+a111*tx
      const a0=a00*(1-ty)+a10*ty
      const a1=a01*(1-ty)+a11*ty
      return a0*(1-tz)+a1*tz
    }
    const i1=i0+1,j1=j0+1,k1=k0+1
    const id000=idx(i0,j0,k0), id100=idx(i1,j0,k0), id010=idx(i0,j1,k0), id110=idx(i1,j1,k0)
    const id001=idx(i0,j0,k1), id101=idx(i1,j0,k1), id011=idx(i0,j1,k1), id111=idx(i1,j1,k1)
    const svx = tri(vx[id000],vx[id100],vx[id010],vx[id110],vx[id001],vx[id101],vx[id011],vx[id111])
    const svy = tri(vy[id000],vy[id100],vy[id010],vy[id110],vy[id001],vy[id101],vy[id011],vy[id111])
    const svz = tri(vz[id000],vz[id100],vz[id010],vz[id110],vz[id001],vz[id101],vz[id011],vz[id111])
    return { x:svx, y:svy, z:svz }
  }

  useEffect(() => {
    if (usePrecomputed) buildGrid()
  }, [scenario, usePrecomputed, turbulence, staticPerson])

  useEffect(() => {
    const mount = mountRef.current
    if (!mount) return
    // Three.js setup (loosened typing for reliability across versions)
    const THREE_NS: any = (THREE as any)
    const scene: any = new THREE_NS.Scene()
    const camera: any = new THREE_NS.PerspectiveCamera(55, mount.clientWidth / 360, 0.1, 100)
    camera.position.set(0, 2, 5)
    camera.lookAt(0, 1.5, 0)
    const renderer: any = new THREE_NS.WebGLRenderer({ antialias: true, alpha: true })
    renderer.setSize(mount.clientWidth, 360)
    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio || 1))
    mount.appendChild(renderer.domElement)

    // Room box (wireframe) and HEPA panel at top
    const room = new THREE_NS.Mesh(
      new THREE_NS.BoxGeometry(4, 3, 3),
      new THREE_NS.MeshBasicMaterial({ color: 0x94a3b8, wireframe: true, opacity: 0.3, transparent: true })
    )
    room.position.set(0, 1.5, 0)
    scene.add(room)

    const hepa = new THREE_NS.Mesh(
      new THREE_NS.PlaneGeometry(3.2, 2.2, 1, 1),
      new THREE_NS.MeshBasicMaterial({ color: 0x60a5fa, transparent: true, opacity: 0.25 })
    )
    hepa.rotation.x = -Math.PI/2
    hepa.position.set(0, 3, 0)
    scene.add(hepa)

    // Optional obstacle and door opening plane
    const obstacle = new THREE_NS.Mesh(
      new THREE_NS.BoxGeometry(0.8, 0.9, 0.6),
      new THREE_NS.MeshBasicMaterial({ color: 0xf59e0b, transparent: true, opacity: 0.6 })
    )
    obstacle.position.set(0.3, 0.45, 0)

    const door = new THREE_NS.Mesh(
      new THREE_NS.PlaneGeometry(2.6, 2.6),
      new THREE_NS.MeshBasicMaterial({ color: 0x22c55e, transparent: true, opacity: 0.25 })
    )
    door.position.set(-2, 1.5, 0)
    door.rotation.y = Math.PI/2

    // People models
    const personMaterial = new THREE_NS.MeshBasicMaterial({ color: 0xeab308, transparent:true, opacity:0.6 })
    const personStatic = new THREE_NS.Group()
    const bodyS = new THREE_NS.Mesh(new THREE_NS.CylinderGeometry(0.15,0.15,1.1,16), personMaterial)
    const headS = new THREE_NS.Mesh(new THREE_NS.SphereGeometry(0.18,16,16), personMaterial)
    bodyS.position.set(0,0.55,0); headS.position.set(0,1.2,0)
    personStatic.add(bodyS); personStatic.add(headS)
    personStatic.position.set(0.0,0.0,0.2)

    const personMoving = new THREE_NS.Group()
    const bodyM = new THREE_NS.Mesh(new THREE_NS.CylinderGeometry(0.15,0.15,1.1,16), new THREE_NS.MeshBasicMaterial({ color:0x38bdf8, transparent:true, opacity:0.6 }))
    const headM = new THREE_NS.Mesh(new THREE_NS.SphereGeometry(0.18,16,16), new THREE_NS.MeshBasicMaterial({ color:0x38bdf8, transparent:true, opacity:0.6 }))
    bodyM.position.set(0,0.55,0); headM.position.set(0,1.2,0); personMoving.add(bodyM); personMoving.add(headM)

    // Particles (instanced points)
    const geometry = new THREE_NS.BufferGeometry()
    const positions = new Float32Array(particleCount * 3)
    const seed = new Float32Array(particleCount * 3)
    for (let i = 0; i < particleCount; i++) {
      // start near HEPA (top), spread across panel
      positions[i*3+0] = (Math.random()-0.5) * 3.0
      positions[i*3+1] = 2.8 + Math.random()*0.15
      positions[i*3+2] = (Math.random()-0.5) * 2.0
      seed[i*3+0] = Math.random()*100
      seed[i*3+1] = Math.random()*100
      seed[i*3+2] = Math.random()*100
    }
    geometry.setAttribute('position', new THREE_NS.BufferAttribute(positions, 3))
    geometry.setAttribute('seed', new THREE_NS.BufferAttribute(seed, 3))
    const material = new THREE_NS.PointsMaterial({ color: 0xbfe3ff, size: 0.028, sizeAttenuation: true, transparent: true, opacity: 0.85, depthWrite:false, blending: (THREE_NS.AdditiveBlending||2) })
    const particles = new THREE_NS.Points(geometry, material)
    scene.add(particles)

    // Lighting for slight depth feeling
    const light = new THREE_NS.AmbientLight(0xffffff, 0.6); scene.add(light)
    const dLight = new THREE_NS.DirectionalLight(0xffffff, 0.5); dLight.position.set(2,3,2); scene.add(dLight)

    // Add scenario-specific meshes
    if (scenario==='obstacle') scene.add(obstacle)
    if (scenario==='door-open') scene.add(door)
    if (staticPerson) scene.add(personStatic)
    if (movingPerson) scene.add(personMoving)

    // Velocity field sampling — precomputed or procedural
    const tmp = new THREE_NS.Vector3()
    function velocityAt(x:number,y:number,z:number,time:number) {
      const base = sampleField(x,y,z)
      let vx=base.x, vy=base.y, vz=base.z
      // moving person disturbance (dynamic)
      if (movingPerson){
        const radius=1.0, cx=0.0, cz=0.0
        const ang = time * movingSpeed
        const px = cx + Math.cos(ang)*radius
        const pz = cz + Math.sin(ang)*radius
        const py = 1.2
        personMoving.position.set(px,0,pz)
        const dx=x-px, dy=y-py, dz=z-pz
        const r2=dx*dx+dy*dy+dz*dz
        if (r2<0.9){ const inv=1/Math.max(0.12,r2); vy += 1.0*inv; vx += dx*inv*0.25; vz += dz*inv*0.25 }
      }
      tmp.set(vx,vy,vz)
      return tmp
    }

    let t = 0
    let raf = 0
    const animate = () => {
      if (playing) t += 0.016
      const arr = (particles.geometry as any).attributes.position.array as Float32Array
      for (let i=0;i<particleCount;i++){
        let x = arr[i*3+0]
        let y = arr[i*3+1]
        let z = arr[i*3+2]
        const v = velocityAt(x,y,z,t)
        // integrate
        x += v.x * 0.012
        y += v.y * 0.012
        z += v.z * 0.012
        // wrap/reset when reaching bottom or escaping
        if (y < 0.2 || Math.abs(x) > 2 || Math.abs(z) > 1.5){
          x = (Math.random()-0.5) * 3.0
          y = 2.8 + Math.random()*0.15
          z = (Math.random()-0.5) * 2.0
        }
        arr[i*3+0] = x; arr[i*3+1] = y; arr[i*3+2] = z
      }
      ;(particles.geometry as any).attributes.position.needsUpdate = true
      renderer.render(scene, camera)
      raf = requestAnimationFrame(animate)
    }
    animate()

    const onResize = () => {
      if (!mount) return
      const w = mount.clientWidth
      camera.aspect = w / 360
      camera.updateProjectionMatrix()
      renderer.setSize(w, 360)
    }
    window.addEventListener('resize', onResize)

    return () => {
      cancelAnimationFrame(raf)
      window.removeEventListener('resize', onResize)
      renderer.dispose()
      mount.removeChild(renderer.domElement)
    }
  }, [scenario, particleCount, playing])

  return (
    <div style={{ display:'grid', gridTemplateColumns:'minmax(360px, 560px) 1fr', gap:16, padding:16, background:'rgba(34,197,94,0.06)', border:'1px solid rgba(34,197,94,0.25)', borderRadius:12 }}>
      <div ref={mountRef} style={{ width:'100%', height:360, background:'linear-gradient(180deg,#0b1220,#0f172a)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }} />
      <div style={{ display:'grid', gap:12 }}>
        <div style={{ color:'#e6eef8', fontWeight:800, fontSize:18 }}>Interaktivna 3D simulacija pretoka</div>
        <div style={{ color:'#94a3b8', fontSize:13 }}>Scenarij in parametri vplivajo na delce (vizualiziran “dim”).</div>
        <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(180px,1fr))', gap:12 }}>
          <label>Scenarij
            <select value={scenario} onChange={e=>setScenario(e.target.value as any)}>
              <option value="laminar">Laminarni tok</option>
              <option value="obstacle">Ovire v prostoru</option>
              <option value="door-open">Odpiranje vrat</option>
            </select>
          </label>
          <label>CFD-like polje
            <select value={usePrecomputed? 'on':'off'} onChange={e=>setUsePrecomputed(e.target.value==='on')}>
              <option value="on">Vklopljeno</option>
              <option value="off">Izklopljeno</option>
            </select>
          </label>
          <label>Število delcev
            <input type="range" min={1000} max={12000} step={500} value={particleCount} onChange={e=>setParticleCount(Number(e.target.value))} />
            <div style={{color:'#e6eef8',fontWeight:700}}>{particleCount}</div>
          </label>
          <label>Turbulenca
            <input type="range" min={0} max={1} step={0.05} value={turbulence} onChange={e=>setTurbulence(Number(e.target.value))} />
          </label>
        </div>
        <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(180px,1fr))', gap:12 }}>
          <label>Statična oseba
            <select value={staticPerson? 'on':'off'} onChange={e=>setStaticPerson(e.target.value==='on')}>
              <option value="on">Prisotna</option>
              <option value="off">Ni prisotna</option>
            </select>
          </label>
          <label>Premikajoča oseba
            <select value={movingPerson? 'on':'off'} onChange={e=>setMovingPerson(e.target.value==='on')}>
              <option value="on">Prisotna</option>
              <option value="off">Ni prisotna</option>
            </select>
          </label>
          <label>Hitrost gibanja
            <input type="range" min={0} max={1} step={0.05} value={movingSpeed} onChange={e=>setMovingSpeed(Number(e.target.value))} />
          </label>
        </div>
        <div style={{ display:'flex', gap:8 }}>
          <button className="btn-primary" onClick={()=>setPlaying(p=>!p)}>{playing ? '⏸︎ Premor' : '▶︎ Predvajaj'}</button>
        </div>
        <div style={{ marginTop:6, background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12, color:'#94a3b8', fontSize:12 }}>
          Opomba: Polje hitrosti je lahko predizračunano (CFD-like) ali proceduralno. Osebe (statična in premikajoča) dodajo lokalne motnje in plume.
        </div>
      </div>
    </div>
  )
}

// Airflow Scenario Lab — parameterized 2D simulator (supply/exhaust, filter clogging, occupancy, layout; laminar/turbulent)
function AirflowScenarioLab() {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [mode, setMode] = useState<'laminar'|'turbulent'>('laminar')
  const [supply, setSupply] = useState(1200) // m3/h
  const [exhaust, setExhaust] = useState(1200) // m3/h
  const [filterClog, setFilterClog] = useState(0) // %
  const [occupancy, setOccupancy] = useState(2) // persons
  const [layout, setLayout] = useState<'clean-bench-left'|'table-center'|'dense-stands'>('table-center')
  const room = { width: 6, depth: 4, height: 3 } // meters

  // Derived metrics
  const effectiveSupply = Math.max(0, supply * (1 - filterClog/100))
  const ach = (effectiveSupply / (room.width*room.depth*room.height)) // per hour units implicit
  const pressurePa = (effectiveSupply - exhaust) * 0.12 // very rough: Pa per m3/h delta
  const crowdFactor = Math.min(1.8, 1 + (occupancy-1)*0.15)
  const turbulenceFactor = (mode==='turbulent' ? 1.0 : 0.35) * (0.7 + 0.3*(filterClog/100)) * crowdFactor

  // Obstacles from layout
  type Obstacle = { x:number, y:number, w:number, h:number }
  const obstacles: Obstacle[] = (() => {
    if (layout==='clean-bench-left') return [ { x:0.6, y:1.2, w:1.2, h:0.8 } ]
    if (layout==='table-center') return [ { x:2.6, y:1.8, w:1.2, h:1.0 } ]
    return [ { x:1.0, y:1.0, w:0.8, h:0.8 }, { x:3.2, y:2.2, w:0.8, h:0.8 }, { x:4.5, y:1.4, w:0.7, h:0.7 } ]
  })()

  // Simple vector field and particle sim in 2D top-down (x,y => width, depth). Units meters.
  const pxPerM = 80 // scale
  const particlesRef = useRef<{x:number,y:number}[]>([])

  useEffect(() => {
    // init particles
    const P = 800
    particlesRef.current = Array.from({length:P},()=>({
      x: Math.random()*room.width,
      y: Math.random()*room.depth
    }))
  }, [mode, layout])

  function insideObstacle(x:number,y:number){
    return obstacles.some(o => (x>=o.x && x<=o.x+o.w && y>=o.y && y<=o.y+o.h))
  }

  function velocityAt(x:number,y:number,t:number){
    // Base flow: supply from top (y=0) to bottom (y=depth), proportional to supply-exhaust balance
    const baseVy = (effectiveSupply / 1500) * 0.8 // calibration constant for visual speed
    let vx = 0
    let vy = baseVy
    // Imbalance creates lateral drift
    const imbalance = (effectiveSupply - exhaust) / Math.max(500, effectiveSupply + exhaust)
    vx += imbalance * 0.6
    // Obstacles cause deflection
    for (const o of obstacles){
      const cx = o.x + o.w/2, cy = o.y + o.h/2
      const dx = x - cx, dy = y - cy
      const r2 = dx*dx + dy*dy
      if (r2 < 0.6){
        const inv = 1/Math.max(0.05, r2)
        vx += dx*inv*0.3
        vy += dy*inv*0.3
      }
    }
    // Occupants as small plumes (randomized spots)
    const occSeeds = 5
    for (let i=0;i<Math.min(occupancy,occSeeds);i++){
      const cx = 1 + (i%3)*1.2; const cy = 1 + Math.floor(i/3)*1.2
      const dx = x-cx, dy=y-cy; const r2=dx*dx+dy*dy
      if (r2<0.5){ vy -= 0.2/(1+10*r2) } // upward plume countering base flow (top-down view proxy)
    }
    // Turbulence noise
    const noise = (Math.sin(x*2.3 + t*1.3) * Math.cos(y*1.7 - t*1.1))
    vx += turbulenceFactor * 0.25 * noise
    vy += turbulenceFactor * 0.2 * Math.sin(x*1.1 - t*0.9)
    // Keep within bounds by gentle inward bias
    if (x<0.2) vx += 0.2; if (x>room.width-0.2) vx -= 0.2
    if (y<0.2) vy += 0.15; if (y>room.depth-0.2) vy -= 0.15
    // Slow within obstacles
    if (insideObstacle(x,y)){ vx*= -0.2; vy*= -0.2 }
    return { vx, vy }
  }

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    const ctx = canvas.getContext('2d')!
    let raf = 0
    let t = 0
    const draw = () => {
      const w = Math.floor(room.width*pxPerM), h = Math.floor(room.depth*pxPerM)
      if (canvas.width!==w || canvas.height!==h) { canvas.width = w; canvas.height = h }
      // background
      ctx.fillStyle = '#0b1220'; ctx.fillRect(0,0,w,h)
      // grid field arrows (sparse)
      ctx.strokeStyle = 'rgba(148,163,184,0.35)'
      for (let gy=20; gy<h; gy+=40){
        for (let gx=20; gx<w; gx+=40){
          const x = gx/pxPerM, y = gy/pxPerM
          const {vx,vy} = velocityAt(x,y,t)
          const len = Math.min(20, Math.hypot(vx,vy)*18)
          const ang = Math.atan2(vy,vx)
          ctx.beginPath(); ctx.moveTo(gx,gy)
          ctx.lineTo(gx + Math.cos(ang)*len, gy + Math.sin(ang)*len)
          ctx.stroke()
        }
      }
      // obstacles
      ctx.fillStyle = 'rgba(245,158,11,0.35)'
      obstacles.forEach(o => {
        ctx.fillRect(o.x*pxPerM, o.y*pxPerM, o.w*pxPerM, o.h*pxPerM)
      })
      // particles
      const P = particlesRef.current
      ctx.fillStyle = 'rgba(96,165,250,0.9)'
      for (let i=0;i<P.length;i++){
        let {x,y} = P[i]
        const v = velocityAt(x,y,t)
        x += v.vx*0.02; y += v.vy*0.02
        if (x<0) x=0; if (x>room.width) x=room.width
        if (y<0) y=0; if (y>room.depth) y=room.depth
        if (insideObstacle(x,y)) { x = x - v.vx*0.06; y = y - v.vy*0.06 }
        P[i].x = x; P[i].y = y
        ctx.fillRect(Math.floor(x*pxPerM), Math.floor(y*pxPerM), 2, 2)
      }
      t += 0.016
      raf = requestAnimationFrame(draw)
    }
    draw()
    return () => cancelAnimationFrame(raf)
  }, [mode, effectiveSupply, exhaust, filterClog, occupancy, layout])

  // Simple qualitative risk indices
  const uniformity = Math.max(0, 1 - turbulenceFactor*0.6 - obstacles.length*0.08)
  const stagnationRisk = Math.min(1, 0.2 + (obstacles.length*0.15) + (1-uniformity)*0.5)
  const overpressure = pressurePa > 3

  return (
    <div style={{ display:'grid', gridTemplateColumns:'minmax(360px, 520px) 1fr', gap:16, padding:16, background:'rgba(2,132,199,0.06)', border:'1px solid rgba(2,132,199,0.25)', borderRadius:12 }}>
      <div>
        <canvas ref={canvasRef} style={{ width:'100%', height:'auto', background:'#0b1220', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)' }} />
      </div>
      <div style={{ display:'grid', gap:12 }}>
        <div style={{ color:'#e6eef8', fontWeight:800, fontSize:18 }}>Airflow Scenario Lab</div>
        <div style={{ color:'#94a3b8', fontSize:13 }}>Preizkusite napačne postavitve in pogoje pri laminarnem ali turbulentnem toku.</div>

        <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(200px,1fr))', gap:12 }}>
          <label>Način toka
            <select value={mode} onChange={e=>setMode(e.target.value as any)}>
              <option value="laminar">Laminarni</option>
              <option value="turbulent">Turbulentni</option>
            </select>
          </label>
          <label>Dovod (m³/h)
            <input type="range" min={200} max={5000} step={100} value={supply} onChange={e=>setSupply(Number(e.target.value))} />
            <div style={{color:'#e6eef8',fontWeight:700}}>{supply}</div>
          </label>
          <label>Odvod (m³/h)
            <input type="range" min={200} max={5000} step={100} value={exhaust} onChange={e=>setExhaust(Number(e.target.value))} />
            <div style={{color:'#e6eef8',fontWeight:700}}>{exhaust}</div>
          </label>
          <label>Zamašenost filtra (%)
            <input type="range" min={0} max={80} step={5} value={filterClog} onChange={e=>setFilterClog(Number(e.target.value))} />
            <div style={{color:'#e6eef8',fontWeight:700}}>{filterClog}%</div>
          </label>
          <label>Število oseb
            <input type="number" min={0} max={12} value={occupancy} onChange={e=>setOccupancy(Number(e.target.value))} />
          </label>
          <label>Postavitev opreme
            <select value={layout} onChange={e=>setLayout(e.target.value as any)}>
              <option value="clean-bench-left">Clean bench levo</option>
              <option value="table-center">Miza na sredini</option>
              <option value="dense-stands">Gosta stojala</option>
            </select>
          </label>
        </div>

        <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(160px,1fr))', gap:12 }}>
          <div className="metric"><div className="metric-label">ACH (1/h)</div><div className="metric-value">{ach.toFixed(1)}</div></div>
          <div className="metric"><div className="metric-label">ΔP (Pa)</div><div className="metric-value">{pressurePa.toFixed(1)}</div></div>
          <div className="metric"><div className="metric-label">Uniformnost</div><div className="metric-value">{Math.round(uniformity*100)}%</div></div>
          <div className="metric"><div className="metric-label">Tveganje stagnacije</div><div className="metric-value">{Math.round(stagnationRisk*100)}%</div></div>
        </div>

        <div style={{ marginTop:6, background:'rgba(2,132,199,0.08)', border:'1px solid rgba(2,132,199,0.3)', borderRadius:10, padding:12, color:'#cbd5e1', fontSize:12 }}>
          {overpressure ? 'Namig: Previsok dovod proti odvodu (nadtlak) lahko vpliva na tok in izhode – preverite ΔP in enakomernost.' : 'Namig: Uravnotežite dovod in odvod ter zmanjšajte zamašenost za izboljšanje uniformnosti.'}
        </div>
      </div>
    </div>
  )
}

// Smoke Test Protocol — interactive 3D workflow (prep -> emit -> observe -> document -> analyze)
function SmokeTestProtocol3D() {
  const mountRef = useRef<HTMLDivElement>(null)
  const [step, setStep] = useState<1|2|3|4|5>(1)
  const [prepSecondsLeft, setPrepSecondsLeft] = useState(30*60)
  const [timescale, setTimescale] = useState(60) // 60x faster than real time by default
  const [playing, setPlaying] = useState(true)
  const [showVectors, setShowVectors] = useState(true)
  const [showStagnation, setShowStagnation] = useState(true)
  const [showVortices, setShowVortices] = useState(true)
  const [emitMode, setEmitMode] = useState<'preset'|'click'>('preset')
  const [editMode, setEditMode] = useState<'emitters'|'hvac'|'person'>('emitters')
  const [notes, setNotes] = useState('')
  const [recording, setRecording] = useState(false)
  const [isFullscreen, setIsFullscreen] = useState(false)
  const mediaRef = useRef<any>(null)
  const chunksRef = useRef<BlobPart[]>([])
  const selectedRef = useRef<{type:'supply'|'exhaust'|'obstacle'|'emitter'|'person'|'door', index?:number}|null>(null)

  type Emitter = { x:number, y:number, z:number, rate:number, label:string }
  const [emitters, setEmitters] = useState<Emitter[]>([])

  type Supply = { x:number, y:number, z:number, speed:number } // m/s (0..0.85)
  type Exhaust = { x:number, y:number, z:number, speed:number } // m/s (0..0.85)
  type Obstacle = { x:number, z:number, w:number, h:number, d:number }
  const [supplies, setSupplies] = useState<Supply[]>([
    { x: -1.0, y: 2.95, z: -0.8, speed: 0.35 },
    { x: 1.0, y: 2.95, z: 0.8, speed: 0.35 }
  ])
  const [exhausts, setExhausts] = useState<Exhaust[]>([
    { x: -1.6, y: 0.2, z: 0.0, speed: 0.35 },
    { x: 1.6, y: 0.2, z: 0.0, speed: 0.35 }
  ])
  const [obstacles, setObstacles] = useState<Obstacle[]>([
    { x: 0.3, z: 0.0, w: 0.9, h: 0.7, d: 0.7 }
  ])
  const [doorOpen, setDoorOpen] = useState(false)
  const [doorOpenFrac, setDoorOpenFrac] = useState(0.7) // 0..1 how wide the door opening is
  const [corridorFlow, setCorridorFlow] = useState(1.0) // intensity of flow through door
  const [personActive, setPersonActive] = useState(false)
  const [personPos, setPersonPos] = useState<{x:number,y:number,z:number}>({ x: 1.4, y: 1.0, z: 0 })
  // UDF strop (celoten strop kot laminarni dovod)
  const [udfCeiling, setUdfCeiling] = useState(false)
  const [udfSpeed, setUdfSpeed] = useState(0.45) // m/s
  const prevPersonPosRef = useRef<{x:number,y:number,z:number}>({ x: 1.4, y: 1.0, z: 0 })
  const personPathRef = useRef<Array<{x:number,y:number,z:number}>>([
    { x: 1.4, y: 1.0, z: 0 }, // start near right
    { x: 0.6, y: 1.0, z: 0.6 },
    { x: -0.4, y: 1.0, z: 0.4 },
    { x: -1.5, y: 1.0, z: 0.2 }, // go to door
  ])
  const personPathIndexRef = useRef(0)

  // Precomputed vector field grid for realism
  const gridRef = useRef<{nx:number,ny:number,nz:number, vx:Float32Array, vy:Float32Array, vz:Float32Array} | null>(null)
  const roomBounds = { x:[-2,2], y:[0,3], z:[-1.5,1.5] }

  function buildGrid(nx=26, ny=18, nz=20) {
    const vx = new Float32Array(nx*ny*nz)
    const vy = new Float32Array(nx*ny*nz)
    const vz = new Float32Array(nx*ny*nz)
    const idx=(i:number,j:number,k:number)=> i + nx*(j + ny*k)
    for (let k=0;k<nz;k++){
      const z = roomBounds.z[0] + (k/(nz-1))*(roomBounds.z[1]-roomBounds.z[0])
      for (let j=0;j<ny;j++){
        const y = roomBounds.y[0] + (j/(ny-1))*(roomBounds.y[1]-roomBounds.y[0])
        for (let i=0;i<nx;i++){
          const x = roomBounds.x[0] + (i/(nx-1))*(roomBounds.x[1]-roomBounds.x[0])
          // base laminar downward
          let Vx=0, Vy=-1.1, Vz=0
          // mild structured noise to mimic diffuser variability
          const n = Math.sin(x*1.3)*Math.cos(z*1.2)
          Vx += 0.1*n; Vz += 0.08*Math.cos(x*1.1)
          // obstacles: equipment at center
          const dx=x-0.3, dy=y-0.6, dz=z-0
          const r2=dx*dx+dy*dy+dz*dz
          if (r2<0.7){ const inv=1/Math.max(0.1,r2); Vx += dx*inv*0.4; Vy += dy*inv*0.18; Vz += dz*inv*0.4 }
          // door lateral inflow (left plane)
          const gate = Math.max(0, 1 - Math.abs(y-1.8)/0.9)
          Vx += 0.35 * gate * (1 - Math.min(1, (x+2)/0.6))
          // boundary damping near floor/ceil
          const floorDamp = Math.max(0.35, (y-0.2))
          Vy *= Math.max(0.35, Math.min(1, floorDamp))
          const id=idx(i,j,k)
          vx[id]=Vx; vy[id]=Vy; vz[id]=Vz
        }
      }
    }
    gridRef.current = { nx, ny, nz, vx, vy, vz }
  }

  function sampleField(x:number,y:number,z:number){
    const grid = gridRef.current
    if (!grid){ // default procedural if grid not ready
      const hvacActive = udfCeiling || supplies.length>0 || exhausts.length>0
      let vx=0, vy= hvacActive ? -0.6 : 0.0, vz=0
      const n = Math.sin(x*1.4)*Math.cos(z*1.2)
      if (hvacActive){ vx += 0.12*n; vz += 0.1*Math.cos(x*1.2) }
      // dynamic influences when grid not ready
      ;({vx,vy,vz} = applyDynamicInfluences(x,y,z,vx,vy,vz))
      return { x: vx, y: vy, z: vz }
    }
    const {nx,ny,nz,vx,vy,vz} = grid
    const fx = (x - roomBounds.x[0]) / (roomBounds.x[1]-roomBounds.x[0]) * (nx-1)
    const fy = (y - roomBounds.y[0]) / (roomBounds.y[1]-roomBounds.y[0]) * (ny-1)
    const fz = (z - roomBounds.z[0]) / (roomBounds.z[1]-roomBounds.z[0]) * (nz-1)
    const i0=Math.max(0,Math.min(nx-2, Math.floor(fx))), j0=Math.max(0,Math.min(ny-2, Math.floor(fy))), k0=Math.max(0,Math.min(nz-2, Math.floor(fz)))
    const tx=fx-i0, ty=fy-j0, tz=fz-k0
    const idx=(i:number,j:number,k:number)=> i + nx*(j + ny*k)
    const i1=i0+1,j1=j0+1,k1=k0+1
    function tri(a000:number,a100:number,a010:number,a110:number,a001:number,a101:number,a011:number,a111:number){
      const a00=a000*(1-tx)+a100*tx
      const a01=a001*(1-tx)+a101*tx
      const a10=a010*(1-tx)+a110*tx
      const a11=a011*(1-tx)+a111*tx
      const a0=a00*(1-ty)+a10*ty
      const a1=a01*(1-ty)+a11*ty
      return a0*(1-tz)+a1*tz
    }
    const id000=idx(i0,j0,k0), id100=idx(i1,j0,k0), id010=idx(i0,j1,k0), id110=idx(i1,j1,k0)
    const id001=idx(i0,j0,k1), id101=idx(i1,j0,k1), id011=idx(i0,j1,k1), id111=idx(i1,j1,k1)
    let svx = tri(vx[id000],vx[id100],vx[id010],vx[id110],vx[id001],vx[id101],vx[id011],vx[id111])
    let svy = tri(vy[id000],vy[id100],vy[id010],vy[id110],vy[id001],vy[id101],vy[id011],vy[id111])
    let svz = tri(vz[id000],vz[id100],vz[id010],vz[id110],vz[id001],vz[id101],vz[id011],vz[id111])
    const hvacActive = udfCeiling || supplies.length>0 || exhausts.length>0
    if (!hvacActive){ svx*=0.2; svy*=0.1; svz*=0.2 }
    ;({vx:svx,vy:svy,vz:svz} = applyDynamicInfluences(x,y,z,svx,svy,svz))
    return { x:svx, y:svy, z:svz }
  }

  // Add dynamic influences: supplies (jets), exhausts (suction), obstacles (deflection), door, and person
  function applyDynamicInfluences(x:number,y:number,z:number,vx:number,vy:number,vz:number){
    // UDF ceiling: uniform downward laminar flow across ENTIRE ceiling
    if (udfCeiling){
      const fac = Math.max(0, Math.min(1, udfSpeed/0.85))
      // Strong uniform downward component across entire room, slightly stronger near ceiling
      const heightFactor = Math.max(0.3, Math.exp(-((y-2.95)*(y-2.95))/1.0)) // decays slowly from ceiling
      vy += -2.2 * fac * heightFactor
      // Very slight outward horizontal spread (laminar diffuser characteristic)
      const centerDist = Math.sqrt(x*x + z*z)
      if (centerDist > 0.1) {
        vx += (x / centerDist) * 0.15 * fac * heightFactor
        vz += (z / centerDist) * 0.15 * fac * heightFactor
      }
    }
    // supplies: downward jet centered at (sx,sy,sz), Gaussian profile scaled by speed (0..0.85 m/s)
    for (const s of supplies){
      const dx = x - s.x, dz = z - s.z, dy = y - s.y
      const r2 = (dx*dx + dz*dz)/0.22 + (dy*dy)/0.35
      const g = Math.exp(-r2)
      const fac = Math.max(0, Math.min(1, s.speed/0.85))
      vy += -2.0 * g * fac
      // slight radial spreading (swirl-less laminar diffuser approx)
      vx += dx * g * 0.6 * fac
      vz += dz * g * 0.6 * fac
    }
    // exhausts: suction toward e.y (floor/walls)
    for (const e of exhausts){
      const dx = e.x - x, dz = e.z - z, dy = e.y - y
      const r2 = dx*dx + dz*dz + (y-e.y)*(y-e.y)
      const inv = 1/Math.max(0.08, r2)
      const fac = Math.max(0, Math.min(1, e.speed/0.85))
      vx += dx * inv * 0.9 * fac
      vy += dy * inv * 0.55 * fac
      vz += dz * inv * 0.9 * fac
    }
    // obstacles: deflect flow away (potential-like)
    for (const o of obstacles){
      const dx = x - o.x, dz = z - o.z
      const r2 = (dx*dx)/(o.w*o.w*0.7) + (dz*dz)/(o.d*o.d*0.7) + Math.max(0, (0.6 - y))
      if (r2<2){
        const inv = 1/Math.max(0.2, r2)
        vx += dx * inv * 0.5
        vy += (y-0.6) * inv * 0.2
        vz += dz * inv * 0.5
      }
    }
    // door influence (left wall opening)
    if (doorOpen){
      // opening centered at (-2,1,0), width based on doorOpenFrac
      const dx = x - (-2.0), dy = y - 1.0, dz = z - 0.0
      const halfW = 0.45 * Math.max(0.05, doorOpenFrac)
      if (Math.abs(dy) < 1.0 && Math.abs(dz) < halfW && dx > -0.2 && dx < 0.6){
        // inward jet from corridor
        vx += corridorFlow * (0.7 - dx) * 1.2
        vz += corridorFlow * (-dz) * 0.3
      }
    }
    // person plume and anisotropic wake aligned with motion
    if (personActive){
      const dx = x - personPos.x, dy = y - personPos.y, dz = z - personPos.z
      const r2 = dx*dx + dy*dy + dz*dz
      const g = Math.exp(-r2/0.12)
      const pvx = personPos.x - prevPersonPosRef.current.x
      const pvz = personPos.z - prevPersonPosRef.current.z
      const pvLen = Math.max(0.001, Math.hypot(pvx, pvz))
      const dirX = pvx / pvLen, dirZ = pvz / pvLen
      const along = dx*dirX + dz*dirZ
      vx += (dx + dirX*along*1.5) * g * 0.7
      vz += (dz + dirZ*along*1.5) * g * 0.7
      // thermal plume upwards
      vy += 0.7 * g
    }
    return { vx, vy, vz }
  }

  // Three.js scene
  useEffect(() => { buildGrid() }, [])

  useEffect(() => {
    const mount = mountRef.current
    if (!mount) return
    const THREE_NS: any = (THREE as any)
    const scene: any = new THREE_NS.Scene()
  const mountH = Math.max(300, mount.clientHeight || 400)
  const camera: any = new THREE_NS.PerspectiveCamera(55, mount.clientWidth / mountH, 0.1, 100)
    camera.position.set(0, 2.2, 5.2)
    camera.lookAt(0, 1.5, 0)
    const renderer: any = new THREE_NS.WebGLRenderer({ antialias: true, alpha: true })
  renderer.setSize(mount.clientWidth, mountH)
    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio || 1))
    mount.appendChild(renderer.domElement)

    // MediaRecorder for documentation
    const stream = (renderer.domElement as any).captureStream ? (renderer.domElement as any).captureStream(30) : null
    let recorder: any = null
    if (stream && 'MediaRecorder' in window) {
      recorder = new (window as any).MediaRecorder(stream, { mimeType: 'video/webm' })
      recorder.ondataavailable = (e:any) => { if (e.data.size>0) chunksRef.current.push(e.data) }
      recorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'video/webm' })
        chunksRef.current = []
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a'); a.href=url; a.download='smoke-test.webm'; a.click()
        URL.revokeObjectURL(url)
      }
    }
    mediaRef.current = recorder

    // Room + elements
    const room = new THREE_NS.Mesh(
      new THREE_NS.BoxGeometry(4, 3, 3),
      new THREE_NS.MeshBasicMaterial({ color: 0x94a3b8, wireframe: true, opacity: 0.3, transparent: true })
    )
    room.position.set(0,1.5,0); scene.add(room)
    const hepa = new THREE_NS.Mesh(
      new THREE_NS.PlaneGeometry(3.2, 2.2, 12, 8),
      new THREE_NS.MeshBasicMaterial({ color: 0x60a5fa, transparent:true, opacity:0.2, wireframe:true })
    ); hepa.rotation.x=-Math.PI/2; hepa.position.set(0,3,0); scene.add(hepa)
    // Obstacles (equipment) group
    const obstaclesGroup = new THREE_NS.Group(); scene.add(obstaclesGroup)
    obstacles.forEach((o, idx)=>{
      const mesh = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(o.w, o.h, o.d), new THREE_NS.MeshBasicMaterial({ color:0xf59e0b, transparent:true, opacity:0.6 }))
      mesh.position.set(o.x, o.h/2, o.z)
      mesh.userData = { type:'obstacle', index: idx }
      // larger invisible proxy for easier picking
      const proxy = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(o.w*1.6, o.h*1.4, o.d*1.6), new THREE_NS.MeshBasicMaterial({ visible:false }))
      proxy.position.copy(mesh.position)
      proxy.userData = { type:'obstacle', index: idx, base: mesh }
      obstaclesGroup.add(mesh)
      obstaclesGroup.add(proxy)
    })

    // Supplies (ceiling diffusers) - realistic square diffuser with directional arrows
    const suppliesGroup = new THREE_NS.Group(); scene.add(suppliesGroup)
    supplies.forEach((s, idx)=>{
      const diffuser = new THREE_NS.Group()
      // Main square panel (600×600mm diffuser face)
      const panel = new THREE_NS.Mesh(
        new THREE_NS.BoxGeometry(0.5, 0.02, 0.5),
        new THREE_NS.MeshBasicMaterial({ color:0x60a5fa })
      )
      panel.position.y = -0.01
      diffuser.add(panel)
      // Inner grille pattern (4-way directional slots)
      const slotMat = new THREE_NS.MeshBasicMaterial({ color:0x3b82f6 })
      for (let i=-1; i<=1; i+=2){
        const slot1 = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(0.35, 0.03, 0.04), slotMat)
        slot1.position.set(0, 0, i*0.15)
        diffuser.add(slot1)
        const slot2 = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(0.04, 0.03, 0.35), slotMat)
        slot2.position.set(i*0.15, 0, 0)
        diffuser.add(slot2)
      }
      // Directional flow indicators (small cones pointing down)
      const arrowMat = new THREE_NS.MeshBasicMaterial({ color:0x93c5fd })
      for (let ax=-0.15; ax<=0.15; ax+=0.15){
        for (let az=-0.15; az<=0.15; az+=0.15){
          if (Math.abs(ax)<0.01 && Math.abs(az)<0.01) continue
          const arrow = new THREE_NS.Mesh(new THREE_NS.ConeGeometry(0.03, 0.06, 6), arrowMat)
          arrow.position.set(ax, -0.05, az)
          arrow.rotation.x = Math.PI
          diffuser.add(arrow)
        }
      }
      diffuser.position.set(s.x, s.y, s.z)
      diffuser.userData = { type:'supply', index: idx }
      const proxy = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(0.6,0.1,0.6), new THREE_NS.MeshBasicMaterial({ visible:false }))
      proxy.position.set(s.x, s.y, s.z)
      proxy.userData = { type:'supply', index: idx, base: diffuser }
      suppliesGroup.add(diffuser)
      suppliesGroup.add(proxy)
    })

    // Exhausts (floor/wall grilles) - realistic louvered grille
    const exhaustsGroup = new THREE_NS.Group(); scene.add(exhaustsGroup)
    exhausts.forEach((e, idx)=>{
      const grille = new THREE_NS.Group()
      // Grille frame (rectangular)
      const frame = new THREE_NS.Mesh(
        new THREE_NS.BoxGeometry(0.4, 0.25, 0.04),
        new THREE_NS.MeshBasicMaterial({ color:0xef4444 })
      )
      grille.add(frame)
      // Horizontal louvers (slats)
      const louverMat = new THREE_NS.MeshBasicMaterial({ color:0xdc2626 })
      for (let i=-0.08; i<=0.08; i+=0.04){
        const louver = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(0.35, 0.015, 0.05), louverMat)
        louver.position.set(0, i, 0.01)
        louver.rotation.x = -Math.PI/8 // angled slats
        grille.add(louver)
      }
      // Suction indicator arrows (pointing inward)
      const arrowMat = new THREE_NS.MeshBasicMaterial({ color:0xfca5a5 })
      for (let ay=-0.06; ay<=0.06; ay+=0.06){
        const arrow = new THREE_NS.Mesh(new THREE_NS.ConeGeometry(0.02, 0.05, 6), arrowMat)
        arrow.position.set(0, ay, 0.06)
        arrow.rotation.x = -Math.PI/2 // pointing toward grille
        grille.add(arrow)
      }
      grille.position.set(e.x, e.y, e.z)
      grille.userData = { type:'exhaust', index: idx }
      const proxy = new THREE_NS.Mesh(new THREE_NS.BoxGeometry(0.5,0.3,0.15), new THREE_NS.MeshBasicMaterial({ visible:false }))
      proxy.position.set(e.x, e.y, e.z)
      proxy.userData = { type:'exhaust', index: idx, base: grille }
      exhaustsGroup.add(grille)
      exhaustsGroup.add(proxy)
    })

    // Door (left wall)
    const doorGroup = new THREE_NS.Group(); scene.add(doorGroup)
    const door = new THREE_NS.Mesh(new THREE_NS.PlaneGeometry(0.9, 2.0), new THREE_NS.MeshBasicMaterial({ color:0x64748b, side:(THREE_NS.DoubleSide||2), transparent:true, opacity:0.6 }))
    door.position.set(-2.0+0.001, 1.0, 0)
    door.rotation.y = Math.PI/2
    door.userData = { type:'door' }
    doorGroup.add(door)
    if (doorOpen){ doorGroup.rotation.y = -Math.PI/2 * 0.7 } else { doorGroup.rotation.y = 0 }

    // Emitters markers for dragging
    const emittersGroup = new THREE_NS.Group(); scene.add(emittersGroup)
    emitters.forEach((e, idx)=>{
      const mesh = new THREE_NS.Mesh(new THREE_NS.SphereGeometry(0.06, 12, 12), new THREE_NS.MeshBasicMaterial({ color:0xbfe3ff }))
      mesh.position.set(e.x, e.y, e.z)
      mesh.userData = { type:'emitter', index: idx }
      const proxy = new THREE_NS.Mesh(new THREE_NS.SphereGeometry(0.16, 12, 12), new THREE_NS.MeshBasicMaterial({ visible:false }))
      proxy.position.set(e.x, e.y, e.z)
      proxy.userData = { type:'emitter', index: idx, base: mesh }
      emittersGroup.add(mesh)
      emittersGroup.add(proxy)
    })

    // Person avatar
    const person = new THREE_NS.Group();
    const body = new THREE_NS.Mesh(new THREE_NS.CapsuleGeometry(0.18, 0.6, 6, 12), new THREE_NS.MeshBasicMaterial({ color:0x93c5fd }))
    body.position.set(0, 1.0, 0)
    person.add(body)
    person.position.set(personPos.x, 0, personPos.z)
    person.userData = { type:'person' }
    scene.add(person)

    // Smoke particles pool
    const MAX_SMOKE = 12000
    const geo = new THREE_NS.BufferGeometry()
    const pos = new Float32Array(MAX_SMOKE*3)
    const vel = new Float32Array(MAX_SMOKE*3)
    const life = new Float32Array(MAX_SMOKE)
    const color = new Float32Array(MAX_SMOKE*3)
    for (let i=0;i<MAX_SMOKE;i++){ pos[i*3]=9999; pos[i*3+1]=9999; pos[i*3+2]=9999; life[i]=0; color[i*3]=0.85; color[i*3+1]=0.93; color[i*3+2]=1 }
    geo.setAttribute('position', new THREE_NS.BufferAttribute(pos,3))
    geo.setAttribute('aColor', new THREE_NS.BufferAttribute(color,3))
    const mat = new THREE_NS.PointsMaterial({ size:0.03, color:0xbfe3ff, transparent:true, opacity:0.9, depthWrite:false, blending: (THREE_NS.AdditiveBlending||2) })
  const smoke = new THREE_NS.Points(geo, mat); scene.add(smoke)

  // 3D streamlines group (for visualizing recirculation)
  const streamGroup = new THREE_NS.Group();
  scene.add(streamGroup)

    // Helpers
    const rng = () => (Math.random()*2-1)
    function spawnFromEmitter(e:Emitter){
      for (let s=0; s<e.rate; s++){
        const i = Math.floor(Math.random()*MAX_SMOKE)
        pos[i*3+0] = e.x + rng()*0.05
        pos[i*3+1] = e.y + rng()*0.03
        pos[i*3+2] = e.z + rng()*0.05
        vel[i*3+0] = 0; vel[i*3+1] = 0.3 + Math.random()*0.2; vel[i*3+2] = 0
        life[i] = 3 + Math.random()*2
      }
      ;(geo as any).attributes.position.needsUpdate = true
    }

    // Raycasting & pointer-drag helpers
    const ray = new THREE_NS.Raycaster(); const mouse = new THREE_NS.Vector2()
    const floorPlane = new THREE_NS.Plane(new THREE_NS.Vector3(0,1,0), 0) // y=0
    const emitterPlane = new THREE_NS.Plane(new THREE_NS.Vector3(0,1,0), -0.4) // y=0.4
    const exhaustPlane = new THREE_NS.Plane(new THREE_NS.Vector3(0,1,0), -0.2) // y=0.2
    const supplyPlane = new THREE_NS.Plane(new THREE_NS.Vector3(0,1,0), -2.95) // y=2.95
    let dragging:any = null
    let dragData: { plane:any, offsetX:number, offsetZ:number } | null = null
    let activePointerId: number | null = null

    function pick(ev:PointerEvent|MouseEvent){
      const rect = (renderer.domElement as HTMLCanvasElement).getBoundingClientRect()
      mouse.x = ((ev.clientX-rect.left)/rect.width) * 2 - 1
      mouse.y = -((ev.clientY-rect.top)/rect.height) * 2 + 1
      ray.setFromCamera(mouse, camera)
      const objects:any[] = []
      if (editMode==='hvac'){ objects.push(...suppliesGroup.children, ...exhaustsGroup.children, ...obstaclesGroup.children) }
      if (editMode==='emitters'){ objects.push(...emittersGroup.children) }
      if (editMode==='person'){ objects.push(person) }
      const hits = ray.intersectObjects(objects, false)
      return hits[0]?.object || null
    }

  function onPointerDown(ev:PointerEvent){
      // create emitter on click mode
      if (step===2 && emitMode==='click' && editMode==='emitters'){
        const rect = (renderer.domElement as HTMLCanvasElement).getBoundingClientRect()
        mouse.x = ((ev.clientX-rect.left)/rect.width) * 2 - 1
        mouse.y = -((ev.clientY-rect.top)/rect.height) * 2 + 1
        ray.setFromCamera(mouse, camera)
        const point = new THREE_NS.Vector3()
        ray.ray.intersectPlane(floorPlane, point)
        point.x = Math.max(roomBounds.x[0]+0.2, Math.min(roomBounds.x[1]-0.2, point.x))
        point.z = Math.max(roomBounds.z[0]+0.2, Math.min(roomBounds.z[1]-0.2, point.z))
        const e:Emitter = { x: point.x, y: 0.4, z: point.z, rate: 24, label:'Klik emitter' }
        setEmitters(prev=>[...prev, e])
        return
      }
      const obj = pick(ev)
      if (obj){
        dragging = obj
        const ud = (obj as any).userData || {}
        selectedRef.current = { type: ud.type, index: ud.index }
        const rect = (renderer.domElement as HTMLCanvasElement).getBoundingClientRect()
        mouse.x = ((ev.clientX-rect.left)/rect.width) * 2 - 1
        mouse.y = -((ev.clientY-rect.top)/rect.height) * 2 + 1
        ray.setFromCamera(mouse, camera)
        // Drag on a plane at the current object's height (so Y stays constant while dragging);
        // Y can be changed via UI slider separately.
        const base = ud.base || obj
        const dynPlane = new THREE_NS.Plane(new THREE_NS.Vector3(0,1,0), -base.position.y)
        const plane = dynPlane
        const p = new THREE_NS.Vector3()
        ray.ray.intersectPlane(plane, p)
        dragData = { plane, offsetX: p.x - base.position.x, offsetZ: p.z - base.position.z }
        try{ (renderer.domElement as any).setPointerCapture(ev.pointerId); activePointerId = ev.pointerId }catch{}
      }
    }
    function onPointerMove(ev:PointerEvent){
      if (!dragging || (activePointerId!=null && ev.pointerId!==activePointerId)) return
      const point = new THREE_NS.Vector3();
      const rect = (renderer.domElement as HTMLCanvasElement).getBoundingClientRect()
      mouse.x = ((ev.clientX-rect.left)/rect.width) * 2 - 1
      mouse.y = -((ev.clientY-rect.top)/rect.height) * 2 + 1
      ray.setFromCamera(mouse, camera)
      const plane = dragData?.plane || floorPlane
      ray.ray.intersectPlane(plane, point)
      point.x -= (dragData?.offsetX||0)
      point.z -= (dragData?.offsetZ||0)
      // live move visual only with hard clamps to room bounds
      const base = dragging.userData?.base || dragging
      const clampedX = Math.max(roomBounds.x[0]+0.2, Math.min(roomBounds.x[1]-0.2, point.x))
      const clampedZ = Math.max(roomBounds.z[0]+0.2, Math.min(roomBounds.z[1]-0.2, point.z))
  base.position.set(clampedX, base.position.y, clampedZ)
      // also move proxy if we are dragging base
      if (dragging.userData?.base){ dragging.position.copy(base.position) }
    }
    function onPointerUp(ev:PointerEvent){
      if (!dragging) return
      const obj = dragging; dragging = null
      dragData = null; activePointerId = null
      const { type, index } = obj.userData || {}
      if (type==='supply'){
        const p = (obj.userData?.base || obj).position; const cx=Math.max(roomBounds.x[0]+0.2, Math.min(roomBounds.x[1]-0.2, p.x)); const cz=Math.max(roomBounds.z[0]+0.2, Math.min(roomBounds.z[1]-0.2, p.z)); setSupplies(prev => prev.map((s,i)=> i===index? { ...s, x:cx, z:cz }: s))
      } else if (type==='exhaust'){
        const p = (obj.userData?.base || obj).position; const cx=Math.max(roomBounds.x[0]+0.2, Math.min(roomBounds.x[1]-0.2, p.x)); const cz=Math.max(roomBounds.z[0]+0.2, Math.min(roomBounds.z[1]-0.2, p.z)); setExhausts(prev => prev.map((e,i)=> i===index? { ...e, x:cx, z:cz }: e))
      } else if (type==='obstacle'){
        const p = (obj.userData?.base || obj).position; const cx=Math.max(roomBounds.x[0]+0.4, Math.min(roomBounds.x[1]-0.4, p.x)); const cz=Math.max(roomBounds.z[0]+0.4, Math.min(roomBounds.z[1]-0.4, p.z)); const o = obstacles[index]; setObstacles(prev => prev.map((ob,i)=> i===index? { ...ob, x:cx, z:cz, h:o.h }: ob))
      } else if (type==='emitter'){
        const p = (obj.userData?.base || obj).position; const cx=Math.max(roomBounds.x[0]+0.2, Math.min(roomBounds.x[1]-0.2, p.x)); const cz=Math.max(roomBounds.z[0]+0.2, Math.min(roomBounds.z[1]-0.2, p.z)); setEmitters(prev => prev.map((e,i)=> i===index? { ...e, x:cx, z:cz }: e))
      } else if (type==='person'){
        const p = (obj.userData?.base || obj).position; const cx=Math.max(roomBounds.x[0]+0.2, Math.min(roomBounds.x[1]-0.2, p.x)); const cz=Math.max(roomBounds.z[0]+0.2, Math.min(roomBounds.z[1]-0.2, p.z)); setPersonPos({ x:cx, y:1.0, z:cz })
      }
    }
    function onContextMenu(ev:MouseEvent){
      ev.preventDefault()
      const obj = pick(ev)
      if (!obj) return
      const { type, index } = (obj as any).userData || {}
      if (!type) return
      removeSelectedInternal({ type, index })
    }
    function onKeyDown(ev:KeyboardEvent){
      // Delete/Backspace: remove selected element
      if (ev.key==='Delete' || ev.key==='Backspace'){
        if (selectedRef.current){ removeSelectedInternal(selectedRef.current) }
      }
      // F or F11: toggle fullscreen
      else if ((ev.key==='f' || ev.key==='F') && !ev.ctrlKey && !ev.metaKey){
        ev.preventDefault(); toggleFullscreen()
      }
      // Space: play/pause
      else if (ev.key===' ' && !ev.ctrlKey && !ev.metaKey && !ev.shiftKey){
        ev.preventDefault(); setPlaying(p=>!p)
      }
      // Ctrl/Cmd+S: add supply
      else if (ev.key==='s' && (ev.ctrlKey || ev.metaKey) && !ev.shiftKey){
        ev.preventDefault(); setSupplies(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:2.95, z:(Math.random()-0.5)*2, speed:0.35 }])
      }
      // Ctrl/Cmd+E: add exhaust
      else if (ev.key==='e' && (ev.ctrlKey || ev.metaKey) && !ev.shiftKey){
        ev.preventDefault(); setExhausts(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:0.2, z:(Math.random()-0.5)*2, speed:0.35 }])
      }
      // Ctrl/Cmd+Shift+E: add emitter
      else if (ev.key==='E' && (ev.ctrlKey || ev.metaKey) && ev.shiftKey){
        ev.preventDefault(); setEmitters(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:0.4, z:(Math.random()-0.5)*2, rate:24, label:`E${prev.length+1}` }])
      }
      // Ctrl/Cmd+D: toggle door
      else if (ev.key==='d' && (ev.ctrlKey || ev.metaKey)){
        ev.preventDefault(); setDoorOpen(o=>!o)
      }
      // Ctrl/Cmd+U: toggle UDF
      else if (ev.key==='u' && (ev.ctrlKey || ev.metaKey)){
        ev.preventDefault(); setUdfCeiling(u=>!u)
      }
      // Ctrl/Cmd+K: clear all
      else if (ev.key==='k' && (ev.ctrlKey || ev.metaKey)){
        ev.preventDefault(); setEmitters([]); setSupplies([]); setExhausts([]); setObstacles([])
      }
      // V: toggle vectors
      else if (ev.key==='v' && !ev.ctrlKey && !ev.metaKey && !ev.shiftKey){
        ev.preventDefault(); setShowVectors(v=>!v)
      }
      // T: toggle stagnation
      else if (ev.key==='t' && !ev.ctrlKey && !ev.metaKey && !ev.shiftKey){
        ev.preventDefault(); setShowStagnation(s=>!s)
      }
      // W: toggle vortices
      else if (ev.key==='w' && !ev.ctrlKey && !ev.metaKey && !ev.shiftKey){
        ev.preventDefault(); setShowVortices(w=>!w)
      }
      // 1-5: switch steps
      else if (['1','2','3','4','5'].includes(ev.key) && !ev.ctrlKey && !ev.metaKey){
        ev.preventDefault(); setStep(Number(ev.key) as any)
      }
    }
    function removeSelectedInternal(sel:{type:string,index?:number}){
      if (sel.type==='supply' && sel.index!=null){ setSupplies(prev=> prev.filter((_,i)=> i!==sel.index)) }
      else if (sel.type==='exhaust' && sel.index!=null){ setExhausts(prev=> prev.filter((_,i)=> i!==sel.index)) }
      else if (sel.type==='obstacle' && sel.index!=null){ setObstacles(prev=> prev.filter((_,i)=> i!==sel.index)) }
      else if (sel.type==='emitter' && sel.index!=null){ setEmitters(prev=> prev.filter((_,i)=> i!==sel.index)) }
    }
    renderer.domElement.addEventListener('pointerdown', onPointerDown)
    renderer.domElement.addEventListener('contextmenu', onContextMenu)
    renderer.domElement.addEventListener('pointermove', onPointerMove)
    renderer.domElement.addEventListener('pointerup', onPointerUp)
    window.addEventListener('keydown', onKeyDown)

  // Right mini-panel with three orthographic views (Top, Front, Side) - only in fullscreen
    const miniPanel = document.createElement('div')
    miniPanel.style.position='absolute'; miniPanel.style.right='8px'; miniPanel.style.top='8px'; miniPanel.style.bottom='8px'; miniPanel.style.width='260px'
    miniPanel.style.display='flex'; miniPanel.style.flexDirection='column'; miniPanel.style.gap='8px'; miniPanel.style.pointerEvents='none'; miniPanel.style.zIndex='50'
    miniPanel.style.visibility = isFullscreen ? 'visible' : 'hidden' // hide when not in fullscreen
    const cvTop = document.createElement('canvas'); const cvFront = document.createElement('canvas'); const cvSide = document.createElement('canvas')
    miniPanel.appendChild(cvTop); miniPanel.appendChild(cvFront); miniPanel.appendChild(cvSide)
    mount.style.position='relative'; mount.appendChild(miniPanel)
    const ctxTop = cvTop.getContext('2d')!; const ctxFront = cvFront.getContext('2d')!; const ctxSide = cvSide.getContext('2d')!
    function layoutMini(){
      const h = Math.max(300, mount?.clientHeight || 400)
      const each = Math.floor((h - 16) / 3)
      ;[cvTop,cvFront,cvSide].forEach(cv=>{ cv.width=260; cv.height=each; cv.style.border='1px solid rgba(255,255,255,0.1)'; cv.style.borderRadius='8px'; cv.style.background='rgba(15,23,42,0.85)'; cv.style.boxShadow='0 6px 18px rgba(0,0,0,0.35)' })
    }
    layoutMini()

    // animate
    let raf=0; let t=0; let accum=0
    function animate(){
      if (playing) { t += 0.016; accum += 0.016*timescale }
      // prep countdown
      if (step===1 && prepSecondsLeft>0){
        const tick = Math.min(prepSecondsLeft, Math.floor(accum))
        if (tick>0){ setPrepSecondsLeft(prev=>Math.max(0, prev-tick)); accum -= tick }
      }
      // spawn smoke at emitters when on step >=2
      if (step>=2){ emitters.forEach(e=> spawnFromEmitter(e)) }
      // advect particles
      for (let i=0;i<MAX_SMOKE;i++){
        if (life[i]<=0) continue
        let x=pos[i*3+0], y=pos[i*3+1], z=pos[i*3+2]
        const v = sampleField(x,y,z)
        vel[i*3+0] = vel[i*3+0]*0.85 + v.x*0.15
        vel[i*3+1] = vel[i*3+1]*0.85 + v.y*0.15
        vel[i*3+2] = vel[i*3+2]*0.85 + v.z*0.15
        x += vel[i*3+0]*0.012; y += vel[i*3+1]*0.012; z += vel[i*3+2]*0.012
        life[i] -= 0.016
        if (y<0.2||y>3 || Math.abs(x)>2 || Math.abs(z)>1.5 || life[i]<=0){ life[i]=0; pos[i*3]=9999; pos[i*3+1]=9999; pos[i*3+2]=9999; continue }
        pos[i*3+0]=x; pos[i*3+1]=y; pos[i*3+2]=z
      }
      ;(geo as any).attributes.position.needsUpdate = true

      function drawTop(ctx:CanvasRenderingContext2D, W:number, H:number){
        ctx.clearRect(0,0,W,H)
  const pad=18; const sx=(x:number)=> pad + (x-roomBounds.x[0])/(roomBounds.x[1]-roomBounds.x[0])*(W-pad*2)
  const sz=(z:number)=> pad + (z-roomBounds.z[0])/(roomBounds.z[1]-roomBounds.z[0])*(H-pad*2)
  // Room outline
  ctx.fillStyle='rgba(15,23,42,0.85)'; ctx.fillRect(0,0,W,H)
  ctx.strokeStyle='rgba(148,163,184,0.35)'; ctx.lineWidth=2; ctx.strokeRect(pad,pad,W-pad*2,H-pad*2)
  // UDF ceiling indicator
  if(udfCeiling){ ctx.fillStyle='rgba(96,165,250,0.12)'; ctx.fillRect(pad,pad,W-pad*2,H-pad*2); ctx.strokeStyle='#60a5fa'; ctx.lineWidth=1; ctx.setLineDash([4,4]); ctx.strokeRect(pad,pad,W-pad*2,H-pad*2); ctx.setLineDash([]) }
  // Door (left wall)
  ctx.fillStyle='rgba(100,116,139,0.7)'; ctx.fillRect(pad-2, H/2-18, 4, 36)
  if(doorOpen){ ctx.fillStyle='rgba(96,165,250,0.25)'; ctx.fillRect(pad+2, H/2-12, 15, 24) }
  // Stagnation zones
  if(showStagnation){ for(let gy=pad+8; gy<H-pad-8; gy+=10){ for(let gx=pad+8; gx<W-pad-8; gx+=10){ const xx=roomBounds.x[0]+((gx-pad)/(W-pad*2))*(roomBounds.x[1]-roomBounds.x[0]); const zz=roomBounds.z[0]+((gy-pad)/(H-pad*2))*(roomBounds.z[1]-roomBounds.z[0]); const v=sampleField(xx,1.0,zz); const speed=Math.hypot(v.x,v.z); if(speed<0.2){ ctx.fillStyle=`rgba(239,68,68,${0.15+(0.2-speed)*0.5})`; ctx.fillRect(gx-4,gy-4,8,8) } } } }
  // Vortices
  if(showVortices){ ctx.strokeStyle='rgba(99,102,241,0.75)'; ctx.lineWidth=1.5; for(let gy=pad+12; gy<H-pad-12; gy+=18){ for(let gx=pad+12; gx<W-pad-12; gx+=18){ const x0=roomBounds.x[0]+((gx-pad)/(W-pad*2))*(roomBounds.x[1]-roomBounds.x[0]); const z0=roomBounds.z[0]+((gy-pad)/(H-pad*2))*(roomBounds.z[1]-roomBounds.z[0]); const v1=sampleField(x0-0.06,1.0,z0), v2=sampleField(x0+0.06,1.0,z0), v3=sampleField(x0,1.0,z0-0.06), v4=sampleField(x0,1.0,z0+0.06); const curl=(v2.z-v1.z)-(v4.x-v3.x); if(Math.abs(curl)>0.5){ ctx.beginPath(); ctx.arc(gx,gy,5,0,Math.PI*2); ctx.stroke() } } } }
  // Flow vectors
  if(showVectors){ ctx.strokeStyle='rgba(148,163,184,0.7)'; ctx.lineWidth=1; for(let gy=pad+12; gy<H-pad-8; gy+=20){ for(let gx=pad+12; gx<W-pad-8; gx+=20){ const xx=roomBounds.x[0]+((gx-pad)/(W-pad*2))*(roomBounds.x[1]-roomBounds.x[0]); const zz=roomBounds.z[0]+((gy-pad)/(H-pad*2))*(roomBounds.z[1]-roomBounds.z[0]); const v=sampleField(xx,1.0,zz); const len=Math.min(16,Math.hypot(v.x,v.z)*20); const ang=Math.atan2(v.z,v.x); if(len>1){ ctx.beginPath(); ctx.moveTo(gx,gy); ctx.lineTo(gx+Math.cos(ang)*len, gy+Math.sin(ang)*len); ctx.stroke(); const ax=gx+Math.cos(ang)*len, ay=gy+Math.sin(ang)*len; ctx.beginPath(); ctx.moveTo(ax,ay); ctx.lineTo(ax-Math.cos(ang+0.4)*3, ay-Math.sin(ang+0.4)*3); ctx.lineTo(ax-Math.cos(ang-0.4)*3, ay-Math.sin(ang-0.4)*3); ctx.closePath(); ctx.fill() } } } }
  // Elements
  supplies.forEach((s,i)=>{ ctx.fillStyle='#60a5fa'; ctx.strokeStyle='#3b82f6'; ctx.lineWidth=2; ctx.beginPath(); ctx.arc(sx(s.x), sz(s.z), 7, 0, Math.PI*2); ctx.fill(); ctx.stroke(); ctx.fillStyle='#fff'; ctx.font='9px sans-serif'; ctx.textAlign='center'; ctx.fillText(`D${i+1}`, sx(s.x), sz(s.z)+3) })
  exhausts.forEach((e,i)=>{ ctx.fillStyle='#ef4444'; ctx.strokeStyle='#dc2626'; ctx.lineWidth=2; ctx.fillRect(sx(e.x)-6, sz(e.z)-6, 12, 12); ctx.strokeRect(sx(e.x)-6, sz(e.z)-6, 12, 12); ctx.fillStyle='#fff'; ctx.font='9px sans-serif'; ctx.textAlign='center'; ctx.fillText(`O${i+1}`, sx(e.x), sz(e.z)+3) })
  obstacles.forEach((o,i)=>{ const w=o.w/(roomBounds.x[1]-roomBounds.x[0])*(W-pad*2); const d=o.d/(roomBounds.z[1]-roomBounds.z[0])*(H-pad*2); ctx.fillStyle='rgba(245,158,11,0.65)'; ctx.strokeStyle='#f59e0b'; ctx.lineWidth=1.5; ctx.fillRect(sx(o.x)-w/2, sz(o.z)-d/2, w, d); ctx.strokeRect(sx(o.x)-w/2, sz(o.z)-d/2, w, d) })
  emitters.forEach((em,i)=>{ ctx.fillStyle='#bfe3ff'; ctx.strokeStyle='#7dd3fc'; ctx.lineWidth=1.5; ctx.beginPath(); ctx.arc(sx(em.x), sz(em.z), 5, 0, Math.PI*2); ctx.fill(); ctx.stroke() })
  // Person
  ctx.fillStyle='#93c5fd'; ctx.strokeStyle='#60a5fa'; ctx.lineWidth=2; ctx.fillRect(sx(personPos.x)-5, sz(personPos.z)-8, 10, 16); ctx.strokeRect(sx(personPos.x)-5, sz(personPos.z)-8, 10, 16)
  // Labels
  ctx.fillStyle='rgba(226,232,240,0.9)'; ctx.font='10px sans-serif'; ctx.textAlign='left'; ctx.fillText('TLORIS (zgoraj)', pad+4, pad+12)
      }
  function drawFront(ctx:CanvasRenderingContext2D, W:number, H:number){
        ctx.clearRect(0,0,W,H)
  const pad=18; const sx=(x:number)=> pad + (x-roomBounds.x[0])/(roomBounds.x[1]-roomBounds.x[0])*(W-pad*2)
  const sy=(y:number)=> pad + (1-(y-roomBounds.y[0])/(roomBounds.y[1]-roomBounds.y[0]))*(H-pad*2)
  ctx.fillStyle='rgba(15,23,42,0.85)'; ctx.fillRect(0,0,W,H)
  ctx.strokeStyle='rgba(148,163,184,0.35)'; ctx.lineWidth=2; ctx.strokeRect(pad,pad,W-pad*2,H-pad*2)
  // Floor & ceiling lines
  ctx.strokeStyle='rgba(148,163,184,0.2)'; ctx.lineWidth=1; ctx.beginPath(); ctx.moveTo(pad, sy(0)); ctx.lineTo(W-pad, sy(0)); ctx.stroke(); ctx.beginPath(); ctx.moveTo(pad, sy(3)); ctx.lineTo(W-pad, sy(3)); ctx.stroke()
  // UDF ceiling
  if(udfCeiling){ ctx.fillStyle='rgba(96,165,250,0.15)'; ctx.fillRect(pad, sy(3), W-pad*2, 15); ctx.strokeStyle='#60a5fa'; ctx.setLineDash([3,3]); ctx.strokeRect(pad, sy(3), W-pad*2, 15); ctx.setLineDash([]) }
  // Stagnation
  if(showStagnation){ for(let gy=pad+8; gy<H-pad-8; gy+=10){ for(let gx=pad+8; gx<W-pad-8; gx+=10){ const xx=roomBounds.x[0]+((gx-pad)/(W-pad*2))*(roomBounds.x[1]-roomBounds.x[0]); const yy=roomBounds.y[0]+(1-((gy-pad)/(H-pad*2)))*(roomBounds.y[1]-roomBounds.y[0]); const v=sampleField(xx,yy,0); const speed=Math.hypot(v.x,v.y); if(speed<0.2){ ctx.fillStyle=`rgba(239,68,68,${0.15+(0.2-speed)*0.5})`; ctx.fillRect(gx-4,gy-4,8,8) } } } }
  // Flow vectors
  if(showVectors){ ctx.strokeStyle='rgba(148,163,184,0.7)'; ctx.lineWidth=1; for(let gy=pad+12; gy<H-pad-8; gy+=20){ for(let gx=pad+12; gx<W-pad-8; gx+=20){ const xx=roomBounds.x[0]+((gx-pad)/(W-pad*2))*(roomBounds.x[1]-roomBounds.x[0]); const yy=roomBounds.y[0]+(1-((gy-pad)/(H-pad*2)))*(roomBounds.y[1]-roomBounds.y[0]); const v=sampleField(xx,yy,0); const len=Math.min(16,Math.hypot(v.x,v.y)*18); const ang=Math.atan2(-v.y,v.x); if(len>1){ ctx.beginPath(); ctx.moveTo(gx,gy); ctx.lineTo(gx+Math.cos(ang)*len, gy+Math.sin(ang)*len); ctx.stroke(); const ax=gx+Math.cos(ang)*len, ay=gy+Math.sin(ang)*len; ctx.fillStyle='rgba(148,163,184,0.7)'; ctx.beginPath(); ctx.moveTo(ax,ay); ctx.lineTo(ax-Math.cos(ang+0.4)*3, ay-Math.sin(ang+0.4)*3); ctx.lineTo(ax-Math.cos(ang-0.4)*3, ay-Math.sin(ang-0.4)*3); ctx.closePath(); ctx.fill() } } } }
  // Elements
  supplies.forEach((s,i)=>{ ctx.fillStyle='#60a5fa'; ctx.strokeStyle='#3b82f6'; ctx.lineWidth=2; ctx.beginPath(); ctx.moveTo(sx(s.x), sy(s.y)-8); ctx.lineTo(sx(s.x)-7, sy(s.y)+4); ctx.lineTo(sx(s.x)+7, sy(s.y)+4); ctx.closePath(); ctx.fill(); ctx.stroke() })
  exhausts.forEach((e,i)=>{ ctx.fillStyle='#ef4444'; ctx.strokeStyle='#dc2626'; ctx.lineWidth=2; ctx.fillRect(sx(e.x)-7, sy(e.y)-4, 14, 8); ctx.strokeRect(sx(e.x)-7, sy(e.y)-4, 14, 8) })
  obstacles.forEach((o,i)=>{ const w=o.w/(roomBounds.x[1]-roomBounds.x[0])*(W-pad*2); const h=o.h/(roomBounds.y[1]-roomBounds.y[0])*(H-pad*2); ctx.fillStyle='rgba(245,158,11,0.65)'; ctx.strokeStyle='#f59e0b'; ctx.lineWidth=1.5; ctx.fillRect(sx(o.x)-w/2, sy(o.h/2)-h/2, w, h); ctx.strokeRect(sx(o.x)-w/2, sy(o.h/2)-h/2, w, h) })
  // Person
  ctx.fillStyle='#93c5fd'; ctx.strokeStyle='#60a5fa'; ctx.lineWidth=2; ctx.fillRect(sx(personPos.x)-4, sy(1.0)-12, 8, 24); ctx.strokeRect(sx(personPos.x)-4, sy(1.0)-12, 8, 24)
  ctx.fillStyle='rgba(226,232,240,0.9)'; ctx.font='10px sans-serif'; ctx.textAlign='left'; ctx.fillText('NARIS (spredaj)', pad+4, pad+12)
      }
  function drawSide(ctx:CanvasRenderingContext2D, W:number, H:number){
        ctx.clearRect(0,0,W,H)
  const pad=18; const sz=(z:number)=> pad + (z-roomBounds.z[0])/(roomBounds.z[1]-roomBounds.z[0])*(W-pad*2)
  const sy=(y:number)=> pad + (1-(y-roomBounds.y[0])/(roomBounds.y[1]-roomBounds.y[0]))*(H-pad*2)
  ctx.fillStyle='rgba(15,23,42,0.85)'; ctx.fillRect(0,0,W,H)
  ctx.strokeStyle='rgba(148,163,184,0.35)'; ctx.lineWidth=2; ctx.strokeRect(pad,pad,W-pad*2,H-pad*2)
  ctx.strokeStyle='rgba(148,163,184,0.2)'; ctx.lineWidth=1; ctx.beginPath(); ctx.moveTo(pad, sy(0)); ctx.lineTo(W-pad, sy(0)); ctx.stroke(); ctx.beginPath(); ctx.moveTo(pad, sy(3)); ctx.lineTo(W-pad, sy(3)); ctx.stroke()
  if(udfCeiling){ ctx.fillStyle='rgba(96,165,250,0.15)'; ctx.fillRect(pad, sy(3), W-pad*2, 15); ctx.strokeStyle='#60a5fa'; ctx.setLineDash([3,3]); ctx.strokeRect(pad, sy(3), W-pad*2, 15); ctx.setLineDash([]) }
  if(showStagnation){ for(let gy=pad+8; gy<H-pad-8; gy+=10){ for(let gx=pad+8; gx<W-pad-8; gx+=10){ const zz=roomBounds.z[0]+((gx-pad)/(W-pad*2))*(roomBounds.z[1]-roomBounds.z[0]); const yy=roomBounds.y[0]+(1-((gy-pad)/(H-pad*2)))*(roomBounds.y[1]-roomBounds.y[0]); const v=sampleField(0,yy,zz); const speed=Math.hypot(v.z,v.y); if(speed<0.2){ ctx.fillStyle=`rgba(239,68,68,${0.15+(0.2-speed)*0.5})`; ctx.fillRect(gx-4,gy-4,8,8) } } } }
  if(showVectors){ ctx.strokeStyle='rgba(148,163,184,0.7)'; ctx.lineWidth=1; for(let gy=pad+12; gy<H-pad-8; gy+=20){ for(let gx=pad+12; gx<W-pad-8; gx+=20){ const zz=roomBounds.z[0]+((gx-pad)/(W-pad*2))*(roomBounds.z[1]-roomBounds.z[0]); const yy=roomBounds.y[0]+(1-((gy-pad)/(H-pad*2)))*(roomBounds.y[1]-roomBounds.y[0]); const v=sampleField(0,yy,zz); const len=Math.min(16,Math.hypot(v.z,v.y)*18); const ang=Math.atan2(-v.y,v.z); if(len>1){ ctx.beginPath(); ctx.moveTo(gx,gy); ctx.lineTo(gx+Math.cos(ang)*len, gy+Math.sin(ang)*len); ctx.stroke(); const ax=gx+Math.cos(ang)*len, ay=gy+Math.sin(ang)*len; ctx.fillStyle='rgba(148,163,184,0.7)'; ctx.beginPath(); ctx.moveTo(ax,ay); ctx.lineTo(ax-Math.cos(ang+0.4)*3, ay-Math.sin(ang+0.4)*3); ctx.lineTo(ax-Math.cos(ang-0.4)*3, ay-Math.sin(ang-0.4)*3); ctx.closePath(); ctx.fill() } } } }
  exhausts.forEach((e,i)=>{ ctx.fillStyle='#ef4444'; ctx.strokeStyle='#dc2626'; ctx.lineWidth=2; ctx.fillRect(sz(e.z)-7, sy(e.y)-4, 14, 8); ctx.strokeRect(sz(e.z)-7, sy(e.y)-4, 14, 8) })
  obstacles.forEach((o,i)=>{ const d=o.d/(roomBounds.z[1]-roomBounds.z[0])*(W-pad*2); const h=o.h/(roomBounds.y[1]-roomBounds.y[0])*(H-pad*2); ctx.fillStyle='rgba(245,158,11,0.65)'; ctx.strokeStyle='#f59e0b'; ctx.lineWidth=1.5; ctx.fillRect(sz(o.z)-d/2, sy(o.h/2)-h/2, d, h); ctx.strokeRect(sz(o.z)-d/2, sy(o.h/2)-h/2, d, h) })
  ctx.fillStyle='#93c5fd'; ctx.strokeStyle='#60a5fa'; ctx.lineWidth=2; ctx.fillRect(sz(personPos.z)-4, sy(1.0)-12, 8, 24); ctx.strokeRect(sz(personPos.z)-4, sy(1.0)-12, 8, 24)
  ctx.fillStyle='rgba(226,232,240,0.9)'; ctx.font='10px sans-serif'; ctx.textAlign='left'; ctx.fillText('PREREZ (stranski)', pad+4, pad+12)
      }
      // Only draw minimaps in fullscreen to avoid overlap/clutter
      if (isFullscreen) {
        drawTop(ctxTop, cvTop.width, cvTop.height)
        drawFront(ctxFront, cvFront.width, cvFront.height)
        drawSide(ctxSide, cvSide.width, cvSide.height)
      }

      renderer.render(scene, camera)
      raf = requestAnimationFrame(animate)
    }
    animate()

    const onResize = () => {
      if (!mount) return
      const h = Math.max(300, mount.clientHeight || 400)
      camera.aspect = mount.clientWidth / h
      camera.updateProjectionMatrix()
      renderer.setSize(mount.clientWidth, h)
      layoutMini()
    }
    window.addEventListener('resize', onResize)
    // ResizeObserver to handle fullscreen element sizing precisely (avoid optional chaining on constructor)
    const RO = (window as any).ResizeObserver
    const ro = RO ? new RO(() => onResize()) : null
    if (ro) ro.observe(mount)

    return () => {
      cancelAnimationFrame(raf)
  window.removeEventListener('resize', onResize)
  if (ro && (ro as any).disconnect) ro.disconnect()
    renderer.dispose()
  renderer.domElement.removeEventListener('pointerdown', onPointerDown)
  renderer.domElement.removeEventListener('contextmenu', onContextMenu)
  renderer.domElement.removeEventListener('pointermove', onPointerMove)
  renderer.domElement.removeEventListener('pointerup', onPointerUp)
  window.removeEventListener('keydown', onKeyDown)
    if (miniPanel && mount.contains(miniPanel)) mount.removeChild(miniPanel)
      if (mediaRef.current && recording){ try{ mediaRef.current.stop() }catch{}
      }
      mount.removeChild(renderer.domElement)
    }
  }, [emitters, step, emitMode, editMode, playing, timescale, prepSecondsLeft, showVectors, showStagnation, showVortices, recording, supplies, exhausts, obstacles, doorOpen, doorOpenFrac, corridorFlow, personActive, personPos])

  // Fullscreen handling
  useEffect(()=>{
    const handler = () => {
      setIsFullscreen(document.fullscreenElement === mountRef.current)
    }
    document.addEventListener('fullscreenchange', handler)
    return ()=> document.removeEventListener('fullscreenchange', handler)
  }, [])

  function toggleFullscreen(){
    const el = mountRef.current
    if (!el) return
    if (document.fullscreenElement){
      document.exitFullscreen?.()
    } else {
      el.requestFullscreen?.()
    }
  }

  function removeSelected(){ if (selectedRef.current){
    const { type, index } = selectedRef.current
    if (type==='supply' && index!=null){ setSupplies(prev=> prev.filter((_,i)=> i!==index)) }
    else if (type==='exhaust' && index!=null){ setExhausts(prev=> prev.filter((_,i)=> i!==index)) }
    else if (type==='obstacle' && index!=null){ setObstacles(prev=> prev.filter((_,i)=> i!==index)) }
    else if (type==='emitter' && index!=null){ setEmitters(prev=> prev.filter((_,i)=> i!==index)) }
    selectedRef.current = null
  }}

  function clearAll(){
    setEmitters([]); setSupplies([]); setExhausts([]); setObstacles([])
  }

  // presets for step 2
  const presets: Emitter[] = [
    { x: 0, y: 2.7, z: 0, rate: 40, label:'Ob HEPA filtru' },
    { x: 0.3, y: 0.5, z: 0, rate: 28, label:'Ob opremi' },
    { x: -0.8, y: 1.0, z: 0.6, rate: 24, label:'Kritična cona A' },
    { x: 0.9, y: 1.2, z: -0.7, rate: 24, label:'Kritična cona B' }
  ]

  function addPreset(i:number){ setEmitters(prev=>[...prev, presets[i]]) }
  function clearEmitters(){ setEmitters([]) }
  function toggleRecording(){
    const rec = mediaRef.current
    if (!rec) return
    if (!recording){ rec.start(); setRecording(true) } else { rec.stop(); setRecording(false) }
  }
  function snapshot(){
    const mount = mountRef.current; if (!mount) return
    const canvas = mount.querySelector('canvas') as HTMLCanvasElement | null
    if (!canvas) return
    const url = canvas.toDataURL('image/png')
    const a = document.createElement('a'); a.href=url; a.download='smoke-snapshot.png'; a.click()
  }

  // simple analysis of hotspots
  function analyze(){
    // heuristic: more emitters near equipment → sug. reposition; significant stagnation or curl hints
    const nearEquip = emitters.filter(e=> Math.hypot(e.x-0.3, e.z-0) < 0.8).length
    const issues:string[] = []
    if (nearEquip>0) issues.push('Dim v bližini opreme nakazuje lokalne recirkulacije — razmislite o premiku opreme ali izboljšanju difuzorja.')
    if (showStagnation) issues.push('Zaznane stagnacijske cone — preverite izravnavo pretokov in odstranitev ovir.')
    if (showVortices) issues.push('Vrtinci so prisotni — preverite postavitev, robove in hitrost tokov.')
    if (emitters.length===0) issues.push('Ni izpusta dima — dodajte vsaj eno točko za relevanten preizkus.')
    return issues
  }

  return (
    <div style={{ display:'grid', gridTemplateColumns:'minmax(380px, 600px) 1fr', gap:16, padding:16, background:'rgba(59,130,246,0.06)', border:'1px solid rgba(59,130,246,0.25)', borderRadius:12 }}>
      <div ref={mountRef} style={{ width:'100%', height:'68vh', background:'linear-gradient(180deg,#0b1220,#0f172a)', borderRadius:12, border:'1px solid rgba(255,255,255,0.08)', position:'relative' }}>
        <button className="btn-ghost" onClick={toggleFullscreen} style={{ position:'absolute', top:8, right:8, zIndex:60 }}>
          {isFullscreen ? '⤢ Izhod iz cel zaslona' : '⤢ Cel zaslon'}
        </button>
        {/* Keyboard shortcuts helper */}
        <div style={{ position:'absolute', bottom:8, left:8, zIndex:60, background:'rgba(2,6,23,0.75)', border:'1px solid rgba(255,255,255,0.08)', padding:8, borderRadius:8, fontSize:11, color:'#94a3b8', maxWidth:200 }}>
          <div style={{ fontWeight:700, color:'#e6eef8', marginBottom:4 }}>⌨️ Bližnjice</div>
          <div>F – Cel zaslon</div>
          <div>Space – Pavza/Play</div>
          <div>Del – Odstrani izbrano</div>
          <div>V/T/W – Vektorji/Stagnacija/Vrtinci</div>
          <div>1-5 – Koraki</div>
          <div>Ctrl+S/E/D/U/K – Dodaj/Door/UDF/Počisti</div>
        </div>
        {isFullscreen && (
          <div style={{ position:'absolute', top:8, left:8, zIndex:60, display:'grid', gap:6, background:'rgba(2,6,23,0.55)', border:'1px solid rgba(255,255,255,0.08)', padding:8, borderRadius:8, width:340, transform:'translateX(calc(-100% - 12px))' }}>
            <div style={{ display:'flex', gap:6, flexWrap:'wrap' }}>
              <label style={{ display:'flex', alignItems:'center', gap:4 }}><input type="radio" name="fs-edit" checked={editMode==='emitters'} onChange={()=>setEditMode('emitters')} /> Izpusti</label>
              <label style={{ display:'flex', alignItems:'center', gap:4 }}><input type="radio" name="fs-edit" checked={editMode==='hvac'} onChange={()=>setEditMode('hvac')} /> HVAC</label>
              <label style={{ display:'flex', alignItems:'center', gap:4 }}><input type="radio" name="fs-edit" checked={editMode==='person'} onChange={()=>setEditMode('person')} /> Oseba</label>
            </div>
            {/* Selected element quick controls (height/rate) */}
            {selectedRef.current && (
              <div style={{ display:'grid', gap:6, background:'rgba(255,255,255,0.03)', border:'1px solid rgba(255,255,255,0.06)', padding:8, borderRadius:8 }}>
                <div style={{ color:'#e6eef8', fontWeight:700 }}>Izbrani element</div>
                {selectedRef.current.type==='supply' && selectedRef.current.index!=null && supplies[selectedRef.current.index] && (
                  <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                    Višina dovoda (m)
                    <input type="range" min={0.1} max={3} step={0.01} value={supplies[selectedRef.current.index].y}
                      onChange={e=>{ const v=Number(e.target.value); const i=selectedRef.current!.index!; setSupplies(prev=> prev.map((p,pi)=> pi===i? { ...p, y:v }: p)) }} />
                    <span style={{ minWidth:48, textAlign:'right', color:'#e6eef8' }}>{supplies[selectedRef.current.index].y.toFixed(2)}</span>
                  </label>
                )}
                {selectedRef.current.type==='exhaust' && selectedRef.current.index!=null && exhausts[selectedRef.current.index] && (
                  <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                    Višina odvoda (m)
                    <input type="range" min={0.1} max={3} step={0.01} value={exhausts[selectedRef.current.index].y}
                      onChange={e=>{ const v=Number(e.target.value); const i=selectedRef.current!.index!; setExhausts(prev=> prev.map((p,pi)=> pi===i? { ...p, y:v }: p)) }} />
                    <span style={{ minWidth:48, textAlign:'right', color:'#e6eef8' }}>{exhausts[selectedRef.current.index].y.toFixed(2)}</span>
                  </label>
                )}
                {selectedRef.current.type==='emitter' && selectedRef.current.index!=null && emitters[selectedRef.current.index] && (
                  <>
                    <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                      Višina izpusta (m)
                      <input type="range" min={0.1} max={2} step={0.01} value={emitters[selectedRef.current.index].y}
                        onChange={e=>{ const v=Number(e.target.value); const i=selectedRef.current!.index!; setEmitters(prev=> prev.map((p,pi)=> pi===i? { ...p, y:v }: p)) }} />
                      <span style={{ minWidth:48, textAlign:'right', color:'#e6eef8' }}>{emitters[selectedRef.current.index].y.toFixed(2)}</span>
                    </label>
                    <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                      Moč dima (točk/s)
                      <input type="range" min={0} max={60} step={1} value={emitters[selectedRef.current.index].rate}
                        onChange={e=>{ const v=Number(e.target.value); const i=selectedRef.current!.index!; setEmitters(prev=> prev.map((p,pi)=> pi===i? { ...p, rate:v }: p)) }} />
                      <span style={{ minWidth:48, textAlign:'right', color:'#e6eef8' }}>{emitters[selectedRef.current.index].rate.toFixed(0)}</span>
                    </label>
                  </>
                )}
              </div>
            )}
            <div style={{ display:'flex', gap:6, flexWrap:'wrap' }}>
              <button className="btn-ghost" onClick={()=>setEmitMode(m=> m==='preset'?'click':'preset')}>{emitMode==='preset'?'Način: klik':'Način: predloge'}</button>
              <button className="btn-ghost" onClick={()=>setSupplies(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:2.95, z:(Math.random()-0.5)*2, speed:0.35 }])}>+ Dovod</button>
              <button className="btn-ghost" onClick={()=>setExhausts(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:0.2, z:(Math.random()-0.5)*2, speed:0.35 }])}>+ Odvod</button>
              <button className="btn-ghost" onClick={()=>setObstacles(prev=>[...prev,{ x:(Math.random()-0.5)*2.2, z:(Math.random()-0.5)*1.8, w:0.9, h:0.7, d:0.7 }])}>+ Oprema</button>
              <button className="btn-ghost" onClick={()=>setDoorOpen(o=>!o)}>{doorOpen?'Zapri vrata':'Odpri vrata'}</button>
            </div>
            <div style={{ display:'flex', gap:6, flexWrap:'wrap' }}>
              {emitMode==='preset' && (
                <>
                  <button className="btn-ghost" onClick={()=>setEmitters([{x:-1.8, y:0.4, z:-0.8, rate:24, label:'T1'},{x:-1.3, y:0.4, z:0.6, rate:24, label:'T2'},{x:0.5, y:0.4, z:-1.2, rate:24, label:'T3'},{x:1.6, y:0.4, z:0.3, rate:24, label:'T4'}])}>Predloga 1</button>
                  <button className="btn-ghost" onClick={()=>setEmitters([{x:-1.3, y:0.4, z:0.0, rate:30, label:'Centr'},{x:1.3, y:0.4, z:0.0, rate:30, label:'Desno'}])}>Predloga 2</button>
                  <button className="btn-ghost" onClick={()=>setEmitters([{x:0, y:0.4, z:0, rate:36, label:'Sredin'}])}>1 emitr</button>
                </>
              )}
              <button className="btn-ghost" onClick={()=>setEmitters([])}>Počisti izpuste</button>
            </div>
            <div style={{ display:'flex', gap:6, flexWrap:'wrap', alignItems:'center' }}>
              <label style={{ display:'flex', alignItems:'center', gap:6 }}>
                <input type="checkbox" checked={udfCeiling} onChange={e=>setUdfCeiling(e.target.checked)} /> UDF strop
              </label>
              {udfCeiling && (
                <label style={{ display:'flex', alignItems:'center', gap:6 }}>UDF (m/s)
                  <input type="range" min={0} max={0.85} step={0.01} value={udfSpeed} onChange={e=>setUdfSpeed(Number(e.target.value))} />
                  <span style={{ color:'#e6eef8', fontWeight:700 }}>{udfSpeed.toFixed(2)}</span>
                </label>
              )}
            </div>
            <div style={{ display:'flex', gap:6, flexWrap:'wrap' }}>
              <button className="btn-ghost" onClick={()=>{
                if (personActive) { setPersonActive(false); return }
                setPersonActive(true)
                personPathIndexRef.current = 0
                const interval = setInterval(()=>{
                  setPersonPos(curr=>{
                    const target = personPathRef.current[personPathIndexRef.current]
                    if (!target) { clearInterval(interval); setPersonActive(false); return curr }
                    const dx = target.x - curr.x, dz = target.z - curr.z
                    const dist = Math.hypot(dx,dz)
                    const stepLen = 0.06
                    if (dist < stepLen){
                      personPathIndexRef.current++
                      if (personPathIndexRef.current === personPathRef.current.length){ setDoorOpen(true); setTimeout(()=> setDoorOpen(false), 3000); clearInterval(interval); setPersonActive(false); return target }
                      return target
                    } else {
                      const next = { x: curr.x + (dx/dist)*stepLen, y: 1.0 + Math.sin(Date.now()/200)*0.01, z: curr.z + (dz/dist)*stepLen }
                      prevPersonPosRef.current = curr
                      return next
                    }
                  })
                }, 50)
              }}>{personActive? 'Ustavi osebo' : 'Oseba hodi'}</button>
              <button className="btn-ghost" onClick={()=> setShowVectors(v=>!v)}>{showVectors?'Skrij vektorje':'Pokaži vektorje'}</button>
              <button className="btn-ghost" onClick={()=> setShowStagnation(v=>!v)}>{showStagnation?'Skrij stagnacijo':'Pokaži stagnacijo'}</button>
              <button className="btn-ghost" onClick={()=> setShowVortices(v=>!v)}>{showVortices?'Skrij vrtince':'Pokaži vrtince'}</button>
            </div>
            <div style={{ display:'flex', gap:6, flexWrap:'wrap' }}>
              <button className="btn-ghost" onClick={()=> selectedRef.current && (selectedRef.current as any) && (selectedRef.current.type) && (function(){ const s=selectedRef.current!; if(s.type==='supply'&&s.index!=null) setSupplies(p=>p.filter((_,i)=>i!==s.index)); else if(s.type==='exhaust'&&s.index!=null) setExhausts(p=>p.filter((_,i)=>i!==s.index)); else if(s.type==='obstacle'&&s.index!=null) setObstacles(p=>p.filter((_,i)=>i!==s.index)); else if(s.type==='emitter'&&s.index!=null) setEmitters(p=>p.filter((_,i)=>i!==s.index)); selectedRef.current=null })()}>🗑️ Odstrani</button>
              <button className="btn-ghost" onClick={()=>{ setEmitters([]); setSupplies([]); setExhausts([]); setObstacles([]) }}>🧹 Počisti vse</button>
            </div>
          </div>
        )}
      </div>
      <div style={{ display:'grid', gap:12 }}>
        <div style={{ color:'#e6eef8', fontWeight:800, fontSize:18 }}>Protokol dimnega testa</div>
        <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(180px,1fr))', gap:8 }}>
          {[1,2,3,4,5].map(n => (
            <button key={n} className="btn-ghost" style={{ border: step===n? '2px solid #60a5fa':'1px solid rgba(255,255,255,0.1)', borderRadius:8, padding:'8px 10px', color:'#e6eef8' }} onClick={()=>setStep(n as any)}>
              {n}. {n===1?'Priprava':n===2?'Izpust dima':n===3?'Opazovanje':n===4?'Dokumentacija':'Analiza'}
            </button>
          ))}
        </div>

        {step===1 && (
          <div style={{ background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12 }}>
            <div style={{ color:'#94a3b8', marginBottom:8 }}>HEPA filtri naj delujejo vsaj 30 min pred testom.</div>
            <div style={{ display:'flex', alignItems:'center', gap:12 }}>
              <div style={{ fontSize:24, fontWeight:800, color:'#e6eef8' }}>{Math.floor(prepSecondsLeft/60)}:{String(prepSecondsLeft%60).padStart(2,'0')}</div>
              <label>Pospešek časa
                <input type="range" min={1} max={120} value={timescale} onChange={e=>setTimescale(Number(e.target.value))} />
              </label>
              <button className="btn-primary" onClick={()=>setPlaying(p=>!p)}>{playing?'⏸️ Premor':'▶️ Nadaljuj'}</button>
              <button className="btn-ghost" onClick={()=>{setPrepSecondsLeft(0); setStep(2)}}>Preskoči →</button>
            </div>
          </div>
        )}

        {step===2 && (
          <div style={{ background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12, display:'grid', gap:10 }}>
            <div style={{ color:'#e6eef8', fontWeight:700 }}>Točke izpusta dima</div>
            <div style={{ display:'flex', flexWrap:'wrap', gap:8 }}>
              {presets.map((p,i)=> (
                <button key={i} className="btn-ghost" onClick={()=>addPreset(i)}>+ {p.label}</button>
              ))}
              <button className="btn-ghost" onClick={()=>setEmitMode(m=> m==='preset'?'click':'preset')}>{emitMode==='preset'?'Način: klik po sceni':'Način: predloge'}</button>
              <button className="btn-ghost" onClick={clearEmitters}>Počisti izpuste</button>
              <button className="btn-ghost" onClick={removeSelected}>🗑️ Odstrani izbrano</button>
              <button className="btn-ghost" onClick={clearAll}>🧹 Počisti vse</button>
            </div>
            <div style={{ color:'#94a3b8', fontSize:12 }}>Namig: v načinu “klik” kliknite v sceno, da dodate izpust dima na poljubnem mestu (y≈0.4 m).</div>
            <div style={{ marginTop:8, display:'grid', gap:8 }}>
              <div style={{ color:'#e6eef8', fontWeight:700 }}>Urejanje elementov (HVAC)</div>
              <div style={{ display:'flex', gap:8, flexWrap:'wrap' }}>
                <button className="btn-ghost" onClick={()=>setSupplies(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:2.95, z:(Math.random()-0.5)*2, speed:0.35 }])}>+ Dovod</button>
                <button className="btn-ghost" onClick={()=>setExhausts(prev=>[...prev,{ x:(Math.random()-0.5)*2.5, y:0.2, z:(Math.random()-0.5)*2, speed:0.35 }])}>+ Odvod</button>
                <button className="btn-ghost" onClick={()=>setObstacles(prev=>[...prev,{ x:(Math.random()-0.5)*2.2, z:(Math.random()-0.5)*1.8, w:0.9, h:0.7, d:0.7 }])}>+ Oprema</button>
                <button className="btn-ghost" onClick={()=>setDoorOpen(o=>!o)}>{doorOpen?'Zapri vrata':'Odpri vrata'}</button>
              </div>
              <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(220px,1fr))', gap:8 }}>
                <label style={{ display:'flex', alignItems:'center', gap:8 }}>
                  <input type="checkbox" checked={udfCeiling} onChange={e=>setUdfCeiling(e.target.checked)} /> UDF strop (cel strop dovod)
                </label>
                {udfCeiling && (
                  <label>Hitrost UDF (m/s)
                    <input type="range" min={0} max={0.85} step={0.01} value={udfSpeed} onChange={e=>setUdfSpeed(Number(e.target.value))} />
                    <div style={{ color:'#e6eef8', fontWeight:700 }}>{udfSpeed.toFixed(2)} m/s</div>
                  </label>
                )}
              </div>
                <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(200px,1fr))', gap:8 }}>
                  <label>Odprtost vrat
                    <input type="range" min={0} max={1} step={0.05} value={doorOpenFrac} onChange={e=>setDoorOpenFrac(Number(e.target.value))} />
                  </label>
                  <label>Tok iz hodnika
                    <input type="range" min={0} max={2} step={0.05} value={corridorFlow} onChange={e=>setCorridorFlow(Number(e.target.value))} />
                  </label>
                </div>
              <div style={{ display:'flex', gap:12, alignItems:'center', flexWrap:'wrap' }}>
                <label><input type="radio" name="editmode" checked={editMode==='emitters'} onChange={()=>setEditMode('emitters')} /> Urejanje izpustov dima</label>
                <label><input type="radio" name="editmode" checked={editMode==='hvac'} onChange={()=>setEditMode('hvac')} /> Urejanje dovod/odvod/opreme</label>
                <label><input type="radio" name="editmode" checked={editMode==='person'} onChange={()=>setEditMode('person')} /> Premik osebe</label>
              </div>
                <div style={{ display:'grid', gap:6 }}>
                  <div style={{ color:'#94a3b8' }}>Nastavitve hitrosti (m/s) za elemente:</div>
                  <div style={{ display:'flex', gap:12, flexWrap:'wrap' }}>
                    {supplies.map((s,i)=> (
                      <label key={`s-${i}`} style={{ background:'rgba(96,165,250,0.08)', border:'1px solid rgba(96,165,250,0.25)', padding:'6px 8px', borderRadius:8, display:'flex', alignItems:'center', gap:8, flexWrap:'wrap' }}>
                        <span>Dovod #{i+1} hitrost (m/s)</span>
                        <input type="range" min={0} max={0.85} step={0.01} value={s.speed} onChange={e=>{
                          const v=Number(e.target.value); setSupplies(prev=> prev.map((p,pi)=> pi===i? { ...p, speed:v }: p))
                        }} />
                        <div style={{ minWidth:52, textAlign:'right', color:'#e6eef8' }}>{s.speed.toFixed(2)}</div>
                        <span>Višina (m)</span>
                        <input type="range" min={0.1} max={3} step={0.01} value={s.y} onChange={e=>{
                          const v=Number(e.target.value); setSupplies(prev=> prev.map((p,pi)=> pi===i? { ...p, y:v }: p))
                        }} />
                        <div style={{ minWidth:52, textAlign:'right', color:'#e6eef8' }}>{s.y.toFixed(2)}</div>
                        <button className="btn-ghost" onClick={()=> setSupplies(prev=> prev.filter((_,pi)=> pi!==i))}>✖</button>
                      </label>
                    ))}
                    {exhausts.map((e,i)=> (
                      <label key={`e-${i}`} style={{ background:'rgba(239,68,68,0.06)', border:'1px solid rgba(239,68,68,0.25)', padding:'6px 8px', borderRadius:8, display:'flex', alignItems:'center', gap:8, flexWrap:'wrap' }}>
                        <span>Odvod #{i+1} hitrost (m/s)</span>
                        <input type="range" min={0} max={0.85} step={0.01} value={e.speed} onChange={ev=>{
                          const v=Number((ev.target as HTMLInputElement).value); setExhausts(prev=> prev.map((p,pi)=> pi===i? { ...p, speed:v }: p))
                        }} />
                        <div style={{ minWidth:52, textAlign:'right', color:'#e6eef8' }}>{e.speed.toFixed(2)}</div>
                        <span>Višina (m)</span>
                        <input type="range" min={0.1} max={3} step={0.01} value={e.y} onChange={ev=>{
                          const v=Number((ev.target as HTMLInputElement).value); setExhausts(prev=> prev.map((p,pi)=> pi===i? { ...p, y:v }: p))
                        }} />
                        <div style={{ minWidth:52, textAlign:'right', color:'#e6eef8' }}>{e.y.toFixed(2)}</div>
                        <button className="btn-ghost" onClick={()=> setExhausts(prev=> prev.filter((_,pi)=> pi!==i))}>✖</button>
                      </label>
                    ))}
                    {obstacles.map((o,i)=> (
                      <label key={`o-${i}`} style={{ background:'rgba(245,158,11,0.08)', border:'1px solid rgba(245,158,11,0.25)', padding:'6px 8px', borderRadius:8, display:'flex', alignItems:'center', gap:8 }}>
                        Oprema #{i+1}
                        <button className="btn-ghost" onClick={()=> setObstacles(prev=> prev.filter((_,pi)=> pi!==i))}>✖</button>
                      </label>
                    ))}
                  </div>
                </div>
            </div>
          </div>
        )}

        {step===3 && (
          <div style={{ background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12, display:'grid', gap:8 }}>
            <div style={{ color:'#e6eef8', fontWeight:700 }}>Opazovanje</div>
            <div style={{ display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(180px,1fr))', gap:8 }}>
              <label><input type="checkbox" checked={showVectors} onChange={e=>setShowVectors(e.target.checked)} /> Vektorji toka</label>
              <label><input type="checkbox" checked={showStagnation} onChange={e=>setShowStagnation(e.target.checked)} /> Stagnacija (heatmap)</label>
              <label><input type="checkbox" checked={showVortices} onChange={e=>setShowVortices(e.target.checked)} /> Vrtinci (curl)</label>
            </div>
            <div style={{ color:'#94a3b8', fontSize:12 }}>Opazujte smer, hitrost, vrtince in zastajanje dima na kritičnih točkah.</div>
            <div style={{ display:'flex', gap:8, flexWrap:'wrap' }}>
              <button className="btn-ghost" onClick={()=>{
                if (personActive) { setPersonActive(false); return }
                // start simple path animation including door
                setPersonActive(true)
                personPathIndexRef.current = 0
                const interval = setInterval(()=>{
                  setPersonPos(curr=>{
                    const target = personPathRef.current[personPathIndexRef.current]
                    if (!target) { clearInterval(interval); setPersonActive(false); return curr }
                    const dx = target.x - curr.x, dz = target.z - curr.z
                    const dist = Math.hypot(dx,dz)
                    const stepLen = 0.06
                    if (dist < stepLen){
                      personPathIndexRef.current++
                      // at door open
                      if (personPathIndexRef.current === personPathRef.current.length){
                        setDoorOpen(true)
                        setTimeout(()=> setDoorOpen(false), 3000)
                        clearInterval(interval); setPersonActive(false)
                        return target
                      }
                      return target
                    } else {
                      const next = { x: curr.x + (dx/dist)*stepLen, y: 1.0 + Math.sin(Date.now()/200)*0.01, z: curr.z + (dz/dist)*stepLen }
                      prevPersonPosRef.current = curr
                      return next
                    }
                  })
                }, 50)
              }}>{personActive? 'Ustavi hojo osebe' : 'Zaženi simulacijo osebe (odpre vrata)'}</button>
            </div>
          </div>
        )}

        {step===4 && (
          <div style={{ background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12, display:'grid', gap:8 }}>
            <div style={{ color:'#e6eef8', fontWeight:700 }}>Dokumentacija</div>
            <div style={{ display:'flex', gap:8, flexWrap:'wrap' }}>
              <button className="btn-primary" onClick={toggleRecording}>{recording ? '⏹️ Stop & Save' : '⏺️ Začni snemanje'}</button>
              <button className="btn-ghost" onClick={snapshot}>📸 Snapshot</button>
            </div>
            <label>Opombe
              <textarea value={notes} onChange={e=>setNotes(e.target.value)} rows={4} placeholder="Zabeležite opažanja, npr. vrtinci ob mizi, stagnacija levo od opreme ..." />
            </label>
            <button className="btn-ghost" onClick={()=>{
              const data = { timestamp: new Date().toISOString(), emitters, notes, overlays:{showVectors,showStagnation,showVortices} }
              const blob = new Blob([JSON.stringify(data,null,2)], {type:'application/json'})
              const url = URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='smoke-test-log.json'; a.click(); URL.revokeObjectURL(url)
            }}>⬇️ Izvozi zapis (JSON)</button>
          </div>
        )}

        {step===5 && (
          <div style={{ background:'rgba(255,255,255,0.04)', border:'1px solid rgba(255,255,255,0.08)', borderRadius:10, padding:12, display:'grid', gap:8 }}>
            <div style={{ color:'#e6eef8', fontWeight:700 }}>Analiza in korektivni ukrepi</div>
            <ul style={{ margin:0, paddingLeft:18, color:'#cbd5e1' }}>
              {analyze().map((s,i)=>(<li key={i}>{s}</li>))}
            </ul>
            <div style={{ color:'#94a3b8', fontSize:12 }}>Načrtujte: premik opreme, prilagoditev dovoda/odvoda, razbremenitev kritičnih con, spremembe difuzorjev.</div>
          </div>
        )}
      </div>
    </div>
  )
}

// LESSON 111 - Vizualizacija pretoka zraka
function Lesson111VisualizationSelector() {
  return (
    <LazyVisualizationSelector
      visualizations={[
        {
          id: 'airflow-showcase',
          name: '🌬️ Vizualni pregled pretoka zraka',
          description: 'Vnaprej vodeni prizori brez interakcije: laminarni tok, turbulenca, ovire, recovery, dimni test, vzdrževanje',
          component: <AirflowShowcase />
        },
        {
          id: 'airflow-3d-realistic',
          name: '🧪 Interaktivna 3D simulacija pretoka',
          description: 'Realističen 3D prikaz z delci, ovirami in dogodki (odpiranje vrat). Preizkusi scenarije in sonde.',
          component: <Airflow3DRealisticSimulator />
        },
        {
          id: 'airflow-scenario-lab',
          name: '🧩 Scenario Lab (HVAC)',
          description: 'Simulacije napačnih nastavitev: dovod/odvod, postavitev opreme, prezasedenost, zamašen filter; laminarno/turbulentno.',
          component: <AirflowScenarioLab />
        },
        {
          id: 'smoke-test-protocol',
          name: '💨 Protokol dimnega testa',
          description: 'Priprava → Izpust dima → Opazovanje → Dokumentacija → Analiza; 3D vizualizacija z beleženjem.',
          component: <SmokeTestProtocol3D />
        }
      ]}
      accentColor="#22c55e"
      accentColorLight="#16a34a"
      accentColorVeryLight="#86efac"
    />
  )
}

// ============================================================================
// LESSON 115 - CCP IN OBVLADOVANJE TVEGANJ COMPONENTS
// ============================================================================

// 3D Risk Matrix Component using Three.js
interface RiskMatrix3DProps {
  risks: Array<{id: number, name: string, severity: number, probability: number, category: string, x: number, y: number}>;
  onSelectRisk: (id: number) => void;
  selectedRisk: number | null;
}

const RiskMatrix3D: React.FC<RiskMatrix3DProps> = ({ risks, onSelectRisk, selectedRisk }) => {
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef<THREE.Scene | null>(null);
  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);
  const controlsRef = useRef<any>(null);
  const riskObjectsRef = useRef<Array<{mesh: THREE.Mesh, id: number}>>([]);

  const getRiskColor = (severity: number, probability: number) => {
    const rpn = severity * probability;
    if (rpn >= 15) return 0xef4444;
    if (rpn >= 9) return 0xf59e0b;
    if (rpn >= 4) return 0xfbbf24;
    return 0x10b981;
  };

  useEffect(() => {
    if (!mountRef.current) return;

    // Scene setup
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x0a0a0a);
    sceneRef.current = scene;

    // Camera setup
    const camera = new THREE.PerspectiveCamera(
      75,
      mountRef.current.clientWidth / 500,
      0.1,
      1000
    );

// Removed misplaced disinfection components that were accidentally inserted here.
  camera.position.set(8, 8, 8);
    camera.lookAt(2.5, 2.5, 0);
    cameraRef.current = camera;

    // Renderer setup
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(mountRef.current.clientWidth, 500);
    mountRef.current.appendChild(renderer.domElement);
    rendererRef.current = renderer;

    // OrbitControls
  const controls = new OrbitControls(camera as any, renderer.domElement as any);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.target.set(2.5, 2.5, 0);
    controlsRef.current = controls;

    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(10, 10, 10);
    scene.add(directionalLight);

    // Create grid base with color zones
    const gridSize = 5;
    for (let x = 0; x < 5; x++) {
      for (let z = 0; z < 5; z++) {
        const rpn = (x + 1) * (z + 1);
        let color = 0x10b981; // Green
        if (rpn >= 15) color = 0xef4444; // Red
        else if (rpn >= 9) color = 0xf59e0b; // Orange
        else if (rpn >= 4) color = 0xfbbf24; // Yellow

        const tileGeometry = new THREE.PlaneGeometry(1, 1);
        const tileMaterial = new THREE.MeshBasicMaterial({ 
          color, 
          transparent: true, 
          opacity: 0.2,
          side: THREE.DoubleSide
        });
        const tile = new THREE.Mesh(tileGeometry, tileMaterial);
        tile.rotation.x = -Math.PI / 2;
        tile.position.set(x + 0.5, 0, z + 0.5);
        scene.add(tile);
      }
    }

    // Create risk spheres
    riskObjectsRef.current = [];
    risks.forEach(risk => {
      const geometry = new THREE.SphereGeometry(0.3, 32, 32);
      const material = new THREE.MeshStandardMaterial({
        color: getRiskColor(risk.severity, risk.probability),
        emissive: getRiskColor(risk.severity, risk.probability),
        metalness: 0.5,
        roughness: 0.5
      });
      (material as any).emissiveIntensity = 0.3;
      
      const sphere = new THREE.Mesh(geometry, material);
      sphere.position.set(risk.x, risk.severity / 2, risk.y);
      (sphere as any).userData = { id: risk.id, animate: null };
      scene.add(sphere);
      
      riskObjectsRef.current.push({ mesh: sphere, id: risk.id });

      // Add pulsing animation
      const animateFn = () => {
        const time = Date.now() * 0.001;
        sphere.scale.setScalar(1 + Math.sin(time * 2 + risk.id) * 0.1);
      };
      (sphere as any).userData.animate = animateFn;
    });

    // Raycaster for click detection
    const raycaster = new (THREE as any).Raycaster();
    const mouse = new THREE.Vector3(); // Using Vector3 instead of Vector2

    const onMouseClick = (event: MouseEvent) => {
      const rect = renderer.domElement.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
      mouse.z = 0;

      (raycaster as any).setFromCamera({ x: mouse.x, y: mouse.y }, camera);
      const intersects = (raycaster as any).intersectObjects(riskObjectsRef.current.map(r => r.mesh));

      if (intersects.length > 0) {
        const clickedObject = intersects[0].object;
        const riskData = riskObjectsRef.current.find(r => r.mesh === clickedObject);
        if (riskData) {
          onSelectRisk(riskData.id);
        }
      }
    };

    renderer.domElement.addEventListener('click', onMouseClick);

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      
      controls.update();
      
      // Animate risk spheres
      riskObjectsRef.current.forEach(({ mesh }) => {
        const userData = (mesh as any).userData;
        if (userData && userData.animate) {
          userData.animate();
        }
      });
      
      renderer.render(scene, camera);
    };
    animate();

    // Cleanup
    return () => {
      renderer.domElement.removeEventListener('click', onMouseClick);
      if (mountRef.current && renderer.domElement.parentNode === mountRef.current) {
        mountRef.current.removeChild(renderer.domElement);
      }
      renderer.dispose();
    };
  }, [risks, onSelectRisk]);

  // Update selection highlight
  useEffect(() => {
    riskObjectsRef.current.forEach(({ mesh, id }) => {
      const material = mesh.material as THREE.MeshStandardMaterial;
      if (id === selectedRisk) {
        (material as any).emissiveIntensity = 0.8;
        mesh.scale.setScalar(1.3);
      } else {
        (material as any).emissiveIntensity = 0.3;
        mesh.scale.setScalar(1);
      }
    });
  }, [selectedRisk]);

  return (
    <div style={{ position: 'relative' }}>
      <div ref={mountRef} style={{ width: '100%', height: 500, borderRadius: 10, overflow: 'hidden' }} />
      <div style={{ position: 'absolute', top: 10, left: 10, background: 'rgba(0,0,0,0.7)', padding: 10, borderRadius: 8, fontSize: 12 }}>
        <div style={{ marginBottom: 5 }}>🖱️ Click sphere to select</div>
        <div style={{ marginBottom: 5 }}>🔄 Drag to rotate</div>
        <div>🔍 Scroll to zoom</div>
      </div>
      <div style={{ position: 'absolute', bottom: 10, right: 10, background: 'rgba(0,0,0,0.7)', padding: 10, borderRadius: 8, fontSize: 11 }}>
        <div>X-axis: Probability →</div>
        <div>Z-axis: Severity →</div>
        <div>Y-axis (Height): Severity</div>
      </div>
    </div>
  );
};

// 1. Interactive Risk Matrix 2D/3D
const InteractiveRiskMatrix: React.FC = () => {
  const [mode, setMode] = useState<'2D' | '3D'>('2D');
  const [risks, setRisks] = useState([
    { id: 1, name: 'HEPA Filter Failure', severity: 5, probability: 2, category: 'Equipment', x: 2, y: 5 },
    { id: 2, name: 'Operator Error', severity: 4, probability: 4, category: 'Human', x: 4, y: 4 },
    { id: 3, name: 'Power Outage', severity: 5, probability: 1, category: 'Utility', x: 1, y: 5 },
    { id: 4, name: 'Contamination', severity: 5, probability: 3, category: 'Process', x: 3, y: 5 },
    { id: 5, name: 'Documentation Error', severity: 2, probability: 3, category: 'Documentation', x: 3, y: 2 },
    { id: 6, name: 'Material Mix-up', severity: 5, probability: 2, category: 'Material', x: 2, y: 5 },
    { id: 7, name: 'Training Gap', severity: 3, probability: 4, category: 'Human', x: 4, y: 3 },
    { id: 8, name: 'Pressure Drop', severity: 4, probability: 2, category: 'HVAC', x: 2, y: 4 }
  ]);
  const [draggedRisk, setDraggedRisk] = useState<number | null>(null);
  const [selectedRisk, setSelectedRisk] = useState<number | null>(null);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const getRiskColor = (severity: number, probability: number) => {
    const rpn = severity * probability;
    if (rpn >= 15) return '#ef4444';
    if (rpn >= 9) return '#f59e0b';
    if (rpn >= 4) return '#fbbf24';
    return '#10b981';
  };

  const getRiskZone = (severity: number, probability: number) => {
    const rpn = severity * probability;
    if (rpn >= 15) return 'KRITIČNO';
    if (rpn >= 9) return 'VISOKO';
    if (rpn >= 4) return 'SREDNJE';
    return 'NIZKO';
  };

  const handleDragStart = (riskId: number) => {
    setDraggedRisk(riskId);
  };

  const handleDrop = (newX: number, newY: number) => {
    if (draggedRisk !== null) {
      setRisks(risks.map(r => 
        r.id === draggedRisk 
          ? { ...r, x: newX, y: newY, probability: newX, severity: newY }
          : r
      ));
      setDraggedRisk(null);
    }
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current?.requestFullscreen();
      setIsFullscreen(true);
    } else {
      document.exitFullscreen();
      setIsFullscreen(false);
    }
  };

  const selectedRiskData = risks.find(r => r.id === selectedRisk);

  return (
    <div ref={containerRef} style={{ padding: 20, background: 'linear-gradient(135deg, #1e1b4b 0%, #312e81 100%)', borderRadius: 20, color: 'white', minHeight: 600 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
        <h2 style={{ margin: 0, fontSize: 28, fontWeight: 'bold' }}>🎲 Interactive Risk Matrix</h2>
        <div style={{ display: 'flex', gap: 10 }}>
          <button
            onClick={() => setMode(mode === '2D' ? '3D' : '2D')}
            style={{ padding: '10px 20px', background: '#6366f1', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer', fontWeight: 'bold' }}
          >
            {mode === '2D' ? '🎬 Switch to 3D' : '📊 Switch to 2D'}
          </button>
          <button onClick={toggleFullscreen} style={{ padding: '10px 20px', background: '#8b5cf6', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer' }}>
            ⛶ Fullscreen
          </button>
        </div>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: selectedRisk ? '2fr 1fr' : '1fr', gap: 20 }}>
        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 15 }}>
            <h3 style={{ margin: 0 }}>Risk Matrix ({mode})</h3>
            <div style={{ fontSize: 12, opacity: 0.7 }}>💡 Drag & Drop tveganja za spremembo pozicije</div>
          </div>
          
          {mode === '2D' ? (
            <div style={{ position: 'relative', width: '100%', aspectRatio: '1/1', background: 'rgba(0,0,0,0.3)', borderRadius: 10 }}>
              <svg width="100%" height="100%" style={{ position: 'absolute', top: 0, left: 0 }}>
                {[1, 2, 3, 4, 5].map(i => (
                  <React.Fragment key={i}>
                    <line x1={`${i * 20}%`} y1="0" x2={`${i * 20}%`} y2="100%" stroke="rgba(255,255,255,0.1)" strokeWidth="1" />
                    <line x1="0" y1={`${100 - i * 20}%`} x2="100%" y2={`${100 - i * 20}%`} stroke="rgba(255,255,255,0.1)" strokeWidth="1" />
                  </React.Fragment>
                ))}
                
                <defs>
                  <linearGradient id="riskGradient" x1="0%" y1="100%" x2="100%" y2="0%">
                    <stop offset="0%" stopColor="#10b981" stopOpacity="0.2" />
                    <stop offset="33%" stopColor="#fbbf24" stopOpacity="0.2" />
                    <stop offset="66%" stopColor="#f59e0b" stopOpacity="0.2" />
                    <stop offset="100%" stopColor="#ef4444" stopOpacity="0.3" />
                  </linearGradient>
                </defs>
                <rect width="100%" height="100%" fill="url(#riskGradient)" />
              </svg>

              <div style={{ position: 'absolute', bottom: -30, left: '50%', transform: 'translateX(-50%)', fontWeight: 'bold', fontSize: 14 }}>
                Verjetnost (Probability) →
              </div>
              <div style={{ position: 'absolute', left: -80, top: '50%', transform: 'translateY(-50%) rotate(-90deg)', fontWeight: 'bold', fontSize: 14 }}>
                Resnost (Severity) →
              </div>

              {risks.map(risk => (
                <motion.div
                  key={risk.id}
                  draggable
                  onDragStart={() => handleDragStart(risk.id)}
                  onClick={() => setSelectedRisk(risk.id)}
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.95 }}
                  style={{
                    position: 'absolute',
                    left: `${(risk.x / 5) * 100}%`,
                    bottom: `${(risk.y / 5) * 100}%`,
                    width: 40,
                    height: 40,
                    background: getRiskColor(risk.severity, risk.probability),
                    border: selectedRisk === risk.id ? '3px solid white' : '2px solid rgba(255,255,255,0.5)',
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    cursor: 'grab',
                    fontWeight: 'bold',
                    fontSize: 16,
                    transform: 'translate(-50%, 50%)',
                    boxShadow: '0 4px 12px rgba(0,0,0,0.3)'
                  }}
                  title={risk.name}
                >
                  {risk.id}
                </motion.div>
              ))}

              {[1, 2, 3, 4, 5].map(y => 
                [1, 2, 3, 4, 5].map(x => (
                  <div
                    key={`${x}-${y}`}
                    onDragOver={(e) => e.preventDefault()}
                    onDrop={() => handleDrop(x, y)}
                    style={{
                      position: 'absolute',
                      left: `${((x - 0.5) / 5) * 100}%`,
                      bottom: `${((y - 0.5) / 5) * 100}%`,
                      width: '20%',
                      height: '20%',
                      transform: 'translate(-50%, 50%)',
                      pointerEvents: draggedRisk !== null ? 'auto' : 'none'
                    }}
                  />
                ))
              )}
            </div>
          ) : (
            <RiskMatrix3D risks={risks} onSelectRisk={setSelectedRisk} selectedRisk={selectedRisk} />
          )}

          <div style={{ marginTop: 20, display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 10 }}>
            {[
              { zone: 'NIZKO', color: '#10b981', rpn: '1-3' },
              { zone: 'SREDNJE', color: '#fbbf24', rpn: '4-8' },
              { zone: 'VISOKO', color: '#f59e0b', rpn: '9-14' },
              { zone: 'KRITIČNO', color: '#ef4444', rpn: '15-25' }
            ].map(item => (
              <div key={item.zone} style={{ background: 'rgba(0,0,0,0.3)', padding: 10, borderRadius: 8, textAlign: 'center' }}>
                <div style={{ width: 20, height: 20, background: item.color, borderRadius: '50%', margin: '0 auto 5px' }} />
                <div style={{ fontWeight: 'bold', fontSize: 12 }}>{item.zone}</div>
                <div style={{ fontSize: 10, opacity: 0.6 }}>RPN: {item.rpn}</div>
              </div>
            ))}
          </div>
        </div>

        {selectedRiskData && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: 15 }}>
              <h3 style={{ margin: 0 }}>Risk Details</h3>
              <button
                onClick={() => setSelectedRisk(null)}
                style={{ background: 'transparent', border: 'none', color: 'white', fontSize: 20, cursor: 'pointer' }}
              >
                ✕
              </button>
            </div>

            <div style={{ marginBottom: 20 }}>
              <div style={{ 
                width: 60, 
                height: 60, 
                background: getRiskColor(selectedRiskData.severity, selectedRiskData.probability),
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 24,
                fontWeight: 'bold',
                margin: '0 auto 10px'
              }}>
                {selectedRiskData.id}
              </div>
              <div style={{ textAlign: 'center', fontSize: 18, fontWeight: 'bold', marginBottom: 5 }}>
                {selectedRiskData.name}
              </div>
              <div style={{ textAlign: 'center', fontSize: 12, opacity: 0.7 }}>
                Category: {selectedRiskData.category}
              </div>
            </div>

            <div style={{ background: 'rgba(0,0,0,0.3)', borderRadius: 10, padding: 15, marginBottom: 15 }}>
              <div style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 10 }}>RPN Calculation:</div>
              <div style={{ display: 'grid', gap: 8 }}>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span>Severity (S):</span>
                  <span style={{ fontWeight: 'bold' }}>{selectedRiskData.severity}</span>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span>Probability (O):</span>
                  <span style={{ fontWeight: 'bold' }}>{selectedRiskData.probability}</span>
                </div>
                <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                  <span>Detection (D):</span>
                  <span style={{ fontWeight: 'bold' }}>5</span>
                </div>
                <div style={{ height: 1, background: 'rgba(255,255,255,0.2)', margin: '5px 0' }} />
                <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: 16, fontWeight: 'bold' }}>
                  <span>RPN (S×O×D):</span>
                  <span style={{ color: getRiskColor(selectedRiskData.severity, selectedRiskData.probability) }}>
                    {selectedRiskData.severity * selectedRiskData.probability * 5}
                  </span>
                </div>
              </div>
            </div>

            <div style={{ 
              background: getRiskColor(selectedRiskData.severity, selectedRiskData.probability) + '20',
              border: `2px solid ${getRiskColor(selectedRiskData.severity, selectedRiskData.probability)}`,
              borderRadius: 10,
              padding: 15,
              textAlign: 'center',
              fontWeight: 'bold'
            }}>
              RISK ZONE: {getRiskZone(selectedRiskData.severity, selectedRiskData.probability)}
            </div>

            <div style={{ marginTop: 20, fontSize: 12, opacity: 0.7, lineHeight: 1.6 }}>
              <div style={{ fontWeight: 'bold', marginBottom: 5 }}>💡 Recommended Actions:</div>
              {getRiskZone(selectedRiskData.severity, selectedRiskData.probability) === 'KRITIČNO' && (
                <div>• Immediate action required<br/>• Stop production if needed<br/>• Implement emergency controls</div>
              )}
              {getRiskZone(selectedRiskData.severity, selectedRiskData.probability) === 'VISOKO' && (
                <div>• Priority mitigation needed<br/>• Develop action plan<br/>• Increase monitoring</div>
              )}
              {getRiskZone(selectedRiskData.severity, selectedRiskData.probability) === 'SREDNJE' && (
                <div>• Regular monitoring<br/>• Review controls<br/>• Consider improvements</div>
              )}
              {getRiskZone(selectedRiskData.severity, selectedRiskData.probability) === 'NIZKO' && (
                <div>• Maintain current controls<br/>• Periodic review<br/>• No immediate action</div>
              )}
            </div>
          </motion.div>
        )}
      </div>

      <div style={{ marginTop: 20, background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}>
        <h3 style={{ margin: '0 0 15px 0' }}>📋 All Risks</h3>
        <div style={{ display: 'grid', gap: 10 }}>
          {risks.sort((a, b) => (b.severity * b.probability) - (a.severity * a.probability)).map(risk => (
            <div
              key={risk.id}
              onClick={() => setSelectedRisk(risk.id)}
              style={{
                background: 'rgba(0,0,0,0.3)',
                padding: 12,
                borderRadius: 8,
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                cursor: 'pointer',
                border: selectedRisk === risk.id ? '2px solid white' : '2px solid transparent',
                transition: 'all 0.2s'
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
                <div style={{
                  width: 30,
                  height: 30,
                  background: getRiskColor(risk.severity, risk.probability),
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontWeight: 'bold'
                }}>
                  {risk.id}
                </div>
                <div>
                  <div style={{ fontWeight: 'bold' }}>{risk.name}</div>
                  <div style={{ fontSize: 11, opacity: 0.6 }}>{risk.category}</div>
                </div>
              </div>
              <div style={{ textAlign: 'right' }}>
                <div style={{ fontSize: 18, fontWeight: 'bold', color: getRiskColor(risk.severity, risk.probability) }}>
                  {risk.severity * risk.probability * 5}
                </div>
                <div style={{ fontSize: 10, opacity: 0.6 }}>RPN</div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

// 2. FMEA Simulator
const FMEASimulator: React.FC = () => {
  const [severity, setSeverity] = useState(5);
  const [occurrence, setOccurrence] = useState(3);
  const [detection, setDetection] = useState(4);
  const [improvedSeverity, setImprovedSeverity] = useState(3);
  const [improvedOccurrence, setImprovedOccurrence] = useState(2);
  const [improvedDetection, setImprovedDetection] = useState(2);
  const [showImproved, setShowImproved] = useState(false);
  const [selectedFailureMode, setSelectedFailureMode] = useState('hepa-filter');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const failureModes = {
    'hepa-filter': {
      name: 'HEPA Filter Failure',
      description: 'HEPA filter develops a leak or becomes saturated',
      effects: 'Particles enter cleanroom → Product contamination',
      causes: ['Filter age', 'Physical damage', 'Installation error', 'Pressure spike'],
      currentControls: ['Regular integrity testing', 'Pressure differential monitoring', 'Visual inspection']
    },
    'operator-error': {
      name: 'Operator Aseptic Technique Failure',
      description: 'Operator breaks aseptic technique during critical operation',
      effects: 'Microbial contamination → Sterility failure',
      causes: ['Inadequate training', 'Fatigue', 'Time pressure', 'Poor ergonomics'],
      currentControls: ['Training program', 'Media fill validation', 'Double-check procedures']
    },
    'power-outage': {
      name: 'Power Supply Interruption',
      description: 'Loss of electrical power to HVAC system',
      effects: 'HEPA filtration stops → Cleanroom grade loss',
      causes: ['Grid failure', 'Equipment failure', 'Maintenance error'],
      currentControls: ['UPS backup', 'Emergency generator', 'Alarm system']
    },
    'contamination': {
      name: 'Raw Material Contamination',
      description: 'Incoming raw material contains microbial contamination',
      effects: 'Contaminated product → Batch rejection',
      causes: ['Supplier quality issue', 'Transport contamination', 'Storage conditions'],
      currentControls: ['Vendor qualification', 'Incoming inspection', 'Certificate of analysis']
    }
  };

  const currentRPN = severity * occurrence * detection;
  const improvedRPN = improvedSeverity * improvedOccurrence * improvedDetection;
  const riskReduction = ((currentRPN - improvedRPN) / currentRPN * 100).toFixed(1);

  const getRPNColor = (rpn: number) => {
    if (rpn >= 200) return '#ef4444';
    if (rpn >= 100) return '#f59e0b';
    if (rpn >= 40) return '#fbbf24';
    return '#10b981';
  };

  const getRPNLevel = (rpn: number) => {
    if (rpn >= 200) return 'CRITICAL';
    if (rpn >= 100) return 'HIGH';
    if (rpn >= 40) return 'MEDIUM';
    return 'LOW';
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current?.requestFullscreen();
      setIsFullscreen(true);
    } else {
      document.exitFullscreen();
      setIsFullscreen(false);
    }
  };

  const selectedMode = failureModes[selectedFailureMode as keyof typeof failureModes];

  return (
    <div ref={containerRef} style={{ padding: 20, background: 'linear-gradient(135deg, #18181b 0%, #27272a 100%)', borderRadius: 20, color: 'white', minHeight: 600 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
        <h2 style={{ margin: 0, fontSize: 28, fontWeight: 'bold' }}>🔍 FMEA Simulator</h2>
        <div style={{ display: 'flex', gap: 10 }}>
          <button
            onClick={() => setShowImproved(!showImproved)}
            style={{ padding: '10px 20px', background: showImproved ? '#10b981' : '#6366f1', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer', fontWeight: 'bold' }}
          >
            {showImproved ? '✓ Show Improvements' : '→ Add Improvements'}
          </button>
          <button onClick={toggleFullscreen} style={{ padding: '10px 20px', background: '#8b5cf6', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer' }}>
            ⛶ Fullscreen
          </button>
        </div>
      </div>

      {/* Failure Mode Selection */}
      <div style={{ marginBottom: 20 }}>
        <h3 style={{ margin: '0 0 10px 0', fontSize: 16 }}>Select Failure Mode:</h3>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 10 }}>
          {Object.entries(failureModes).map(([key, mode]) => (
            <button
              key={key}
              onClick={() => setSelectedFailureMode(key)}
              style={{
                padding: 15,
                background: selectedFailureMode === key ? 'rgba(99, 102, 241, 0.3)' : 'rgba(255,255,255,0.05)',
                border: selectedFailureMode === key ? '2px solid #6366f1' : '2px solid transparent',
                borderRadius: 10,
                color: 'white',
                cursor: 'pointer',
                textAlign: 'left',
                fontWeight: selectedFailureMode === key ? 'bold' : 'normal',
                transition: 'all 0.2s'
              }}
            >
              <div style={{ fontSize: 14, marginBottom: 5 }}>{mode.name}</div>
              <div style={{ fontSize: 11, opacity: 0.6 }}>{mode.description}</div>
            </button>
          ))}
        </div>
      </div>

      {/* Failure Mode Details */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20, marginBottom: 20 }}>
        <h3 style={{ margin: '0 0 15px 0' }}>📋 Failure Mode Details</h3>
        <div style={{ display: 'grid', gap: 15 }}>
          <div>
            <div style={{ fontSize: 12, opacity: 0.6, marginBottom: 5 }}>Effects:</div>
            <div style={{ fontSize: 14 }}>{selectedMode.effects}</div>
          </div>
          <div>
            <div style={{ fontSize: 12, opacity: 0.6, marginBottom: 5 }}>Potential Causes:</div>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>
              {selectedMode.causes.map((cause, i) => (
                <span key={i} style={{ padding: '4px 12px', background: 'rgba(239, 68, 68, 0.2)', borderRadius: 20, fontSize: 12 }}>
                  {cause}
                </span>
              ))}
            </div>
          </div>
          <div>
            <div style={{ fontSize: 12, opacity: 0.6, marginBottom: 5 }}>Current Controls:</div>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}>
              {selectedMode.currentControls.map((control, i) => (
                <span key={i} style={{ padding: '4px 12px', background: 'rgba(16, 185, 129, 0.2)', borderRadius: 20, fontSize: 12 }}>
                  {control}
                </span>
              ))}
            </div>
          </div>
        </div>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: showImproved ? '1fr 1fr' : '1fr', gap: 20 }}>
        {/* Current State */}
        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}>
          <h3 style={{ margin: '0 0 20px 0' }}>Current State</h3>
          
          <div style={{ marginBottom: 25 }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
              <label style={{ fontSize: 14, fontWeight: 'bold' }}>Severity (S) - How serious?</label>
              <span style={{ fontSize: 20, fontWeight: 'bold', color: getRPNColor(currentRPN) }}>{severity}</span>
            </div>
            <input
              type="range"
              min="1"
              max="10"
              value={severity}
              onChange={(e) => setSeverity(Number(e.target.value))}
              style={{ width: '100%', accentColor: getRPNColor(currentRPN) }}
            />
            <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>
              1 = Minor inconvenience | 10 = Patient death
            </div>
          </div>

          <div style={{ marginBottom: 25 }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
              <label style={{ fontSize: 14, fontWeight: 'bold' }}>Occurrence (O) - How often?</label>
              <span style={{ fontSize: 20, fontWeight: 'bold', color: getRPNColor(currentRPN) }}>{occurrence}</span>
            </div>
            <input
              type="range"
              min="1"
              max="10"
              value={occurrence}
              onChange={(e) => setOccurrence(Number(e.target.value))}
              style={{ width: '100%', accentColor: getRPNColor(currentRPN) }}
            />
            <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>
              1 = Extremely rare | 10 = Very frequent
            </div>
          </div>

          <div style={{ marginBottom: 25 }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
              <label style={{ fontSize: 14, fontWeight: 'bold' }}>Detection (D) - How easy to detect?</label>
              <span style={{ fontSize: 20, fontWeight: 'bold', color: getRPNColor(currentRPN) }}>{detection}</span>
            </div>
            <input
              type="range"
              min="1"
              max="10"
              value={detection}
              onChange={(e) => setDetection(Number(e.target.value))}
              style={{ width: '100%', accentColor: getRPNColor(currentRPN) }}
            />
            <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>
              1 = Certain to detect | 10 = Cannot detect
            </div>
          </div>

          <div style={{
            background: `${getRPNColor(currentRPN)}20`,
            border: `3px solid ${getRPNColor(currentRPN)}`,
            borderRadius: 15,
            padding: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 14, opacity: 0.8, marginBottom: 5 }}>RPN = S × O × D</div>
            <div style={{ fontSize: 48, fontWeight: 'bold', color: getRPNColor(currentRPN), marginBottom: 5 }}>
              {currentRPN}
            </div>
            <div style={{ fontSize: 16, fontWeight: 'bold' }}>
              Risk Level: {getRPNLevel(currentRPN)}
            </div>
          </div>
        </div>

        {/* Improved State */}
        {showImproved && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}
          >
            <h3 style={{ margin: '0 0 20px 0', color: '#10b981' }}>After Improvements</h3>
            
            <div style={{ marginBottom: 25 }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
                <label style={{ fontSize: 14, fontWeight: 'bold' }}>Severity (S)</label>
                <span style={{ fontSize: 20, fontWeight: 'bold', color: getRPNColor(improvedRPN) }}>{improvedSeverity}</span>
              </div>
              <input
                type="range"
                min="1"
                max="10"
                value={improvedSeverity}
                onChange={(e) => setImprovedSeverity(Number(e.target.value))}
                style={{ width: '100%', accentColor: getRPNColor(improvedRPN) }}
              />
            </div>

            <div style={{ marginBottom: 25 }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
                <label style={{ fontSize: 14, fontWeight: 'bold' }}>Occurrence (O)</label>
                <span style={{ fontSize: 20, fontWeight: 'bold', color: getRPNColor(improvedRPN) }}>{improvedOccurrence}</span>
              </div>
              <input
                type="range"
                min="1"
                max="10"
                value={improvedOccurrence}
                onChange={(e) => setImprovedOccurrence(Number(e.target.value))}
                style={{ width: '100%', accentColor: getRPNColor(improvedRPN) }}
              />
            </div>

            <div style={{ marginBottom: 25 }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 10 }}>
                <label style={{ fontSize: 14, fontWeight: 'bold' }}>Detection (D)</label>
                <span style={{ fontSize: 20, fontWeight: 'bold', color: getRPNColor(improvedRPN) }}>{improvedDetection}</span>
              </div>
              <input
                type="range"
                min="1"
                max="10"
                value={improvedDetection}
                onChange={(e) => setImprovedDetection(Number(e.target.value))}
                style={{ width: '100%', accentColor: getRPNColor(improvedRPN) }}
              />
            </div>

            <div style={{
              background: `${getRPNColor(improvedRPN)}20`,
              border: `3px solid ${getRPNColor(improvedRPN)}`,
              borderRadius: 15,
              padding: 20,
              textAlign: 'center',
              marginBottom: 15
            }}>
              <div style={{ fontSize: 14, opacity: 0.8, marginBottom: 5 }}>Improved RPN</div>
              <div style={{ fontSize: 48, fontWeight: 'bold', color: getRPNColor(improvedRPN), marginBottom: 5 }}>
                {improvedRPN}
              </div>
              <div style={{ fontSize: 16, fontWeight: 'bold' }}>
                Risk Level: {getRPNLevel(improvedRPN)}
              </div>
            </div>

            <div style={{ background: 'rgba(16, 185, 129, 0.2)', border: '2px solid #10b981', borderRadius: 10, padding: 15, textAlign: 'center' }}>
              <div style={{ fontSize: 14, marginBottom: 5 }}>Risk Reduction:</div>
              <div style={{ fontSize: 32, fontWeight: 'bold', color: '#10b981' }}>
                {riskReduction}%
              </div>
              <div style={{ fontSize: 12, opacity: 0.8 }}>
                {currentRPN} → {improvedRPN} (Δ = {currentRPN - improvedRPN})
              </div>
            </div>
          </motion.div>
        )}
      </div>

      {/* Recommendations */}
      {showImproved && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{ marginTop: 20, background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}
        >
          <h3 style={{ margin: '0 0 15px 0' }}>💡 Recommended Actions to Reduce RPN:</h3>
          <div style={{ display: 'grid', gap: 10 }}>
            <div style={{ padding: 15, background: 'rgba(99, 102, 241, 0.2)', borderRadius: 10, borderLeft: '4px solid #6366f1' }}>
              <div style={{ fontWeight: 'bold', marginBottom: 5 }}>Reduce Severity (S):</div>
              <div style={{ fontSize: 13, opacity: 0.9 }}>• Implement containment measures<br/>• Add redundant systems<br/>• Design fail-safe mechanisms</div>
            </div>
            <div style={{ padding: 15, background: 'rgba(245, 158, 11, 0.2)', borderRadius: 10, borderLeft: '4px solid #f59e0b' }}>
              <div style={{ fontWeight: 'bold', marginBottom: 5 }}>Reduce Occurrence (O):</div>
              <div style={{ fontSize: 13, opacity: 0.9 }}>• Preventive maintenance<br/>• Improved training<br/>• Process controls<br/>• Error-proofing (poka-yoke)</div>
            </div>
            <div style={{ padding: 15, background: 'rgba(16, 185, 129, 0.2)', borderRadius: 10, borderLeft: '4px solid #10b981' }}>
              <div style={{ fontWeight: 'bold', marginBottom: 5 }}>Reduce Detection (D):</div>
              <div style={{ fontSize: 13, opacity: 0.9 }}>• Add sensors and alarms<br/>• Automated monitoring<br/>• Frequent inspections<br/>• Online testing</div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

// 3. CCP Identification Game
const CCPIdentificationGame: React.FC = () => {
  const [selectedCCPs, setSelectedCCPs] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const processSteps = [
    { id: 1, name: 'Raw Material Receipt', isCCP: false, reason: 'Controlled by supplier qualification and COA' },
    { id: 2, name: 'Gowning Procedure', isCCP: true, reason: 'Critical for preventing human contamination - direct impact on sterility' },
    { id: 3, name: 'HEPA Filtration', isCCP: true, reason: 'Critical control for air quality - loss means immediate Grade loss' },
    { id: 4, name: 'Material Transfer to Cleanroom', isCCP: true, reason: 'Critical transfer point - potential contamination introduction' },
    { id: 5, name: 'Equipment Cleaning', isCCP: false, reason: 'Important but verified by swab testing, not real-time critical' },
    { id: 6, name: 'Filling Operation', isCCP: true, reason: 'Direct product exposure - most critical aseptic step' },
    { id: 7, name: 'Container Sealing', isCCP: true, reason: 'Critical for maintaining sterility - defective seal = contamination risk' },
    { id: 8, name: 'Visual Inspection', isCCP: false, reason: 'Quality check, not a control point for sterility' },
    { id: 9, name: 'Sterilization', isCCP: true, reason: 'Terminal sterilization - critical for killing all microorganisms' },
    { id: 10, name: 'Labeling', isCCP: false, reason: 'Important for traceability but not for sterility control' },
    { id: 11, name: 'Pressure Differential Monitoring', isCCP: true, reason: 'Critical indicator of HEPA integrity and air flow direction' },
    { id: 12, name: 'Documentation', isCCP: false, reason: 'Required for compliance but not a direct contamination control' }
  ];

  const correctCCPs = processSteps.filter(step => step.isCCP).map(step => step.id);

  const toggleCCP = (id: number) => {
    if (showResults) return;
    setSelectedCCPs(prev => 
      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]
    );
  };

  const checkAnswers = () => {
    const correct = selectedCCPs.filter(id => correctCCPs.includes(id)).length;
    const incorrect = selectedCCPs.filter(id => !correctCCPs.includes(id)).length;
    const missed = correctCCPs.filter(id => !selectedCCPs.includes(id)).length;
    
    const calculatedScore = Math.max(0, Math.round(((correct - incorrect) / correctCCPs.length) * 100));
    setScore(calculatedScore);
    setShowResults(true);
  };

  const reset = () => {
    setSelectedCCPs([]);
    setShowResults(false);
    setScore(0);
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current?.requestFullscreen();
      setIsFullscreen(true);
    } else {
      document.exitFullscreen();
      setIsFullscreen(false);
    }
  };

  const getStepColor = (step: typeof processSteps[0]) => {
    if (!showResults) {
      return selectedCCPs.includes(step.id) ? '#6366f1' : 'rgba(255,255,255,0.05)';
    }
    
    if (step.isCCP && selectedCCPs.includes(step.id)) return '#10b981'; // Correct
    if (!step.isCCP && selectedCCPs.includes(step.id)) return '#ef4444'; // Wrong selection
    if (step.isCCP && !selectedCCPs.includes(step.id)) return '#f59e0b'; // Missed
    return 'rgba(255,255,255,0.05)'; // Not selected, not CCP
  };

  const getStepIcon = (step: typeof processSteps[0]) => {
    if (!showResults) return selectedCCPs.includes(step.id) ? '✓' : '';
    
    if (step.isCCP && selectedCCPs.includes(step.id)) return '✓'; // Correct
    if (!step.isCCP && selectedCCPs.includes(step.id)) return '✗'; // Wrong
    if (step.isCCP && !selectedCCPs.includes(step.id)) return '!'; // Missed
    return '';
  };

  return (
    <div ref={containerRef} style={{ padding: 20, background: 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)', borderRadius: 20, color: 'white', minHeight: 600 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
        <h2 style={{ margin: 0, fontSize: 28, fontWeight: 'bold' }}>🎯 CCP Identification Game</h2>
        <div style={{ display: 'flex', gap: 10 }}>
          {!showResults ? (
            <button
              onClick={checkAnswers}
              disabled={selectedCCPs.length === 0}
              style={{ 
                padding: '10px 20px', 
                background: selectedCCPs.length === 0 ? '#374151' : '#10b981', 
                border: 'none', 
                borderRadius: 10, 
                color: 'white', 
                cursor: selectedCCPs.length === 0 ? 'not-allowed' : 'pointer', 
                fontWeight: 'bold',
                opacity: selectedCCPs.length === 0 ? 0.5 : 1
              }}
            >
              ✓ Check Answers
            </button>
          ) : (
            <button
              onClick={reset}
              style={{ padding: '10px 20px', background: '#6366f1', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer', fontWeight: 'bold' }}
            >
              ↻ Try Again
            </button>
          )}
          <button onClick={toggleFullscreen} style={{ padding: '10px 20px', background: '#8b5cf6', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer' }}>
            ⛶ Fullscreen
          </button>
        </div>
      </div>

      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20, marginBottom: 20 }}>
        <h3 style={{ margin: '0 0 10px 0' }}>📖 Instructions:</h3>
        <p style={{ margin: 0, fontSize: 14, lineHeight: 1.6, opacity: 0.9 }}>
          Select all process steps that you believe are <strong>Critical Control Points (CCPs)</strong>. 
          A CCP is a step where control is <strong>essential</strong> to prevent, eliminate, or reduce a safety hazard to an acceptable level.
          Click on steps to toggle selection, then click "Check Answers" to see your score.
        </p>
      </div>

      {showResults && (
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{ 
            background: score >= 80 ? 'rgba(16, 185, 129, 0.2)' : score >= 60 ? 'rgba(245, 158, 11, 0.2)' : 'rgba(239, 68, 68, 0.2)',
            border: `3px solid ${score >= 80 ? '#10b981' : score >= 60 ? '#f59e0b' : '#ef4444'}`,
            borderRadius: 15,
            padding: 20,
            marginBottom: 20,
            textAlign: 'center'
          }}
        >
          <div style={{ fontSize: 16, marginBottom: 10 }}>Your Score:</div>
          <div style={{ fontSize: 48, fontWeight: 'bold', marginBottom: 10 }}>
            {score}%
          </div>
          <div style={{ fontSize: 14 }}>
            {score >= 80 && '🎉 Excellent! You have a strong understanding of CCPs!'}
            {score >= 60 && score < 80 && '👍 Good job! Review the missed CCPs to improve.'}
            {score < 60 && '📚 Keep studying! Understanding CCPs is crucial for GMP.'}
          </div>
        </motion.div>
      )}

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: 15 }}>
        {processSteps.map(step => (
          <motion.div
            key={step.id}
            whileHover={!showResults ? { scale: 1.02 } : {}}
            whileTap={!showResults ? { scale: 0.98 } : {}}
            onClick={() => toggleCCP(step.id)}
            style={{
              background: getStepColor(step),
              border: `3px solid ${getStepColor(step)}`,
              borderRadius: 12,
              padding: 20,
              cursor: showResults ? 'default' : 'pointer',
              transition: 'all 0.2s',
              position: 'relative'
            }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: 10 }}>
              <div style={{ fontSize: 18, fontWeight: 'bold', flex: 1 }}>
                {step.id}. {step.name}
              </div>
              {getStepIcon(step) && (
                <div style={{
                  width: 30,
                  height: 30,
                  borderRadius: '50%',
                  background: showResults ? 'rgba(0,0,0,0.3)' : 'rgba(255,255,255,0.2)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontWeight: 'bold',
                  fontSize: 18
                }}>
                  {getStepIcon(step)}
                </div>
              )}
            </div>
            
            {showResults && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                style={{ fontSize: 13, opacity: 0.9, marginTop: 10, paddingTop: 10, borderTop: '1px solid rgba(255,255,255,0.2)' }}
              >
                <div style={{ fontWeight: 'bold', marginBottom: 5 }}>
                  {step.isCCP ? '✓ This IS a CCP' : '✗ This is NOT a CCP'}
                </div>
                <div style={{ fontSize: 12 }}>
                  {step.reason}
                </div>
              </motion.div>
            )}
          </motion.div>
        ))}
      </div>

      {showResults && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          style={{ marginTop: 20, background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}
        >
          <h3 style={{ margin: '0 0 15px 0' }}>📊 Results Breakdown:</h3>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 15 }}>
            <div style={{ background: 'rgba(16, 185, 129, 0.2)', padding: 15, borderRadius: 10, textAlign: 'center' }}>
              <div style={{ fontSize: 32, fontWeight: 'bold', color: '#10b981' }}>
                {selectedCCPs.filter(id => correctCCPs.includes(id)).length}
              </div>
              <div style={{ fontSize: 14 }}>Correct CCPs Identified</div>
            </div>
            <div style={{ background: 'rgba(239, 68, 68, 0.2)', padding: 15, borderRadius: 10, textAlign: 'center' }}>
              <div style={{ fontSize: 32, fontWeight: 'bold', color: '#ef4444' }}>
                {selectedCCPs.filter(id => !correctCCPs.includes(id)).length}
              </div>
              <div style={{ fontSize: 14 }}>Incorrect Selections</div>
            </div>
            <div style={{ background: 'rgba(245, 158, 11, 0.2)', padding: 15, borderRadius: 10, textAlign: 'center' }}>
              <div style={{ fontSize: 32, fontWeight: 'bold', color: '#f59e0b' }}>
                {correctCCPs.filter(id => !selectedCCPs.includes(id)).length}
              </div>
              <div style={{ fontSize: 14 }}>Missed CCPs</div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

// 4. Risk Decision Tree
const RiskDecisionTree: React.FC = () => {
  const [currentNode, setCurrentNode] = useState('start');
  const [path, setPath] = useState<string[]>(['start']);
  const [answers, setAnswers] = useState<{[key: string]: string}>({});
  const [isFullscreen, setIsFullscreen] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const decisionTree: {[key: string]: any} = {
    start: {
      question: 'What type of risk are you assessing?',
      options: [
        { label: 'Product Quality Risk', next: 'quality' },
        { label: 'Patient Safety Risk', next: 'safety' },
        { label: 'Equipment/Process Risk', next: 'equipment' },
        { label: 'Contamination Risk', next: 'contamination' }
      ]
    },
    quality: {
      question: 'Does the risk directly affect product efficacy or stability?',
      options: [
        { label: 'Yes - Direct impact', next: 'quality-direct' },
        { label: 'No - Indirect or potential impact', next: 'quality-indirect' }
      ]
    },
    safety: {
      question: 'Could this risk cause harm to the patient?',
      options: [
        { label: 'Yes - Immediate harm possible', next: 'safety-immediate' },
        { label: 'Potentially - Under certain conditions', next: 'safety-potential' },
        { label: 'No - No patient harm expected', next: 'safety-none' }
      ]
    },
    equipment: {
      question: 'Does equipment failure directly expose product to contamination?',
      options: [
        { label: 'Yes - Direct exposure', next: 'equipment-critical' },
        { label: 'No - Indirect or isolated', next: 'equipment-noncritical' }
      ]
    },
    contamination: {
      question: 'What is the source of potential contamination?',
      options: [
        { label: 'Human (operator)', next: 'contamination-human' },
        { label: 'Environment (air, surfaces)', next: 'contamination-environment' },
        { label: 'Materials/Equipment', next: 'contamination-materials' }
      ]
    },
    'quality-direct': {
      result: true,
      level: 'HIGH',
      recommendation: 'This is a HIGH RISK requiring immediate attention. Implement strict controls, increase monitoring frequency, and validate all changes. Consider this a potential CCP.',
      controls: ['Real-time monitoring', 'Automated alarms', 'Redundant systems', 'Frequent validation']
    },
    'quality-indirect': {
      result: true,
      level: 'MEDIUM',
      recommendation: 'This is a MEDIUM RISK. Implement standard controls and periodic review. May not be a CCP but requires documented risk assessment.',
      controls: ['Periodic monitoring', 'Trend analysis', 'Regular audits', 'Risk review quarterly']
    },
    'safety-immediate': {
      result: true,
      level: 'CRITICAL',
      recommendation: 'This is a CRITICAL RISK. Stop operations immediately if this risk is realized. This MUST be a CCP with fail-safe controls.',
      controls: ['Immediate shutdown capability', 'Redundant safety systems', 'Continuous monitoring', '24/7 alarm response']
    },
    'safety-potential': {
      result: true,
      level: 'HIGH',
      recommendation: 'This is a HIGH RISK. Implement preventive controls and monitoring. Likely a CCP requiring documented control strategy.',
      controls: ['Preventive maintenance', 'Staff training', 'Regular safety reviews', 'Incident reporting system']
    },
    'safety-none': {
      result: true,
      level: 'LOW',
      recommendation: 'This is a LOW RISK from safety perspective, but still requires documentation and periodic review.',
      controls: ['Standard monitoring', 'Annual review', 'Change control process']
    },
    'equipment-critical': {
      result: true,
      level: 'HIGH',
      recommendation: 'Equipment failure is a HIGH RISK. Designate as CCP and implement robust preventive maintenance and monitoring.',
      controls: ['Preventive maintenance program', 'Backup equipment', 'Automated failure detection', 'Emergency procedures']
    },
    'equipment-noncritical': {
      result: true,
      level: 'MEDIUM',
      recommendation: 'Equipment is MEDIUM RISK. Standard maintenance program with documented procedures.',
      controls: ['Regular maintenance', 'Spare parts inventory', 'Documented procedures', 'Training program']
    },
    'contamination-human': {
      result: true,
      level: 'HIGH',
      recommendation: 'Human contamination is HIGH RISK. Consider barrier technology (RABS/Isolator) and rigorous training. This is typically a CCP.',
      controls: ['Aseptic technique training', 'Gowning qualification', 'Media fill validation', 'Behavior observation program']
    },
    'contamination-environment': {
      result: true,
      level: 'HIGH',
      recommendation: 'Environmental contamination is HIGH RISK. HEPA filtration and cleanroom classification are CCPs.',
      controls: ['HEPA filtration', 'Environmental monitoring', 'Cleanroom certification', 'Pressure differential monitoring']
    },
    'contamination-materials': {
      result: true,
      level: 'MEDIUM',
      recommendation: 'Material contamination is MEDIUM-HIGH RISK. Implement vendor qualification and incoming inspection.',
      controls: ['Vendor qualification', 'Certificate of analysis', 'Incoming inspection', 'Controlled storage']
    }
  };

  const currentData = decisionTree[currentNode];

  const handleAnswer = (next: string, answer: string) => {
    setAnswers({...answers, [currentNode]: answer});
    setPath([...path, next]);
    setCurrentNode(next);
  };

  const reset = () => {
    setCurrentNode('start');
    setPath(['start']);
    setAnswers({});
  };

  const goBack = () => {
    if (path.length > 1) {
      const newPath = path.slice(0, -1);
      setPath(newPath);
      setCurrentNode(newPath[newPath.length - 1]);
    }
  };

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current?.requestFullscreen();
      setIsFullscreen(true);
    } else {
      document.exitFullscreen();
      setIsFullscreen(false);
    }
  };

  const getLevelColor = (level: string) => {
    switch(level) {
      case 'CRITICAL': return '#dc2626';
      case 'HIGH': return '#ef4444';
      case 'MEDIUM': return '#f59e0b';
      case 'LOW': return '#10b981';
      default: return '#6366f1';
    }
  };

  return (
    <div ref={containerRef} style={{ padding: 20, background: 'linear-gradient(135deg, #1e1b4b 0%, #312e81 100%)', borderRadius: 20, color: 'white', minHeight: 600 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
        <h2 style={{ margin: 0, fontSize: 28, fontWeight: 'bold' }}>📊 Risk Assessment Decision Tree</h2>
        <div style={{ display: 'flex', gap: 10 }}>
          {path.length > 1 && !currentData.result && (
            <button onClick={goBack} style={{ padding: '10px 20px', background: '#6366f1', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer', fontWeight: 'bold' }}>
              ← Back
            </button>
          )}
          <button onClick={reset} style={{ padding: '10px 20px', background: '#8b5cf6', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer', fontWeight: 'bold' }}>
              ↻ Start Over
            </button>
          <button onClick={toggleFullscreen} style={{ padding: '10px 20px', background: '#7c3aed', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer' }}>
            ⛶ Fullscreen
          </button>
        </div>
      </div>

      {/* Progress Path */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 15, marginBottom: 20 }}>
        <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 10 }}>Your Decision Path:</div>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: 10, alignItems: 'center' }}>
          {path.map((node, i) => (
            <React.Fragment key={i}>
              <div style={{ 
                padding: '6px 12px', 
                background: i === path.length - 1 ? '#6366f1' : 'rgba(255,255,255,0.1)', 
                borderRadius: 8,
                fontSize: 12,
                fontWeight: i === path.length - 1 ? 'bold' : 'normal'
              }}>
                {answers[node] || 'Start'}
              </div>
              {i < path.length - 1 && <span style={{ opacity: 0.5 }}>→</span>}
            </React.Fragment>
          ))}
        </div>
      </div>

      {!currentData.result ? (
        /* Question View */
        <motion.div
          key={currentNode}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 30 }}
        >
          <h3 style={{ margin: '0 0 30px 0', fontSize: 22, textAlign: 'center' }}>
            {currentData.question}
          </h3>
          <div style={{ display: 'grid', gap: 15 }}>
            {currentData.options.map((option: any, i: number) => (
              <motion.button
                key={i}
                whileHover={{ scale: 1.02, x: 5 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => handleAnswer(option.next, option.label)}
                style={{
                  padding: 20,
                  background: 'rgba(99, 102, 241, 0.2)',
                  border: '2px solid rgba(99, 102, 241, 0.5)',
                  borderRadius: 12,
                  color: 'white',
                  fontSize: 16,
                  cursor: 'pointer',
                  textAlign: 'left',
                  fontWeight: 500,
                  transition: 'all 0.2s'
                }}
              >
                {option.label}
              </motion.button>
            ))}
          </div>
        </motion.div>
      ) : (
        /* Result View */
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
        >
          <div style={{
            background: `${getLevelColor(currentData.level)}20`,
            border: `3px solid ${getLevelColor(currentData.level)}`,
            borderRadius: 15,
            padding: 30,
            marginBottom: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 16, opacity: 0.8, marginBottom: 10 }}>Risk Assessment Result:</div>
            <div style={{ fontSize: 48, fontWeight: 'bold', color: getLevelColor(currentData.level), marginBottom: 15 }}>
              {currentData.level} RISK
            </div>
            <div style={{ fontSize: 16, lineHeight: 1.6, opacity: 0.95 }}>
              {currentData.recommendation}
            </div>
          </div>

          <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 25 }}>
            <h3 style={{ margin: '0 0 20px 0' }}>🛡️ Recommended Controls:</h3>
            <div style={{ display: 'grid', gap: 12 }}>
              {currentData.controls.map((control: string, i: number) => (
                <motion.div
                  key={i}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: i * 0.1 }}
                  style={{
                    padding: 15,
                    background: 'rgba(0,0,0,0.3)',
                    borderRadius: 10,
                    borderLeft: `4px solid ${getLevelColor(currentData.level)}`,
                    fontSize: 14
                  }}
                >
                  • {control}
                </motion.div>
              ))}
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

// 5. Real-time Risk Dashboard
const RealTimeRiskDashboard: React.FC = () => {
  const [time, setTime] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [parameters, setParameters] = useState({
    pressure: 15,
    particles: 100,
    temperature: 21,
    humidity: 45,
    hepa: 100
  });
  const [incidents, setIncidents] = useState<Array<{time: number, type: string, message: string}>>([]);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!isRunning) return;
    
    const interval = setInterval(() => {
      setTime(t => t + 1);
      
      // Simulate parameter changes
      setParameters(prev => {
        const newParams = {
          pressure: Math.max(0, Math.min(20, prev.pressure + (Math.random() - 0.5) * 2)),
          particles: Math.max(0, Math.min(1000, prev.particles + (Math.random() - 0.5) * 50)),
          temperature: Math.max(18, Math.min(24, prev.temperature + (Math.random() - 0.5) * 0.5)),
          humidity: Math.max(30, Math.min(60, prev.humidity + (Math.random() - 0.5) * 3)),
          hepa: Math.max(0, Math.min(100, prev.hepa - Math.random() * 0.1))
        };

        // Check for incidents
        if (newParams.pressure < 10 && prev.pressure >= 10) {
          setIncidents(prev => [...prev, {time, type: 'CRITICAL', message: 'Pressure drop below acceptable limit!'}]);
        }
        if (newParams.particles > 800) {
          setIncidents(prev => [...prev, {time, type: 'WARNING', message: 'Particle count exceeding Grade A limits'}]);
        }
        if (newParams.hepa < 50 && prev.hepa >= 50) {
          setIncidents(prev => [...prev, {time, type: 'CRITICAL', message: 'HEPA filter integrity compromised!'}]);
        }

        return newParams;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [isRunning, time]);

  const getRiskLevel = () => {
    let riskScore = 0;
    if (parameters.pressure < 10) riskScore += 40;
    else if (parameters.pressure < 15) riskScore += 20;
    
    if (parameters.particles > 800) riskScore += 30;
    else if (parameters.particles > 500) riskScore += 15;
    
    if (parameters.hepa < 50) riskScore += 30;
    else if (parameters.hepa < 80) riskScore += 15;
    
    if (riskScore >= 70) return { level: 'CRITICAL', color: '#ef4444' };
    if (riskScore >= 40) return { level: 'HIGH', color: '#f59e0b' };
    if (riskScore >= 20) return { level: 'MEDIUM', color: '#fbbf24' };
    return { level: 'LOW', color: '#10b981' };
  };

  const risk = getRiskLevel();

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      containerRef.current?.requestFullscreen();
      setIsFullscreen(true);
    } else {
      document.exitFullscreen();
      setIsFullscreen(false);
    }
  };

  return (
    <div ref={containerRef} style={{ padding: 20, background: 'linear-gradient(135deg, #0c0a09 0%, #1c1917 100%)', borderRadius: 20, color: 'white', minHeight: 600 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 20 }}>
        <h2 style={{ margin: 0, fontSize: 28, fontWeight: 'bold' }}>⚡ Real-time Risk Dashboard</h2>
        <div style={{ display: 'flex', gap: 10, alignItems: 'center' }}>
          <div style={{ fontSize: 14, opacity: 0.7 }}>Time: {Math.floor(time / 60)}:{(time % 60).toString().padStart(2, '0')}</div>
          <button
            onClick={() => setIsRunning(!isRunning)}
            style={{ padding: '10px 20px', background: isRunning ? '#ef4444' : '#10b981', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer', fontWeight: 'bold' }}
          >
            {isRunning ? '⏸ Pause' : '▶ Start'}
          </button>
          <button
            onClick={() => { setTime(0); setIncidents([]); setParameters({ pressure: 15, particles: 100, temperature: 21, humidity: 45, hepa: 100 }); }}
            style={{ padding: '10px 20px', background: '#6366f1', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer' }}
          >
            ↻ Reset
          </button>
          <button onClick={toggleFullscreen} style={{ padding: '10px 20px', background: '#8b5cf6', border: 'none', borderRadius: 10, color: 'white', cursor: 'pointer' }}>
            ⛶ Fullscreen
          </button>
        </div>
      </div>

      {/* Overall Risk Status */}
      <motion.div
        animate={{ borderColor: risk.color }}
        style={{
          background: `${risk.color}20`,
          border: `3px solid ${risk.color}`,
          borderRadius: 15,
          padding: 20,
          marginBottom: 20,
          textAlign: 'center'
        }}
      >
        <div style={{ fontSize: 16, opacity: 0.8, marginBottom: 5 }}>Overall Risk Level:</div>
        <div style={{ fontSize: 42, fontWeight: 'bold', color: risk.color }}>
          {risk.level}
        </div>
      </motion.div>

      {/* Parameter Monitoring */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 15, marginBottom: 20 }}>
        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 12, padding: 15 }}>
          <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 10 }}>Differential Pressure (Pa)</div>
          <div style={{ fontSize: 32, fontWeight: 'bold', color: parameters.pressure < 10 ? '#ef4444' : parameters.pressure < 15 ? '#f59e0b' : '#10b981' }}>
            {parameters.pressure.toFixed(1)}
          </div>
          <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>Target: ≥15 Pa</div>
        </div>

        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 12, padding: 15 }}>
          <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 10 }}>Particles ≥0.5µm/m³</div>
          <div style={{ fontSize: 32, fontWeight: 'bold', color: parameters.particles > 800 ? '#ef4444' : parameters.particles > 500 ? '#f59e0b' : '#10b981' }}>
            {Math.round(parameters.particles)}
          </div>
          <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>Grade A Limit: ≤3520</div>
        </div>

        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 12, padding: 15 }}>
          <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 10 }}>Temperature (°C)</div>
          <div style={{ fontSize: 32, fontWeight: 'bold', color: '#10b981' }}>
            {parameters.temperature.toFixed(1)}
          </div>
          <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>Target: 20-22°C</div>
        </div>

        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 12, padding: 15 }}>
          <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 10 }}>Relative Humidity (%)</div>
          <div style={{ fontSize: 32, fontWeight: 'bold', color: '#10b981' }}>
            {parameters.humidity.toFixed(0)}
          </div>
          <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>Target: 40-50%</div>
        </div>

        <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 12, padding: 15 }}>
          <div style={{ fontSize: 12, opacity: 0.7, marginBottom: 10 }}>HEPA Integrity (%)</div>
          <div style={{ fontSize: 32, fontWeight: 'bold', color: parameters.hepa < 50 ? '#ef4444' : parameters.hepa < 80 ? '#f59e0b' : '#10b981' }}>
            {parameters.hepa.toFixed(0)}
          </div>
          <div style={{ fontSize: 11, opacity: 0.6, marginTop: 5 }}>Minimum: 99.97%</div>
        </div>
      </div>

      {/* Incident Log */}
      <div style={{ background: 'rgba(255,255,255,0.05)', borderRadius: 15, padding: 20 }}>
        <h3 style={{ margin: '0 0 15px 0' }}>🚨 Incident Log:</h3>
        <div style={{ maxHeight: 200, overflowY: 'auto', display: 'grid', gap: 10 }}>
          {incidents.length === 0 ? (
            <div style={{ textAlign: 'center', opacity: 0.5, padding: 20 }}>
              No incidents detected. All parameters within acceptable range.
            </div>
          ) : (
            incidents.slice(-10).reverse().map((incident, i) => (
              <motion.div
                key={i}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                style={{
                  padding: 12,
                  background: incident.type === 'CRITICAL' ? 'rgba(239, 68, 68, 0.2)' : 'rgba(245, 158, 11, 0.2)',
                  border: `2px solid ${incident.type === 'CRITICAL' ? '#ef4444' : '#f59e0b'}`,
                  borderRadius: 8,
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}
              >
                <div>
                  <div style={{ fontWeight: 'bold', marginBottom: 3 }}>
                    {incident.type === 'CRITICAL' ? '🔴' : '⚠️'} {incident.message}
                  </div>
                  <div style={{ fontSize: 11, opacity: 0.7 }}>
                    Time: {Math.floor(incident.time / 60)}:{(incident.time % 60).toString().padStart(2, '0')}
                  </div>
                </div>
              </motion.div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

// LESSON 113 - Human Factor Contamination Visualization
export function HumanContaminationFactorViz() {
  const mountRef = useRef<HTMLDivElement>(null)
  const [scenario, setScenario] = useState<'resting' | 'walking' | 'critical'>('resting')
  const [showStats, setShowStats] = useState(true)
  const [isPlaying, setIsPlaying] = useState(true)

  const scenarios = {
    resting: {
      name: '😌 Mirovanje',
      particles: 1000000,
      color: '#22c55e',
      rate: 1,
      description: '1 milijon delcev/minuto',
      cfu: '100,000-300,000 CFU/dan'
    },
    walking: {
      name: '🚶 Hoja',
      particles: 7500000,
      color: '#f59e0b',
      rate: 7.5,
      description: '5-10 milijonov delcev/minuto',
      cfu: '300,000-600,000 CFU/dan'
    },
    critical: {
      name: '⚠️ Nad kritično cono',
      particles: 10000000,
      color: '#ef4444',
      rate: 10,
      description: 'Kritična situacija - delci padajo!',
      cfu: 'Neposredna kontaminacija!'
    }
  }

  useEffect(() => {
    const mount = mountRef.current
    if (!mount) return

    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x0f172a)

    const camera = new THREE.PerspectiveCamera(60, mount.clientWidth / 600, 0.1, 100)
    camera.position.set(0, 2, 6)
    camera.lookAt(0, 1.5, 0)

    const renderer = new THREE.WebGLRenderer({ antialias: true })
    renderer.setSize(mount.clientWidth, 600)
    renderer.setPixelRatio(Math.min(2, window.devicePixelRatio))
    mount.appendChild(renderer.domElement)

    // Lighting
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6)
    scene.add(ambientLight)

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)
    directionalLight.position.set(5, 10, 5)
    scene.add(directionalLight)

    // Room (wireframe)
    const roomGeo = new THREE.BoxGeometry(8, 4, 8)
    const roomMat = new THREE.MeshStandardMaterial({
      color: 0x64748b,
      wireframe: true,
      opacity: 0.2,
      transparent: true
    })
    const room = new THREE.Mesh(roomGeo, roomMat)
    room.position.set(0, 2, 0)
    scene.add(room)

    // Floor
    const floorGeo = new THREE.PlaneGeometry(8, 8)
    const floorMat = new THREE.MeshStandardMaterial({
      color: 0x1e293b,
      side: THREE.DoubleSide
    })
    const floor = new THREE.Mesh(floorGeo, floorMat)
    floor.rotation.x = -Math.PI / 2
    floor.position.y = 0
    scene.add(floor)

    // Critical zone (sterile work surface)
    const criticalZoneGeo = new THREE.BoxGeometry(2, 0.05, 1.5)
    const criticalZoneMat = new THREE.MeshStandardMaterial({
      color: 0x3b82f6,
      emissive: 0x1e40af,
      opacity: 0.7,
      transparent: true
    })
    const criticalZone = new THREE.Mesh(criticalZoneGeo, criticalZoneMat)
    criticalZone.position.set(0, 1, 0)
    scene.add(criticalZone)

    // Critical zone warning border
    const borderGeo = new THREE.BoxGeometry(2.2, 0.1, 1.7)
    const borderMat = new THREE.MeshStandardMaterial({
      color: 0xef4444,
      wireframe: true,
      opacity: 0.8,
      transparent: true
    })
    const border = new THREE.Mesh(borderGeo, borderMat)
    border.position.set(0, 1, 0)
    scene.add(border)

    // Person (simplified humanoid)
    const personGroup = new THREE.Group()
    
    // Head
    const headGeo = new THREE.SphereGeometry(0.15, 16, 16)
    const personMat = new THREE.MeshStandardMaterial({ color: 0xfbbf24 })
    const head = new THREE.Mesh(headGeo, personMat)
    head.position.y = 1.75
    personGroup.add(head)

    // Body
    const bodyGeo = new THREE.CylinderGeometry(0.2, 0.25, 0.8, 16)
    const body = new THREE.Mesh(bodyGeo, personMat)
    body.position.y = 1.2
    personGroup.add(body)

    // Arms
    const armGeo = new THREE.CylinderGeometry(0.05, 0.05, 0.6, 8)
    const leftArm = new THREE.Mesh(armGeo, personMat)
    leftArm.position.set(-0.3, 1.2, 0)
    leftArm.rotation.z = Math.PI / 6
    personGroup.add(leftArm)

    const rightArm = new THREE.Mesh(armGeo, personMat)
    rightArm.position.set(0.3, 1.2, 0)
    rightArm.rotation.z = -Math.PI / 6
    personGroup.add(rightArm)

    // Legs
    const legGeo = new THREE.CylinderGeometry(0.08, 0.08, 0.7, 8)
    const leftLeg = new THREE.Mesh(legGeo, personMat)
    leftLeg.position.set(-0.12, 0.45, 0)
    personGroup.add(leftLeg)

    const rightLeg = new THREE.Mesh(legGeo, personMat)
    rightLeg.position.set(0.12, 0.45, 0)
    personGroup.add(rightLeg)

    personGroup.position.set(0, 0, -1.5)
    scene.add(personGroup)

    // Particle systems for contamination
    const particleCount = 3000
    const particles: Array<{ position: THREE.Vector3; velocity: THREE.Vector3; life: number }> = []

    const particleGeo = new THREE.BufferGeometry()
    const positions = new Float32Array(particleCount * 3)
    particleGeo.setAttribute('position', new THREE.BufferAttribute(positions, 3))

    const particleMat = new THREE.PointsMaterial({
      color: 0xff6b6b,
      size: 0.03,
      transparent: true,
      opacity: 0.8,
      blending: THREE.AdditiveBlending
    })

    const particleSystem = new THREE.Points(particleGeo, particleMat)
    scene.add(particleSystem)

    // Initialize particles
    for (let i = 0; i < particleCount; i++) {
      particles.push({
        position: new THREE.Vector3(0, 0, 0),
        velocity: new THREE.Vector3(0, 0, 0),
        life: 0
      })
    }

    let time = 0
    let walkPhase = 0
    let personX = 0
    let personZ = -1.5

    function spawnParticles(rate: number) {
      const current = scenarios[scenario]
      
      for (let i = 0; i < particleCount; i++) {
        if (particles[i].life <= 0 && Math.random() < rate * 0.01) {
          // Spawn from person position with spread
          const spread = scenario === 'walking' ? 0.4 : 0.2
          particles[i].position.set(
            personX + (Math.random() - 0.5) * spread,
            1.5 + Math.random() * 0.5,
            personZ + (Math.random() - 0.5) * spread
          )
          
          // Velocity - particles fall down and spread
          particles[i].velocity.set(
            (Math.random() - 0.5) * 0.02,
            -0.015 - Math.random() * 0.01, // Falling
            (Math.random() - 0.5) * 0.02
          )
          
          particles[i].life = 1.0
        }
      }
    }

    function animate() {
      time += 0.016

      // Update scenario-specific behavior
      if (scenario === 'walking') {
        // Person walks back and forth
        walkPhase += 0.02
        personX = Math.sin(walkPhase) * 2
        personZ = -1.5 + Math.cos(walkPhase * 0.5) * 0.5
        personGroup.position.set(personX, 0, personZ)
        personGroup.rotation.y = Math.sin(walkPhase) * 0.3

        // Animate legs walking
        leftLeg.rotation.x = Math.sin(walkPhase * 4) * 0.5
        rightLeg.rotation.x = -Math.sin(walkPhase * 4) * 0.5
        
        // Animate arms
        leftArm.rotation.x = -Math.sin(walkPhase * 4) * 0.3
        rightArm.rotation.x = Math.sin(walkPhase * 4) * 0.3
      } else if (scenario === 'critical') {
        // Person positioned above critical zone
        personX = 0
        personZ = 0.5
        personGroup.position.set(personX, 0, personZ)
        personGroup.rotation.y = 0
        
        // Reset limbs
        leftLeg.rotation.x = 0
        rightLeg.rotation.x = 0
        leftArm.rotation.x = 0
        rightArm.rotation.x = 0
        
        // Slight breathing motion
        body.position.y = 1.2 + Math.sin(time * 2) * 0.02
      } else {
        // Resting - person stands still
        personX = 0
        personZ = -1.5
        personGroup.position.set(personX, 0, personZ)
        personGroup.rotation.y = 0
        
        // Reset limbs
        leftLeg.rotation.x = 0
        rightLeg.rotation.x = 0
        leftArm.rotation.x = 0
        rightArm.rotation.x = 0
        
        // Slight breathing motion
        body.position.y = 1.2 + Math.sin(time * 2) * 0.02
      }

      if (isPlaying) {
        // Spawn particles based on scenario
        const current = scenarios[scenario]
        spawnParticles(current.rate)

        // Update particles
        const posArray = particleGeo.attributes.position!.array as Float32Array
        
        for (let i = 0; i < particleCount; i++) {
          if (particles[i].life > 0) {
            // Update position
            particles[i].position.add(particles[i].velocity)
            particles[i].life -= 0.01

            // Gravity
            particles[i].velocity.y -= 0.0005

            // Check collision with critical zone
            if (scenario === 'critical' && 
                particles[i].position.y <= 1.05 && particles[i].position.y >= 0.95 &&
                Math.abs(particles[i].position.x) <= 1 &&
                Math.abs(particles[i].position.z) <= 0.75) {
              // Particle hit critical zone - make it red and stick
              particleMat.color.setHex(0xff0000)
              particles[i].velocity.multiplyScalar(0.5)
            }

            // Floor collision
            if (particles[i].position.y <= 0) {
              particles[i].life = 0
            }
          }

          // Update buffer
          posArray[i * 3] = particles[i].position.x
          posArray[i * 3 + 1] = particles[i].position.y
          posArray[i * 3 + 2] = particles[i].position.z
        }

        particleGeo.attributes.position!.needsUpdate = true
      }

      // Update particle color based on scenario
      const current = scenarios[scenario]
      particleMat.color.setHex(
        scenario === 'critical' ? 0xff0000 :
        scenario === 'walking' ? 0xff9900 :
        0x66ff66
      )

      // Animate critical zone warning
      if (scenario === 'critical') {
        border.material.opacity = 0.5 + Math.sin(time * 4) * 0.3
      } else {
        border.material.opacity = 0.3
      }

      renderer.render(scene, camera)
      requestAnimationFrame(animate)
    }

    animate()

    return () => {
      renderer.dispose()
      mount.removeChild(renderer.domElement)
    }
  }, [scenario, isPlaying])

  const current = scenarios[scenario]

  return (
    <div style={{ width: '100%' }}>
      <div style={{
        display: 'flex',
        gap: 16,
        marginBottom: 20,
        flexWrap: 'wrap'
      }}>
        {(Object.keys(scenarios) as Array<keyof typeof scenarios>).map((key) => (
          <motion.button
            key={key}
            onClick={() => setScenario(key)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              flex: 1,
              minWidth: 200,
              padding: '16px 20px',
              background: scenario === key 
                ? `linear-gradient(135deg, ${scenarios[key].color} 0%, ${scenarios[key].color}cc 100%)`
                : 'rgba(51, 65, 85, 0.5)',
              border: scenario === key ? `2px solid ${scenarios[key].color}` : '2px solid rgba(148, 163, 184, 0.3)',
              borderRadius: 12,
              color: 'white',
              cursor: 'pointer',
              fontSize: 16,
              fontWeight: 600,
              transition: 'all 0.3s ease'
            }}
          >
            <div>{scenarios[key].name}</div>
            <div style={{ fontSize: 12, marginTop: 4, opacity: 0.9 }}>
              {scenarios[key].description}
            </div>
          </motion.button>
        ))}
      </div>

      <div ref={mountRef} style={{
        width: '100%',
        height: 600,
        borderRadius: 16,
        overflow: 'hidden',
        background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',
        border: `3px solid ${current.color}`,
        boxShadow: `0 10px 40px ${current.color}40`,
        position: 'relative'
      }} />

      {showStats && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{
            marginTop: 20,
            padding: 24,
            background: 'linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(15, 23, 42, 0.9) 100%)',
            borderRadius: 16,
            border: `2px solid ${current.color}`,
            boxShadow: `0 8px 32px ${current.color}20`
          }}
        >
          <h3 style={{ color: current.color, marginBottom: 16, fontSize: 20, fontWeight: 700 }}>
            📊 Statistika kontaminacije
          </h3>
          
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 16 }}>
            <div style={{
              padding: 16,
              background: 'rgba(124, 58, 237, 0.1)',
              borderRadius: 12,
              border: '1px solid rgba(124, 58, 237, 0.3)'
            }}>
              <div style={{ color: '#a78bfa', fontSize: 14, marginBottom: 4 }}>Delci/minuto</div>
              <div style={{ color: 'white', fontSize: 24, fontWeight: 700 }}>
                {current.particles.toLocaleString('sl-SI')}
              </div>
            </div>

            <div style={{
              padding: 16,
              background: 'rgba(239, 68, 68, 0.1)',
              borderRadius: 12,
              border: '1px solid rgba(239, 68, 68, 0.3)'
            }}>
              <div style={{ color: '#fca5a5', fontSize: 14, marginBottom: 4 }}>CFU/dan</div>
              <div style={{ color: 'white', fontSize: 24, fontWeight: 700 }}>
                {current.cfu}
              </div>
            </div>

            <div style={{
              padding: 16,
              background: 'rgba(34, 197, 94, 0.1)',
              borderRadius: 12,
              border: '1px solid rgba(34, 197, 94, 0.3)'
            }}>
              <div style={{ color: '#86efac', fontSize: 14, marginBottom: 4 }}>Faktor povečanja</div>
              <div style={{ color: 'white', fontSize: 24, fontWeight: 700 }}>
                {current.rate}x
              </div>
            </div>
          </div>

          <div style={{
            marginTop: 20,
            padding: 16,
            background: 'rgba(239, 68, 68, 0.1)',
            borderRadius: 12,
            border: '2px solid rgba(239, 68, 68, 0.4)'
          }}>
            <h4 style={{ color: '#fca5a5', marginBottom: 12, fontSize: 16, fontWeight: 600 }}>
              ⚠️ KLJUČNO ASEPTIČNO PRAVILO
            </h4>
            <div style={{ color: 'white', fontSize: 18, fontWeight: 600 }}>
              ✓ Nikoli ne delaj nad kritično cono
            </div>
            <div style={{ color: '#cbd5e1', fontSize: 14, marginTop: 8 }}>
              Delci padajo navzdol zaradi gravitacije in kontaminirajo sterilno površino!
            </div>
          </div>

          <div style={{
            marginTop: 16,
            padding: 16,
            background: 'rgba(59, 130, 246, 0.1)',
            borderRadius: 12,
            border: '1px solid rgba(59, 130, 246, 0.3)'
          }}>
            <div style={{ color: '#93c5fd', fontSize: 14, marginBottom: 8 }}>
              📌 <strong>80% VSEH KONTAMINACIJ</strong> izvira iz človeškega faktorja
            </div>
            <div style={{ color: '#cbd5e1', fontSize: 13 }}>
              • Koža se nenehno obnavlja (40.000 celic/minuto)
              <br />
              • Dihanje in kašelj sproščata kapljice
              <br />
              • Gibanje dviguje delce z oblačil in tal
              <br />
              • Nepravilno oblek a poveča kontaminacijo do 100x
            </div>
          </div>
        </motion.div>
      )}

      <div style={{
        marginTop: 16,
        display: 'flex',
        gap: 12,
        justifyContent: 'center'
      }}>
        <motion.button
          onClick={() => setIsPlaying(!isPlaying)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            padding: '12px 24px',
            background: isPlaying ? 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)' : 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
            border: 'none',
            borderRadius: 10,
            color: 'white',
            fontSize: 16,
            fontWeight: 600,
            cursor: 'pointer'
          }}
        >
          {isPlaying ? '⏸️ Ustavi' : '▶️ Predvajaj'}
        </motion.button>

        <motion.button
          onClick={() => setShowStats(!showStats)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            padding: '12px 24px',
            background: 'linear-gradient(135deg, #6366f1 0%, #4f46e5 100%)',
            border: 'none',
            borderRadius: 10,
            color: 'white',
            fontSize: 16,
            fontWeight: 600,
            cursor: 'pointer'
          }}
        >
          {showStats ? '📊 Skrij statistiko' : '📊 Prikaži statistiko'}
        </motion.button>
      </div>
    </div>
  )
}

// Get visualization component based on lesson slug
export function LessonVisualization({ slug }: { slug: string }) {
  const visualizations: Record<string, JSX.Element> = {
    // Core lessons (101-111) - ALL WITH LAZY LOADING
    'osnove-annex1': <Lesson101VisualizationSelector />,
    'hepa-filtracija': <Lesson102VisualizationSelector />,
    'klasifikacija-prostorov': <Lesson103VisualizationSelector />,
    'tlacne-razlike': <Lesson104VisualizationSelector />,
    'izmenjava-zraka': <Lesson105VisualizationSelector />,
    'mikrobioloski-monitoring': <Lesson106VisualizationSelector />,
    'ciscenje-razkuzevanje': <Lesson107VisualizationSelector />,
    'osebna-higiena': <Lesson108VisualizationSelector />,
    'kvalifikacija-validacija': <Lesson109VisualizationSelector />,
    'nadzor-materialov': <Lesson110VisualizationSelector />,
    'vizualizacija-pretoka-zraka': <Lesson111VisualizationSelector />,
    
    // Lesson 113 - Human Factor Contamination
    'cloveski-faktor-kontaminacija': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'human-contamination', name: '👤 Človeški Faktor - 80% Kontaminacij', description: 'Interaktivna 3D vizualizacija sproščanja delcev pri različnih aktivnostih', component: <HumanContaminationFactorViz /> }
        ]}
        accentColor="#ef4444"
        accentColorLight="#dc2626"
        accentColorVeryLight="#fca5a5"
      />
    ),

    // Lesson 119 - Preventivno Vzdrževanje in Kalibracija (Next‑Level)
    'preventivno-vzdrzevanje': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'hepa-integrity', name: '🧪 HEPA Integrity & Laminar Flow Tester', description: 'Skeniranje DOP/PAO in smoke/velocity validacija z vizualnimi kriteriji', component: <HEPAIntegrityLaminarTester /> },
          { id: 'calibration-lab', name: '📏 Calibration Uncertainty Lab', description: 'Kalibracija: bias, negotovost (uA/uB/uc), U95 in PASS/FAIL', component: <CalibrationUncertaintyLab /> },
          { id: 'pm-scheduler-2d', name: '🗺️ Digital Twin PM Scheduler (2D)', description: 'Zemljevid opreme z 14-dnevnim planerjem in auto-schedule funkcijo', component: <DigitalTwinPMScheduler2D /> },
          { id: 'predictive-sandbox', name: '📈 Predictive Maintenance Sandbox', description: 'Signali (vibracije), pravila vs trend napoved, stroškovna optimizacija PM', component: <PredictiveMaintenanceSandbox /> },
          { id: 'spare-optimizer', name: '🧰 Spare Parts & Tools Optimizer', description: 'Service level → safety stock, tveganje izpada in strošek', component: <SparePartsToolsOptimizer /> },
          { id: 'em-console', name: '🧫 EM Monitoring Console', description: 'Živi (CFU) in neživi (0.5/5.0µm) delci – meje, status in vzorčenje', component: <ViableNonViableMonitoringConsole /> },
          { id: 'hepa-replacement', name: '🧰 Menjava HEPA filtra (wizard)', description: 'Pred‑/po‑ testiranje, menjava, tesnenje in poročilo', component: <HEPAReplacementProcedure /> },
          { id: 'maintenance-schedule', name: '📅 Maintenance Schedule', description: 'PM/Kalibracija – status, due in kvalificiranost opreme', component: <MaintenanceSchedule /> }
        ]}
        accentColor="#7c3aed"
        accentColorLight="#6d28d9"
        accentColorVeryLight="#c4b5fd"
      />
    ),
    
    // Lesson 120 - Monitoriranje Okolja (Environmental Monitoring)
    'monitoriranje-okolja': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'em-excursion-investigator', name: '🕵️ EM Excursion Investigator', description: 'Hitro preiskovanje ALERT/ACTION odstopanj z dokazi in CAPA', component: <EMExcursionInvestigator /> },
          { id: 'sampling-plan-optimizer', name: '📍 Sampling Plan Optimizer', description: 'Optimizacija lokacij in frekvenc vzorčenja za maksimalno zaznavnost', component: <SamplingPlanOptimizer /> },
          { id: 'airflow-viable-explorer', name: '💨 Airflow + Viable Explorer', description: 'Povezava vzorcev toka z viables/NV in kršitvami first-air', component: <AirflowViableExplorer /> },
          { id: 'alert-action-designer', name: '🛎️ Alert/Action Limit Designer', description: 'Statistično utemeljeni limiti in njihov učinek na alarme', component: <AlertActionLimitDesigner /> },
          { id: 'env-trend', name: '📈 Environmental Trend (osnove)', description: 'Osnovni pregled NV/CFU trendov in mej', component: <EnvironmentalTrend /> }
        ]}
        accentColor="#0ea5e9"
        accentColorLight="#0284c7"
        accentColorVeryLight="#7dd3fc"
      />
    ),

    // Lesson 121 - Incident Management & CAPA
    'incident-management-capa': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'root-cause-canvas', name: '🧠 Root‑Cause Canvas', description: '5 Why + Ishikawa z označevanjem dokazov in CAPA nalogami', component: <RootCauseCanvas /> },
          { id: 'deviation-triage-board', name: '🧭 Deviation Triage Board', description: 'Resnost × detektabilnost → priporočeni ukrepi; izvoz CSV', component: <DeviationTriageBoard /> },
          { id: 'effectiveness-check-planner', name: '✅ Effectiveness Check Planner', description: 'Načrtujte preverjanja učinkovitosti CAPA z roki in statusi', component: <EffectivenessCheckPlanner /> }
        ]}
        accentColor="#7c3aed"
        accentColorLight="#a855f7"
        accentColorVeryLight="#c4b5fd"
      />
    ),
    
    // Foundation lessons (122-131) - ALL WITH LAZY LOADING
    'osnove-temperatura-vlaznost': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'psychrometric', name: '🌡️ Psihrometrični Diagram', description: 'Interaktivni psihrometrični diagram z real-time parametri in HVAC procesi + sezonska primerjava', component: <PsychrometricChartSimulator /> },
          { id: 'condensation', name: '❄️ Kalkulator Kondenzacije (3D)', description: '3D vizualizacija čistega prostora s prikazom tveganja kondenzacije na različnih površinah', component: <CondensationRiskCalculator /> },
          { id: 'seasonal', name: '📅 Sezonska Obremenitev HVAC', description: '12-mesečna simulacija obremenitve s primerjavo scenarijev, energijsko porabo in ROI analizo', component: <SeasonalHVACLoadSimulator /> },
          { id: 'temp-hum', name: '📊 Monitor Temperature in Vlažnosti', description: 'Prikaz realnega časa temperature in vlage', component: <TemperatureHumidityMonitor /> }
        ]}
        accentColor="#ef4444"
        accentColorLight="#dc2626"
        accentColorVeryLight="#fca5a5"
      />
    ),
    'osnove-delcna-kontaminacija': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'size-comparator', name: '🔬 Primerjava Velikosti Delcev', description: 'Interaktivna primerjava velikosti delcev od virusov do človeške laske z zoom funkcijo', component: <ParticleSizeComparator /> },
          { id: 'personnel-generator', name: '� Generator Delcev Osebja', description: 'Animirana vizualizacija emisije delcev iz osebja (80% vir kontaminacije) glede na aktivnost', component: <PersonnelParticleGenerator /> },
          { id: 'airflow-trajectory', name: '🌊 Simulator Zračnih Tokov', description: 'Vizualizacija poti delcev skozi čist prostor z različnimi tipi ventilacije in mrtvimi conami', component: <AirflowParticleTrajectory /> },
          { id: 'iso-explorer', name: '📉 ISO Raziskovalec Standardov', description: 'Interaktivna tabela ISO klasifikacije s funkcijo "najdi moj čist prostor" in izvozom podatkov', component: <ISOClassificationExplorer /> },
          { id: 'contamination-game', name: '🎮 Igra Nadzora Kontaminacije', description: 'Izobraževalna mini-igra za upravljanje čistega prostora z realnimi scenariji in rezultati', component: <CleanroomContaminationGame /> },
          { id: 'counter', name: '📊 Štetje Delcev v Realnem Času', description: 'Animacija štetja delcev po razredih in stanjih (mirovanje/delovanje)', component: <ParticleCounterSimulation /> }
        ]}
        accentColor="#8b5cf6"
        accentColorLight="#7c3aed"
        accentColorVeryLight="#c4b5fd"
      />
    ),
    'osnove-mikrobioloska-kontaminacija': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'microbe', name: '🦠 Rast Mikrobov', description: 'Animirana rast mikroorganizmov', component: <MicrobeGrowth /> }
        ]}
        accentColor="#ec4899"
        accentColorLight="#db2777"
        accentColorVeryLight="#fbcfe8"
      />
    ),
    'osnove-sterilizacija': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'sterilization', name: '⏱️ Časovnica Sterilizacije', description: 'Korak-po-korak proces sterilizacije', component: <SterilizationTimeline /> }
        ]}
        accentColor="#06b6d4"
        accentColorLight="#0891b2"
        accentColorVeryLight="#67e8f9"
      />
    ),
    'nacrtovanje-cistih-prostorov': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'design', name: '🏗️ Načrtovanje Prostorov (3D)', description: '3D vizualizacija pretoka zraka', component: <AdvancedAirflowVisualization /> }
        ]}
        accentColor="#22c55e"
        accentColorLight="#16a34a"
        accentColorVeryLight="#86efac"
      />
    ),
    'gradbeni-materiali-cistih-prostorov': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'materials', name: '⚠️ Matrika Tveganja', description: 'Analiza tveganj materialov', component: <RiskMatrix /> }
        ]}
        accentColor="#f97316"
        accentColorLight="#ea580c"
        accentColorVeryLight="#fdba74"
      />
    ),
    'kvalifikacija-validacija-cistih-prostorov': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'validation-foundation', name: '✅ Faze Kvalifikacije', description: 'DQ, IQ, OQ, PQ procesi', component: <ValidationPhases /> }
        ]}
        accentColor="#3b82f6"
        accentColorLight="#2563eb"
        accentColorVeryLight="#93c5fd"
      />
    ),
    'hvac-sistem-komponente': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'hvac', name: '❄️ HVAC Sistem', description: 'Vizualizacija HVAC komponent', component: <HVACSystemVisualization /> }
        ]}
        accentColor="#0ea5e9"
        accentColorLight="#0284c7"
        accentColorVeryLight="#7dd3fc"
      />
    ),
    'elektricne-instalacije-cistih-prostorov': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'utilities', name: '⚡ Nadzor Sistemov', description: 'Monitoring električne infrastrukture', component: <UtilityMonitoring /> }
        ]}
        accentColor="#eab308"
        accentColorLight="#ca8a04"
        accentColorVeryLight="#fde047"
      />
    ),
    'utilities-voda-para-zrak': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'utilities-monitoring', name: '⚙️ Utilities Dashboard', description: 'WFI, čist parni sistem in komprimirani zrak – monitoring v realnem času', component: <UtilityMonitoring /> },
          { id: 'water-system-flow', name: '💧 Water System Flow', description: 'Distribucijska zanka WFI/PW z ključnimi parametri in tokovi', component: <WaterSystemFlow /> },
          { id: 'utility-alarm-playbook', name: '🧭 Utility Alarm Playbook', description: 'Voden odpravljanje napak: nizka WFI temperatura, NCG v čistemu paru, previsoka rosišča', component: <UtilityAlarmPlaybook /> },
          { id: 'dead-leg-finder', name: '🧩 Dead‑Leg Finder & Balans', description: 'Prepoznajte dead‑lege in uravnotežite hitrosti ter temperatur v WFI/PW zanki', component: <DeadLegFinder /> },
          { id: 'pou-qualification-mapper', name: '📍 PoU Qualification Mapper', description: 'Status točk porabe (WFI/Para/Zrak), trendi in mini sampling plan', component: <POUQualificationMapper /> }
        ]}
        accentColor="#06b6d4"
        accentColorLight="#0891b2"
        accentColorVeryLight="#67e8f9"
      />
    ),
    'vodovodni-sistemi-cistih-prostorov': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'water', name: '💧 Sistem Vode', description: 'Tok in monitoring vodnega sistema', component: <WaterSystemFlow /> }
        ]}
        accentColor="#06b6d4"
        accentColorLight="#0891b2"
        accentColorVeryLight="#67e8f9"
      />
    ),
    'media-fill-test': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'media-fill-3d', name: '🧪 3D Aseptični Proces', description: 'Interaktivna 3D simulacija media fill procesa z worst-case koraki in validacijskimi kriteriji', component: <MediaFillValidationSimulator /> }
        ]}
        accentColor="#f59e0b"
        accentColorLight="#d97706"
        accentColorVeryLight="#fbbf24"
      />
    ),
    
    // Lesson 114 - Izolatorska Tehnologija in RABS
    'izolatorji-rabs': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'cleanroom-vs-rabs-vs-isolator', name: '🏭 Primerjava: Cleanroom vs RABS vs Izolator', description: 'Interaktivna 3D primerjava sistemov s particle simulacijo in kontaminacijskim tveganjem', component: <CleanroomVsRABSVsIsolator /> },
          { id: 'gloves-simulator', name: '🧤 Rokavice Simulator', description: 'First-person trening aseptične tehnike v izolatorju', component: <GlovesSimulator /> },
          { id: 'h2o2-decontamination', name: '🧪 H₂O₂ Dekontaminacija', description: 'Animirana vizualizacija cikla dekontaminacije', component: <H2O2DecontaminationCycle /> },
          { id: 'pressure-cascade', name: '💨 Tlačna Kaskada', description: 'Interaktivni simulator tlačnih razlik z motnjami', component: <PressureCascadeSimulator /> },
          { id: 'rabs-vs-isolator-decision', name: '🤔 RABS vs Izolator - Odločitev', description: 'Interaktivno odločitveno drevo za izbiro sistema', component: <RABSvsIsolatorDecisionTree /> }
        ]}
        accentColor="#10b981"
        accentColorLight="#059669"
        accentColorVeryLight="#6ee7b7"
      />
    ),

    // Lesson 115 - CCP in Obvladovanje Tveganj
    'ccp-obvladovanje-tveganj': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'risk-matrix-3d', name: '🎲 Interaktivna Risk Matrix', description: '2D/3D vizualizacija tveganj z drag & drop, barvno kodo in RPN izračunom', component: <InteractiveRiskMatrix /> },
          { id: 'fmea-simulator', name: '🔍 FMEA Simulator', description: 'Interaktiven izračun RPN (S×O×D) z vizualizacijo before/after', component: <FMEASimulator /> },
          { id: 'ccp-identification-game', name: '🎯 CCP Identification Game', description: 'Gaming interakcija za prepoznavanje kritičnih kontrolnih točk', component: <CCPIdentificationGame /> },
          { id: 'risk-decision-tree', name: '📊 Decision Tree - Risk Assessment', description: 'Interaktivno odločitveno drevo za oceno tveganj', component: <RiskDecisionTree /> },
          { id: 'risk-dashboard', name: '⚡ Real-time Risk Dashboard', description: 'Live simulacija tveganj v cleanroom-u z monitoring-om', component: <RealTimeRiskDashboard /> }
        ]}
        accentColor="#ef4444"
        accentColorLight="#dc2626"
        accentColorVeryLight="#f87171"
      />
    ),

    // Lesson 116 - Dokumentacija in Data Integrity (ALCOA+)
    'dokumentacija-data-integrity': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'alcoa-checker', name: '🔍 ALCOA+ Interactive Checker', description: 'Preglej dokumente in identificiraj kršitve ALCOA+ principov', component: <ALCOAChecker /> },
          { id: 'audit-trail-timeline', name: '🕵️ Audit Trail Timeline', description: 'Interaktivna časovnica elektronskih sprememb z detekcijo sumljivih aktivnosti', component: <AuditTrailSimulator /> },
          { id: 'document-lifecycle-game', name: '📄 Document Lifecycle Game', description: 'Drag & drop igra upravljanja dokumentov od podpisa do arhiva', component: <DocumentLifecycleGame /> },
          { id: 'violation-detector', name: '⚠️ Violation Detector', description: 'Od manjših napak do kazenskega pregona - scenariji kršitev', component: <ViolationDetector /> },
          { id: 'electronic-vs-paper', name: '📱💼 Electronic vs Paper', description: 'Primerjava elektronskih in papirnatih zapisov s 21 CFR Part 11', component: <ElectronicVsPaper /> }
        ]}
        accentColor="#f59e0b"
        accentColorLight="#d97706"
        accentColorVeryLight="#fbbf24"
      />
    ),

    // Lesson 117 - Dezinfekcija, Razkuževanje in Sporicidno Delovanje
    'dezinfekcija-razkuževanje': (
      <LazyVisualizationSelector
        visualizations={[
          { id: 'disinfectant-spectrum', name: '🧪 Dezinficiens Spekter Simulator', description: 'Interaktivna simulacija delovanja različnih dezinficiensov na mikroorganizme', component: <DisinfectantSpectrum /> },
          { id: 'wet-contact-time', name: '⏱️ Wet Contact Time Challenge', description: 'Gaming simulator - počakaj dovolj dolgo ali bakterije preživijo!', component: <WetContactTimeChallenge /> },
          { id: 'rotation-scheduler', name: '🔄 Rotacijski Urnik Scheduler', description: '5-tedenski planer rotacije z resistance meter', component: <RotationScheduler /> },
          { id: 'biofilm-battle', name: '🛡️ Biofilm Battle Simulator', description: '3-stopenjski proces odstranjevanja biofilma', component: <BiofilmBattle /> },
          { id: 'cleaning-decision-tree', name: '🌳 Cleaning Decision Tree', description: 'Interaktivno odločitveno drevo čiščenje → dezinfekcija', component: <CleaningDecisionTree /> }
        ]}
        accentColor="#10b981"
        accentColorLight="#059669"
        accentColorVeryLight="#34d399"
      />
    )
  }
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2, duration: 0.5 }}
      style={{
        marginBottom: 30,
        padding: 24,
        background: 'linear-gradient(135deg, rgba(124, 58, 237, 0.1) 0%, rgba(167, 139, 250, 0.05) 100%)',
        borderRadius: 20,
        border: '2px solid rgba(124, 58, 237, 0.2)',
        boxShadow: '0 8px 32px rgba(124, 58, 237, 0.15)'
      }}
    >
      {visualizations[slug] || <AdvancedAirflowVisualization />}
    </motion.div>
  )
}

// ============================================
// LESSON 115: IZOLATORSKA TEHNOLOGIJA IN RABS
// ============================================

// INTERAKCIJA 1: Primerjava Cleanroom vs RABS vs Izolator
export function CleanroomVsRABSVsIsolator() {
  const [activeSystem, setActiveSystem] = useState<'cleanroom' | 'rabs' | 'isolator'>('cleanroom')
  const [showOperator, setShowOperator] = useState(true)
  const [isAnimating, setIsAnimating] = useState(true)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  const systems = {
    cleanroom: {
      name: 'Tradicionalen Cleanroom Grade A',
      color: '#ef4444',
      particleCount: 3500000,
      contamination: 100,
      description: 'Operator v popolni zaščitni opremi ima direkten stik z izdelkom',
      features: ['Potrebna obsežna zaščitna oprema', 'Visoki operativni stroški', 'Odvisnost od vedenja operaterja', 'Visoko tveganje kontaminacije']
    },
    rabs: {
      name: 'RABS System',
      color: '#f59e0b',
      particleCount: 30000,
      contamination: 30,
      description: 'Fizična pregrada z manipulacijo skozi rokavice/vrata',
      features: ['Zmanjšana zaščitna oprema', 'Fizična bariera med operaterjem in izdelkom', 'Odprtine za dostop (transfer)', 'Srednje tveganje']
    },
    isolator: {
      name: 'Popoln Izolator',
      color: '#22c55e',
      particleCount: 80,
      contamination: 5,
      description: 'Popolna separacija z manipulacijo samo skozi rokavice',
      features: ['Minimalna zaščitna oprema', 'Popolna fizična bariera', 'H₂O₂ dekontaminacija', 'Najnižje tveganje kontaminacije']
    }
  }

  const currentSystem = systems[activeSystem]

  // Three.js 3D vizualizacija
  useEffect(() => {
    if (!canvasRef.current) return
    const canvas = canvasRef.current
    
    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x0f172a)
    
    const camera = new THREE.PerspectiveCamera(50, canvas.width / canvas.height, 0.1, 1000)
    camera.position.set(0, 2, 8)
    camera.lookAt(0, 0, 0)
    
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true })
    renderer.setSize(canvas.width, canvas.height)
    renderer.shadowMap.enabled = true
    
    // Lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4)
    scene.add(ambientLight)
    
    const spotLight = new THREE.SpotLight(0xffffff, 0.8)
    spotLight.position.set(0, 10, 5)
    spotLight.castShadow = true
    scene.add(spotLight)
    
    // Prostor (box)
    const roomGeometry = new THREE.BoxGeometry(6, 4, 4)
    const roomMaterial = new THREE.MeshPhongMaterial({ 
      color: 0x1e293b, 
      transparent: true, 
      opacity: 0.2,
      side: THREE.DoubleSide
    })
    const room = new THREE.Mesh(roomGeometry, roomMaterial)
    scene.add(room)
    
    // Pod (floor)
    const floorGeometry = new THREE.PlaneGeometry(6, 4)
    const floorMaterial = new THREE.MeshPhongMaterial({ color: 0x334155 })
    const floor = new THREE.Mesh(floorGeometry, floorMaterial)
    floor.rotation.x = -Math.PI / 2
    floor.position.y = -2
    floor.receiveShadow = true
    scene.add(floor)
    
    // Operator (simplified human)
    const operatorGroup = new THREE.Group()
    
    // Glava
    const headGeometry = new THREE.SphereGeometry(0.3, 16, 16)
    const headMaterial = new THREE.MeshPhongMaterial({ color: 0xffdbac })
    const head = new THREE.Mesh(headGeometry, headMaterial)
    head.position.y = 1.5
    operatorGroup.add(head)
    
    // Telo
    const bodyGeometry = new THREE.CylinderGeometry(0.4, 0.5, 1.2, 16)
    const bodyMaterial = new THREE.MeshPhongMaterial({ color: 0x3b82f6 })
    const body = new THREE.Mesh(bodyGeometry, bodyMaterial)
    body.position.y = 0.6
    operatorGroup.add(body)
    
    // Roke
    const armGeometry = new THREE.CylinderGeometry(0.15, 0.15, 1, 8)
    const armMaterial = new THREE.MeshPhongMaterial({ color: 0x3b82f6 })
    
    const leftArm = new THREE.Mesh(armGeometry, armMaterial)
    leftArm.position.set(-0.6, 0.6, 0)
    leftArm.rotation.z = Math.PI / 6
    operatorGroup.add(leftArm)
    
    const rightArm = new THREE.Mesh(armGeometry, armMaterial)
    rightArm.position.set(0.6, 0.6, 0)
    rightArm.rotation.z = -Math.PI / 6
    operatorGroup.add(rightArm)
    
    operatorGroup.position.set(-2, -1, 0)
    if (showOperator) scene.add(operatorGroup)
    
    // Bariera (za RABS in Isolator)
    let barrier: THREE.Mesh | null = null
    if (activeSystem === 'rabs' || activeSystem === 'isolator') {
      const barrierGeometry = new THREE.PlaneGeometry(0.1, 3.5)
      const barrierMaterial = new THREE.MeshPhongMaterial({ 
        color: activeSystem === 'rabs' ? 0xfbbf24 : 0x10b981,
        transparent: true,
        opacity: 0.6
      })
      barrier = new THREE.Mesh(barrierGeometry, barrierMaterial)
      barrier.position.set(0, 0, 0)
      scene.add(barrier)
      
      // Rokavice (gloves) za manipulacijo
      const gloveGeometry = new THREE.SphereGeometry(0.2, 8, 8)
      const gloveMaterial = new THREE.MeshPhongMaterial({ color: 0x1e40af })
      
      const glove1 = new THREE.Mesh(gloveGeometry, gloveMaterial)
      glove1.position.set(-0.5, 0.3, 0)
      scene.add(glove1)
      
      const glove2 = new THREE.Mesh(gloveGeometry, gloveMaterial)
      glove2.position.set(0.5, 0.3, 0)
      scene.add(glove2)
    }
    
    // Izdelek (product)
    const productGeometry = new THREE.CylinderGeometry(0.15, 0.15, 0.5, 16)
    const productMaterial = new THREE.MeshPhongMaterial({ color: 0xa855f7 })
    const product = new THREE.Mesh(productGeometry, productMaterial)
    product.position.set(2, -1.5, 0)
    product.castShadow = true
    scene.add(product)
    
    // Delci (particles)
    const particleCount = activeSystem === 'cleanroom' ? 1000 : activeSystem === 'rabs' ? 100 : 10
    const particlesGeometry = new THREE.BufferGeometry()
    const positions = new Float32Array(particleCount * 3)
    const velocities: number[] = []
    
    for (let i = 0; i < particleCount; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 6
      positions[i * 3 + 1] = Math.random() * 4 - 2
      positions[i * 3 + 2] = (Math.random() - 0.5) * 4
      velocities.push((Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02, (Math.random() - 0.5) * 0.02)
    }
    
    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))
    
    const particlesMaterial = new THREE.PointsMaterial({
      color: new THREE.Color(currentSystem.color),
      size: 0.05,
      transparent: true,
      opacity: 0.8
    })
    
    const particleSystem = new THREE.Points(particlesGeometry, particlesMaterial)
    scene.add(particleSystem)
    
    // Animacija
    let time = 0
    const animate = () => {
      if (!isAnimating) return
      
      time += 0.01
      
      // Rotiraj kamero namesto scene
      camera.position.x = Math.sin(time * 0.5) * 2
      
      // Animiraj delce
      const positionAttribute = particleSystem.geometry.attributes.position
      if (positionAttribute) {
        const positions = positionAttribute.array as Float32Array
        for (let i = 0; i < particleCount; i++) {
          positions[i * 3] += velocities[i * 3]
          positions[i * 3 + 1] += velocities[i * 3 + 1]
          positions[i * 3 + 2] += velocities[i * 3 + 2]
          
          // Bounce off walls
          if (Math.abs(positions[i * 3]) > 3) velocities[i * 3] *= -1
          if (Math.abs(positions[i * 3 + 1]) > 2) velocities[i * 3 + 1] *= -1
          if (Math.abs(positions[i * 3 + 2]) > 2) velocities[i * 3 + 2] *= -1
        }
        positionAttribute.needsUpdate = true
      }
      
      renderer.render(scene, camera)
      requestAnimationFrame(animate)
    }
    
    animate()
    
    return () => {
      scene.clear()
      renderer.dispose()
    }
  }, [activeSystem, showOperator, isAnimating])

  return (
    <div style={{ padding: 20 }}>
      <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
        🏭 Primerjava Sistemov: Cleanroom vs RABS vs Izolator
      </h2>
      <p style={{ fontSize: 16, color: '#94a3b8', marginBottom: 30 }}>
        Interaktivna 3D primerjava različnih pristopov k aseptični proizvodnji
      </p>

      {/* Izbira sistema */}
      <div style={{ display: 'flex', gap: 15, marginBottom: 30, flexWrap: 'wrap' }}>
        {Object.entries(systems).map(([key, system]) => (
          <motion.button
            key={key}
            onClick={() => setActiveSystem(key as any)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              flex: 1,
              minWidth: 200,
              padding: 20,
              background: activeSystem === key 
                ? `linear-gradient(135deg, ${system.color}dd, ${system.color}aa)` 
                : 'rgba(30, 41, 59, 0.6)',
              border: `2px solid ${activeSystem === key ? system.color : 'rgba(148, 163, 184, 0.2)'}`,
              borderRadius: 15,
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
          >
            <div style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 8 }}>
              {system.name}
            </div>
            <div style={{ fontSize: 14, color: '#cbd5e1' }}>
              Tveganje: {system.contamination}%
            </div>
          </motion.button>
        ))}
      </div>

      {/* 3D Canvas */}
      <div style={{ 
        background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.9), rgba(30, 41, 59, 0.9))',
        borderRadius: 20,
        padding: 20,
        marginBottom: 30,
        border: '2px solid rgba(148, 163, 184, 0.2)'
      }}>
        <canvas ref={canvasRef} width={800} height={500} style={{ width: '100%', height: 'auto', borderRadius: 15 }} />
        
        <div style={{ display: 'flex', gap: 15, marginTop: 20 }}>
          <motion.button
            onClick={() => setShowOperator(!showOperator)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              flex: 1,
              padding: 15,
              background: showOperator ? 'linear-gradient(135deg, #3b82f6, #2563eb)' : 'rgba(30, 41, 59, 0.6)',
              border: '2px solid rgba(59, 130, 246, 0.3)',
              borderRadius: 12,
              color: '#fff',
              fontWeight: 600,
              cursor: 'pointer'
            }}
          >
            {showOperator ? '👤 Skrij Operaterja' : '👤 Prikaži Operaterja'}
          </motion.button>
          
          <motion.button
            onClick={() => setIsAnimating(!isAnimating)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              flex: 1,
              padding: 15,
              background: isAnimating ? 'linear-gradient(135deg, #10b981, #059669)' : 'rgba(30, 41, 59, 0.6)',
              border: '2px solid rgba(16, 185, 129, 0.3)',
              borderRadius: 12,
              color: '#fff',
              fontWeight: 600,
              cursor: 'pointer'
            }}
          >
            {isAnimating ? '⏸️ Pavza' : '▶️ Animiraj'}
          </motion.button>
        </div>
      </div>

      {/* Podatki sistema */}
      <div style={{
        background: `linear-gradient(135deg, ${currentSystem.color}22, ${currentSystem.color}11)`,
        border: `2px solid ${currentSystem.color}55`,
        borderRadius: 20,
        padding: 25,
        marginBottom: 30
      }}>
        <h3 style={{ fontSize: 22, fontWeight: 700, color: currentSystem.color, marginBottom: 15 }}>
          {currentSystem.name}
        </h3>
        <p style={{ fontSize: 16, color: '#cbd5e1', marginBottom: 20 }}>
          {currentSystem.description}
        </p>
        
        {/* Metrike */}
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 15, marginBottom: 20 }}>
          <div style={{ background: 'rgba(15, 23, 42, 0.6)', padding: 15, borderRadius: 12 }}>
            <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Emisija delcev/min</div>
            <div style={{ fontSize: 24, fontWeight: 700, color: '#fff' }}>
              {currentSystem.particleCount.toLocaleString()}
            </div>
          </div>
          
          <div style={{ background: 'rgba(15, 23, 42, 0.6)', padding: 15, borderRadius: 12 }}>
            <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Kontaminacijsko tveganje</div>
            <div style={{ fontSize: 24, fontWeight: 700, color: currentSystem.color }}>
              {currentSystem.contamination}%
            </div>
          </div>
        </div>
        
        {/* Features */}
        <div style={{ display: 'grid', gap: 10 }}>
          {currentSystem.features.map((feature, idx) => (
            <motion.div
              key={idx}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: idx * 0.1 }}
              style={{
                padding: 12,
                background: 'rgba(15, 23, 42, 0.4)',
                borderRadius: 10,
                borderLeft: `4px solid ${currentSystem.color}`,
                color: '#e2e8f0'
              }}
            >
              ✓ {feature}
            </motion.div>
          ))}
        </div>
      </div>

      {/* Graf kontaminacijskega tveganja */}
      <div style={{
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 20,
        padding: 25
      }}>
        <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
          📊 Primerjava Kontaminacijskega Tveganja
        </h3>
        <div style={{ display: 'flex', alignItems: 'flex-end', gap: 20, height: 200 }}>
          {Object.entries(systems).map(([key, system]) => (
            <div key={key} style={{ flex: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 10 }}>
              <motion.div
                initial={{ height: 0 }}
                animate={{ height: `${system.contamination * 1.8}px` }}
                transition={{ duration: 0.8, ease: 'easeOut' }}
                style={{
                  width: '100%',
                  background: `linear-gradient(to top, ${system.color}, ${system.color}88)`,
                  borderRadius: '10px 10px 0 0',
                  position: 'relative'
                }}
              >
                <div style={{
                  position: 'absolute',
                  top: -30,
                  left: 0,
                  right: 0,
                  textAlign: 'center',
                  fontSize: 18,
                  fontWeight: 700,
                  color: system.color
                }}>
                  {system.contamination}%
                </div>
              </motion.div>
              <div style={{ fontSize: 14, fontWeight: 600, color: '#cbd5e1', textAlign: 'center' }}>
                {system.name.split(' ')[0]}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

// INTERAKCIJA 2: Rokavice Simulator - Aseptična Tehnika
export function GlovesSimulator() {
  const [gameState, setGameState] = useState<'intro' | 'playing' | 'completed'>('intro')
  const [currentTask, setCurrentTask] = useState(0)
  const [score, setScore] = useState(100)
  const [timeLeft, setTimeLeft] = useState(60)
  const [glovePosition, setGlovePosition] = useState({ left: { x: 200, y: 300 }, right: { x: 600, y: 300 } })
  const [targetPosition, setTargetPosition] = useState({ x: 400, y: 250 })
  const [contaminations, setContaminations] = useState(0)
  const [completedTasks, setCompletedTasks] = useState(0)
  const containerRef = useRef<HTMLDivElement>(null)

  const tasks = [
    { id: 1, name: 'Odpri vial', icon: '💊', description: 'Dvigni pokrovček brez dotika sten', points: 20 },
    { id: 2, name: 'Prenesi material', icon: '🔬', description: 'Prenesi predmet brez stika s stenami izolatorja', points: 20 },
    { id: 3, name: 'Zapri pokrovček', icon: '🔒', description: 'Zapri pokrovček aseptično', points: 20 },
    { id: 4, name: 'Odstrani odpadek', icon: '🗑️', description: 'Odstrani uporabljeni material', points: 15 },
    { id: 5, name: 'Končna pozicija', icon: '✅', description: 'Vrni roke v začetni položaj', points: 25 }
  ]

  const currentTaskData = tasks[currentTask]

  // Timer
  useEffect(() => {
    if (gameState !== 'playing') return
    
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          setGameState('completed')
          return 0
        }
        return prev - 1
      })
    }, 1000)
    
    return () => clearInterval(timer)
  }, [gameState])

  // Mouse tracking za rokavice
  useEffect(() => {
    if (gameState !== 'playing' || !containerRef.current) return
    
    const handleMouseMove = (e: MouseEvent) => {
      const rect = containerRef.current?.getBoundingClientRect()
      if (!rect) return
      
      const x = e.clientX - rect.left
      const y = e.clientY - rect.top
      
      // Leva rokavica sledi miški z offset
      setGlovePosition(prev => ({
        left: { x: Math.max(50, Math.min(x - 100, rect.width - 150)), y: Math.max(50, Math.min(y, rect.height - 50)) },
        right: { x: Math.max(150, Math.min(x + 100, rect.width - 50)), y: Math.max(50, Math.min(y, rect.height - 50)) }
      }))
      
      // Check če smo blizu targeta
      const distance = Math.sqrt(Math.pow(x - targetPosition.x, 2) + Math.pow(y - targetPosition.y, 2))
      if (distance < 40) {
        completeTask()
      }
      
      // Check za dotik sten (kontaminacija)
      if (x < 100 || x > rect.width - 100 || y < 100 || y > rect.height - 100) {
        if (Math.random() > 0.98) { // Občasna kontaminacija
          handleContamination()
        }
      }
    }
    
    containerRef.current.addEventListener('mousemove', handleMouseMove)
    return () => containerRef.current?.removeEventListener('mousemove', handleMouseMove)
  }, [gameState, targetPosition, currentTask])

  const startGame = () => {
    setGameState('playing')
    setScore(100)
    setTimeLeft(60)
    setCurrentTask(0)
    setContaminations(0)
    setCompletedTasks(0)
  }

  const completeTask = () => {
    if (currentTask >= tasks.length - 1) {
      setGameState('completed')
      setCompletedTasks(prev => prev + 1)
      return
    }
    
    setScore(prev => Math.min(100, prev + tasks[currentTask].points))
    setCompletedTasks(prev => prev + 1)
    setCurrentTask(prev => prev + 1)
    
    // Novi target za naslednje opravilo
    setTargetPosition({
      x: 200 + Math.random() * 400,
      y: 150 + Math.random() * 200
    })
  }

  const handleContamination = () => {
    setContaminations(prev => prev + 1)
    setScore(prev => Math.max(0, prev - 10))
  }

  const getFinalGrade = () => {
    if (score >= 90) return { grade: 'A', color: '#22c55e', text: 'Odlično!' }
    if (score >= 75) return { grade: 'B', color: '#3b82f6', text: 'Dobro!' }
    if (score >= 60) return { grade: 'C', color: '#f59e0b', text: 'Zadovoljivo' }
    return { grade: 'D', color: '#ef4444', text: 'Potrebna vaja' }
  }

  if (gameState === 'intro') {
    return (
      <div style={{ padding: 20 }}>
        <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
          🧤 Simulator Aseptične Tehnike v Izolatorju
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8', marginBottom: 30 }}>
          Treniraj manipulacijo skozi rokavice izolatorja. Izvedi naloge hitro in brez kontaminacije!
        </p>

        <div style={{
          background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(37, 99, 235, 0.1))',
          border: '2px solid rgba(59, 130, 246, 0.3)',
          borderRadius: 20,
          padding: 30,
          marginBottom: 30
        }}>
          <h3 style={{ fontSize: 22, fontWeight: 700, color: '#3b82f6', marginBottom: 20 }}>
            📋 Navodila
          </h3>
          <div style={{ display: 'grid', gap: 15 }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: 15 }}>
              <div style={{ fontSize: 32 }}>🖱️</div>
              <div>
                <div style={{ fontWeight: 600, color: '#fff' }}>Premikaj miško</div>
                <div style={{ fontSize: 14, color: '#94a3b8' }}>Nadzoruj obe rokavici hkrati</div>
              </div>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: 15 }}>
              <div style={{ fontSize: 32 }}>🎯</div>
              <div>
                <div style={{ fontWeight: 600, color: '#fff' }}>Doseži cilje</div>
                <div style={{ fontSize: 14, color: '#94a3b8' }}>Premakni se do označenih predmetov</div>
              </div>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: 15 }}>
              <div style={{ fontSize: 32 }}>⚠️</div>
              <div>
                <div style={{ fontWeight: 600, color: '#fff' }}>Izogibaj se stenam</div>
                <div style={{ fontSize: 14, color: '#94a3b8' }}>Vsak dotik zmanjša sterilnost</div>
              </div>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: 15 }}>
              <div style={{ fontSize: 32 }}>⏱️</div>
              <div>
                <div style={{ fontWeight: 600, color: '#fff' }}>Čas: 60 sekund</div>
                <div style={{ fontSize: 14, color: '#94a3b8' }}>Izvedi vse naloge pred iztekom časa</div>
              </div>
            </div>
          </div>
        </div>

        <motion.button
          onClick={startGame}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            width: '100%',
            padding: 20,
            background: 'linear-gradient(135deg, #3b82f6, #2563eb)',
            border: 'none',
            borderRadius: 15,
            color: '#fff',
            fontSize: 20,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          🚀 Začni Simulacijo
        </motion.button>
      </div>
    )
  }

  if (gameState === 'completed') {
    const finalGrade = getFinalGrade()
    
    return (
      <div style={{ padding: 20 }}>
        <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
          🏆 Simulacija Končana!
        </h2>
        
        <div style={{
          background: `linear-gradient(135deg, ${finalGrade.color}33, ${finalGrade.color}11)`,
          border: `2px solid ${finalGrade.color}`,
          borderRadius: 20,
          padding: 40,
          marginBottom: 30,
          textAlign: 'center'
        }}>
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ type: 'spring', duration: 0.8 }}
            style={{ fontSize: 120, fontWeight: 900, color: finalGrade.color, marginBottom: 20 }}
          >
            {finalGrade.grade}
          </motion.div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
            {finalGrade.text}
          </div>
          <div style={{ fontSize: 48, fontWeight: 900, color: finalGrade.color }}>
            {score} točk
          </div>
        </div>

        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 20, marginBottom: 30 }}>
          <div style={{
            background: 'rgba(34, 197, 94, 0.1)',
            border: '2px solid rgba(34, 197, 94, 0.3)',
            borderRadius: 15,
            padding: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 5 }}>Opravljene naloge</div>
            <div style={{ fontSize: 36, fontWeight: 700, color: '#22c55e' }}>
              {completedTasks}/{tasks.length}
            </div>
          </div>
          
          <div style={{
            background: 'rgba(239, 68, 68, 0.1)',
            border: '2px solid rgba(239, 68, 68, 0.3)',
            borderRadius: 15,
            padding: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 5 }}>Kontaminacije</div>
            <div style={{ fontSize: 36, fontWeight: 700, color: '#ef4444' }}>
              {contaminations}
            </div>
          </div>
          
          <div style={{
            background: 'rgba(59, 130, 246, 0.1)',
            border: '2px solid rgba(59, 130, 246, 0.3)',
            borderRadius: 15,
            padding: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 5 }}>Preostali čas</div>
            <div style={{ fontSize: 36, fontWeight: 700, color: '#3b82f6' }}>
              {timeLeft}s
            </div>
          </div>
        </div>

        <motion.button
          onClick={startGame}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            width: '100%',
            padding: 20,
            background: 'linear-gradient(135deg, #3b82f6, #2563eb)',
            border: 'none',
            borderRadius: 15,
            color: '#fff',
            fontSize: 20,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          🔄 Poskusi Ponovno
        </motion.button>
      </div>
    )
  }

  // Playing state
  return (
    <div style={{ padding: 20 }}>
      <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
        🧤 Simulator Aseptične Tehnike
      </h2>
      
      {/* HUD */}
      <div style={{ display: 'flex', gap: 15, marginBottom: 20 }}>
        <div style={{
          flex: 1,
          background: 'rgba(34, 197, 94, 0.1)',
          border: '2px solid rgba(34, 197, 94, 0.3)',
          borderRadius: 12,
          padding: 15
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Sterilnost</div>
          <div style={{ fontSize: 28, fontWeight: 700, color: '#22c55e' }}>{score}%</div>
        </div>
        
        <div style={{
          flex: 1,
          background: 'rgba(59, 130, 246, 0.1)',
          border: '2px solid rgba(59, 130, 246, 0.3)',
          borderRadius: 12,
          padding: 15
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Čas</div>
          <div style={{ fontSize: 28, fontWeight: 700, color: '#3b82f6' }}>{timeLeft}s</div>
        </div>
        
        <div style={{
          flex: 1,
          background: 'rgba(168, 85, 247, 0.1)',
          border: '2px solid rgba(168, 85, 247, 0.3)',
          borderRadius: 12,
          padding: 15
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Naloga</div>
          <div style={{ fontSize: 28, fontWeight: 700, color: '#a855f7' }}>{currentTask + 1}/{tasks.length}</div>
        </div>
      </div>

      {/* Trenutna naloga */}
      <motion.div
        key={currentTask}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        style={{
          background: 'linear-gradient(135deg, rgba(168, 85, 247, 0.2), rgba(147, 51, 234, 0.1))',
          border: '2px solid rgba(168, 85, 247, 0.3)',
          borderRadius: 15,
          padding: 20,
          marginBottom: 20,
          textAlign: 'center'
        }}
      >
        <div style={{ fontSize: 48, marginBottom: 10 }}>{currentTaskData.icon}</div>
        <div style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
          {currentTaskData.name}
        </div>
        <div style={{ fontSize: 14, color: '#94a3b8' }}>
          {currentTaskData.description}
        </div>
      </motion.div>

      {/* Igralno območje - Izolator */}
      <div
        ref={containerRef}
        style={{
          position: 'relative',
          width: '100%',
          height: 500,
          background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.9), rgba(30, 41, 59, 0.8))',
          border: '4px solid rgba(59, 130, 246, 0.5)',
          borderRadius: 20,
          overflow: 'hidden',
          cursor: 'none',
          boxShadow: 'inset 0 0 50px rgba(59, 130, 246, 0.2)'
        }}
      >
        {/* Nevarne cone (stene) */}
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          height: 100,
          background: 'linear-gradient(to bottom, rgba(239, 68, 68, 0.3), transparent)',
          pointerEvents: 'none'
        }} />
        <div style={{
          position: 'absolute',
          bottom: 0,
          left: 0,
          right: 0,
          height: 100,
          background: 'linear-gradient(to top, rgba(239, 68, 68, 0.3), transparent)',
          pointerEvents: 'none'
        }} />
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          bottom: 0,
          width: 100,
          background: 'linear-gradient(to right, rgba(239, 68, 68, 0.3), transparent)',
          pointerEvents: 'none'
        }} />
        <div style={{
          position: 'absolute',
          top: 0,
          right: 0,
          bottom: 0,
          width: 100,
          background: 'linear-gradient(to left, rgba(239, 68, 68, 0.3), transparent)',
          pointerEvents: 'none'
        }} />

        {/* Target */}
        <motion.div
          animate={{ scale: [1, 1.2, 1] }}
          transition={{ repeat: Infinity, duration: 1 }}
          style={{
            position: 'absolute',
            left: targetPosition.x - 30,
            top: targetPosition.y - 30,
            width: 60,
            height: 60,
            background: 'radial-gradient(circle, rgba(168, 85, 247, 0.8), rgba(168, 85, 247, 0.2))',
            borderRadius: '50%',
            border: '3px solid #a855f7',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: 32
          }}
        >
          {currentTaskData.icon}
        </motion.div>

        {/* Leva rokavica */}
        <motion.div
          animate={{ x: glovePosition.left.x, y: glovePosition.left.y }}
          transition={{ type: 'spring', stiffness: 300, damping: 20 }}
          style={{
            position: 'absolute',
            left: 0,
            top: 0,
            width: 60,
            height: 80,
            background: 'linear-gradient(135deg, #1e40af, #1e3a8a)',
            borderRadius: '40% 40% 20% 20%',
            border: '3px solid #3b82f6',
            boxShadow: '0 4px 20px rgba(59, 130, 246, 0.5)',
            pointerEvents: 'none'
          }}
        >
          <div style={{
            position: 'absolute',
            bottom: 5,
            left: '50%',
            transform: 'translateX(-50%)',
            fontSize: 24
          }}>
            🤚
          </div>
        </motion.div>

        {/* Desna rokavica */}
        <motion.div
          animate={{ x: glovePosition.right.x, y: glovePosition.right.y }}
          transition={{ type: 'spring', stiffness: 300, damping: 20 }}
          style={{
            position: 'absolute',
            left: 0,
            top: 0,
            width: 60,
            height: 80,
            background: 'linear-gradient(135deg, #1e40af, #1e3a8a)',
            borderRadius: '40% 40% 20% 20%',
            border: '3px solid #3b82f6',
            boxShadow: '0 4px 20px rgba(59, 130, 246, 0.5)',
            pointerEvents: 'none'
          }}
        >
          <div style={{
            position: 'absolute',
            bottom: 5,
            left: '50%',
            transform: 'translateX(-50%) scaleX(-1)',
            fontSize: 24
          }}>
            🤚
          </div>
        </motion.div>
      </div>
    </div>
  )
}



// INTERAKCIJA 3: H₂O₂ Dekontaminacija
export function H2O2DecontaminationCycle() {
  const [phase, setPhase] = useState<'idle' | 'dehumidification' | 'conditioning' | 'injection' | 'decontamination' | 'aeration' | 'validation' | 'completed'>('idle')
  const [progress, setProgress] = useState(0)
  const [humidity, setHumidity] = useState(60)
  const [temperature, setTemperature] = useState(25)
  const [h2o2Concentration, setH2o2Concentration] = useState(0)
  const [bacteriaCount, setBacteriaCount] = useState(1000000)
  const [isRunning, setIsRunning] = useState(false)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  const phases = {
    dehumidification: { name: 'Dehumidifikacija', duration: 20, color: '#3b82f6', icon: '💧' },
    conditioning: { name: 'Kondicioniranje', duration: 15, color: '#8b5cf6', icon: '🌡️' },
    injection: { name: 'Injiciranje H₂O₂', duration: 25, color: '#ec4899', icon: '💉' },
    decontamination: { name: 'Dekontaminacija', duration: 30, color: '#ef4444', icon: '☠️' },
    aeration: { name: 'Aeracija', duration: 25, color: '#10b981', icon: '🌬️' },
    validation: { name: 'Validacija', duration: 10, color: '#22c55e', icon: '✅' }
  }

  // Simulation logic
  useEffect(() => {
    if (!isRunning || phase === 'idle' || phase === 'completed') return

    const interval = setInterval(() => {
      setProgress(prev => {
        const newProgress = prev + 1
        
        // Phase-specific updates
        switch (phase) {
          case 'dehumidification':
            setHumidity(prev => Math.max(40, prev - 0.5))
            if (newProgress >= 100) {
              setPhase('conditioning')
              return 0
            }
            break
            
          case 'conditioning':
            setTemperature(prev => Math.min(30, prev + 0.2))
            if (newProgress >= 100) {
              setPhase('injection')
              return 0
            }
            break
            
          case 'injection':
            setH2o2Concentration(prev => Math.min(450, prev + 8))
            if (newProgress >= 100) {
              setPhase('decontamination')
              return 0
            }
            break
            
          case 'decontamination':
            setBacteriaCount(prev => Math.max(1, Math.floor(prev * 0.93)))
            if (newProgress >= 100) {
              setPhase('aeration')
              return 0
            }
            break
            
          case 'aeration':
            setH2o2Concentration(prev => Math.max(0, prev - 15))
            if (newProgress >= 100) {
              setPhase('validation')
              return 0
            }
            break
            
          case 'validation':
            if (newProgress >= 100) {
              setPhase('completed')
              setIsRunning(false)
              return 0
            }
            break
        }
        
        return newProgress
      })
    }, 100) // Update every 100ms for smooth animation

    return () => clearInterval(interval)
  }, [isRunning, phase])

  // Canvas visualization
  useEffect(() => {
    if (!canvasRef.current) return
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      
      // Background
      ctx.fillStyle = '#0f172a'
      ctx.fillRect(0, 0, canvas.width, canvas.height)
      
      // Izolator outline
      ctx.strokeStyle = '#3b82f6'
      ctx.lineWidth = 3
      ctx.strokeRect(50, 50, canvas.width - 100, canvas.height - 100)
      
      // H₂O₂ cloud visualization
      if (h2o2Concentration > 0) {
        const particles = Math.floor(h2o2Concentration / 10)
        ctx.fillStyle = `rgba(236, 72, 153, ${Math.min(h2o2Concentration / 450, 0.6)})`
        
        for (let i = 0; i < particles; i++) {
          const x = 80 + Math.random() * (canvas.width - 160)
          const y = 80 + Math.random() * (canvas.height - 160)
          const size = 5 + Math.random() * 10
          ctx.beginPath()
          ctx.arc(x, y, size, 0, Math.PI * 2)
          ctx.fill()
        }
      }
      
      // Bacteria visualization
      if (bacteriaCount > 1) {
        ctx.fillStyle = '#ef4444'
        const visibleBacteria = Math.min(Math.floor(bacteriaCount / 10000), 50)
        
        for (let i = 0; i < visibleBacteria; i++) {
          const x = 80 + Math.random() * (canvas.width - 160)
          const y = 80 + Math.random() * (canvas.height - 160)
          ctx.beginPath()
          ctx.arc(x, y, 3, 0, Math.PI * 2)
          ctx.fill()
        }
      }
      
      requestAnimationFrame(animate)
    }
    
    animate()
  }, [h2o2Concentration, bacteriaCount])

  const startCycle = () => {
    setPhase('dehumidification')
    setProgress(0)
    setHumidity(60)
    setTemperature(25)
    setH2o2Concentration(0)
    setBacteriaCount(1000000)
    setIsRunning(true)
  }

  const resetCycle = () => {
    setPhase('idle')
    setProgress(0)
    setHumidity(60)
    setTemperature(25)
    setH2o2Concentration(0)
    setBacteriaCount(1000000)
    setIsRunning(false)
  }

  const getLogReduction = () => {
    const reduction = 1000000 / bacteriaCount
    return Math.log10(reduction).toFixed(1)
  }

  return (
    <div style={{ padding: 20 }}>
      <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
        🧪 H₂O₂ Dekontaminacijski Cikel
      </h2>
      <p style={{ fontSize: 16, color: '#94a3b8', marginBottom: 30 }}>
        Interaktivna simulacija postopka dekontaminacije izolatorja s hidrogenperoksidom
      </p>

      {/* Canvas Visualization */}
      <div style={{
        background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.9), rgba(30, 41, 59, 0.9))',
        borderRadius: 20,
        padding: 20,
        marginBottom: 30,
        border: '2px solid rgba(148, 163, 184, 0.2)'
      }}>
        <canvas ref={canvasRef} width={800} height={400} style={{ width: '100%', height: 'auto', borderRadius: 15 }} />
      </div>

      {/* Controls */}
      <div style={{ display: 'flex', gap: 15, marginBottom: 30 }}>
        <motion.button
          onClick={startCycle}
          disabled={isRunning}
          whileHover={!isRunning ? { scale: 1.05 } : {}}
          whileTap={!isRunning ? { scale: 0.95 } : {}}
          style={{
            flex: 1,
            padding: 15,
            background: isRunning ? 'rgba(100, 116, 139, 0.3)' : 'linear-gradient(135deg, #10b981, #059669)',
            border: '2px solid rgba(16, 185, 129, 0.3)',
            borderRadius: 12,
            color: '#fff',
            fontWeight: 600,
            cursor: isRunning ? 'not-allowed' : 'pointer',
            opacity: isRunning ? 0.5 : 1
          }}
        >
          ▶️ {phase === 'idle' ? 'Začni Cikel' : 'V teku...'}
        </motion.button>
        
        <motion.button
          onClick={resetCycle}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            flex: 1,
            padding: 15,
            background: 'linear-gradient(135deg, #ef4444, #dc2626)',
            border: '2px solid rgba(239, 68, 68, 0.3)',
            borderRadius: 12,
            color: '#fff',
            fontWeight: 600,
            cursor: 'pointer'
          }}
        >
          🔄 Reset
        </motion.button>
      </div>

      {/* Current Phase */}
      {phase !== 'idle' && (
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{
            background: `linear-gradient(135deg, ${phases[phase as keyof typeof phases]?.color || '#3b82f6'}33, ${phases[phase as keyof typeof phases]?.color || '#3b82f6'}11)`,
            border: `2px solid ${phases[phase as keyof typeof phases]?.color || '#3b82f6'}`,
            borderRadius: 15,
            padding: 20,
            marginBottom: 30,
            textAlign: 'center'
          }}
        >
          <div style={{ fontSize: 48, marginBottom: 10 }}>{phases[phase as keyof typeof phases]?.icon}</div>
          <div style={{ fontSize: 24, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
            {phase === 'completed' ? '✅ Cikel Zaključen' : phases[phase as keyof typeof phases]?.name}
          </div>
          {phase !== 'completed' && (
            <div style={{ 
              width: '100%', 
              height: 10, 
              background: 'rgba(15, 23, 42, 0.6)', 
              borderRadius: 10, 
              overflow: 'hidden',
              marginTop: 15
            }}>
              <motion.div
                animate={{ width: `${progress}%` }}
                style={{ 
                  height: '100%', 
                  background: phases[phase as keyof typeof phases]?.color || '#3b82f6',
                  borderRadius: 10
                }}
              />
            </div>
          )}
        </motion.div>
      )}

      {/* Metrics */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(180px, 1fr))', gap: 20, marginBottom: 30 }}>
        <div style={{
          background: 'rgba(59, 130, 246, 0.1)',
          border: '2px solid rgba(59, 130, 246, 0.3)',
          borderRadius: 15,
          padding: 20,
          textAlign: 'center'
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Vlažnost</div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#3b82f6' }}>
            {humidity.toFixed(1)}%
          </div>
        </div>
        
        <div style={{
          background: 'rgba(139, 92, 246, 0.1)',
          border: '2px solid rgba(139, 92, 246, 0.3)',
          borderRadius: 15,
          padding: 20,
          textAlign: 'center'
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Temperatura</div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#8b5cf6' }}>
            {temperature.toFixed(1)}°C
          </div>
        </div>
        
        <div style={{
          background: 'rgba(236, 72, 153, 0.1)',
          border: '2px solid rgba(236, 72, 153, 0.3)',
          borderRadius: 15,
          padding: 20,
          textAlign: 'center'
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>H₂O₂ (ppm)</div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#ec4899' }}>
            {h2o2Concentration.toFixed(0)}
          </div>
        </div>
        
        <div style={{
          background: 'rgba(239, 68, 68, 0.1)',
          border: '2px solid rgba(239, 68, 68, 0.3)',
          borderRadius: 15,
          padding: 20,
          textAlign: 'center'
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Bakterije (CFU)</div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#ef4444' }}>
            {bacteriaCount.toLocaleString()}
          </div>
        </div>
        
        <div style={{
          background: 'rgba(34, 197, 94, 0.1)',
          border: '2px solid rgba(34, 197, 94, 0.3)',
          borderRadius: 15,
          padding: 20,
          textAlign: 'center'
        }}>
          <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 5 }}>Log Redukcija</div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#22c55e' }}>
            {getLogReduction()}
          </div>
        </div>
      </div>

      {/* Phase Timeline */}
      <div style={{
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 20,
        padding: 25
      }}>
        <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
          📋 Faze Cikla
        </h3>
        <div style={{ display: 'flex', flexDirection: 'column', gap: 10 }}>
          {Object.entries(phases).map(([key, phaseData], idx) => (
            <motion.div
              key={key}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: idx * 0.1 }}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: 15,
                padding: 15,
                background: phase === key ? `${phaseData.color}22` : 'rgba(15, 23, 42, 0.4)',
                borderRadius: 12,
                borderLeft: `4px solid ${phaseData.color}`,
                opacity: phase === key ? 1 : 0.6
              }}
            >
              <div style={{ fontSize: 28 }}>{phaseData.icon}</div>
              <div style={{ flex: 1 }}>
                <div style={{ fontWeight: 600, color: '#fff', marginBottom: 3 }}>{phaseData.name}</div>
                <div style={{ fontSize: 13, color: '#94a3b8' }}>Trajanje: {phaseData.duration}s</div>
              </div>
              {phase === key && isRunning && (
                <div style={{ 
                  width: 12, 
                  height: 12, 
                  borderRadius: '50%', 
                  background: phaseData.color,
                  animation: 'pulse 1s infinite'
                }} />
              )}
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  )
}

// INTERAKCIJA 4: Pressure Cascade Simulator
export function PressureCascadeSimulator() {
  const [fanSpeed, setFanSpeed] = useState(75)
  const [scenario, setScenario] = useState<'normal' | 'door-open' | 'leak' | 'fan-failure'>('normal')
  const [isAlarmActive, setIsAlarmActive] = useState(false)
  const canvasRef = useRef<HTMLCanvasElement>(null)

  const zones = [
    { name: 'Okolica', basePressure: 0, color: '#64748b' },
    { name: 'Cleanroom C', basePressure: 15, color: '#3b82f6' },
    { name: 'RABS', basePressure: 25, color: '#8b5cf6' },
    { name: 'Izolator', basePressure: 50, color: '#22c55e' }
  ]

  const calculatePressures = () => {
    const modifier = fanSpeed / 75 // 75 je baseline
    
    switch (scenario) {
      case 'door-open':
        return [0, 15 * modifier * 0.6, 25 * modifier * 0.7, 50 * modifier * 0.8]
      case 'leak':
        return [0, 15 * modifier * 0.8, 25 * modifier * 0.5, 50 * modifier * 0.4]
      case 'fan-failure':
        return [0, 15 * modifier * 0.3, 25 * modifier * 0.2, 50 * modifier * 0.1]
      default:
        return [0, 15 * modifier, 25 * modifier, 50 * modifier]
    }
  }

  const pressures = calculatePressures()

  // Check for alarms
  useEffect(() => {
    const isolatorPressure = pressures[3]
    const cleanroomPressure = pressures[1]
    
    if (isolatorPressure < 30 || cleanroomPressure < 10) {
      setIsAlarmActive(true)
    } else {
      setIsAlarmActive(false)
    }
  }, [pressures])

  // Canvas visualization
  useEffect(() => {
    if (!canvasRef.current) return
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    let particleTime = 0

    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      particleTime += 0.02
      
      // Draw zones as rectangles
      const zoneWidth = canvas.width / 4
      zones.forEach((zone, idx) => {
        const x = idx * zoneWidth
        const pressure = pressures[idx]
        
        // Zone background
        ctx.fillStyle = `${zone.color}22`
        ctx.fillRect(x, 0, zoneWidth, canvas.height)
        
        // Zone border
        ctx.strokeStyle = zone.color
        ctx.lineWidth = 2
        ctx.strokeRect(x, 0, zoneWidth, canvas.height)
        
        // Pressure text
        ctx.fillStyle = '#fff'
        ctx.font = 'bold 20px Inter'
        ctx.textAlign = 'center'
        ctx.fillText(`${pressure.toFixed(0)} Pa`, x + zoneWidth / 2, 40)
        
        ctx.font = '14px Inter'
        ctx.fillStyle = '#94a3b8'
        ctx.fillText(zone.name, x + zoneWidth / 2, 65)
        
        // Airflow particles
        if (idx < zones.length - 1) {
          const flowStrength = Math.max(0, pressures[idx + 1] - pressures[idx]) / 10
          
          for (let i = 0; i < flowStrength * 3; i++) {
            const particleX = x + zoneWidth + Math.sin(particleTime + i) * 20
            const particleY = 100 + (i * 30 + particleTime * 50) % (canvas.height - 100)
            
            ctx.fillStyle = `${zone.color}99`
            ctx.beginPath()
            ctx.arc(particleX, particleY, 3, 0, Math.PI * 2)
            ctx.fill()
            
            // Arrow
            ctx.strokeStyle = `${zone.color}99`
            ctx.lineWidth = 2
            ctx.beginPath()
            ctx.moveTo(particleX - 10, particleY)
            ctx.lineTo(particleX + 10, particleY)
            ctx.lineTo(particleX + 5, particleY - 5)
            ctx.moveTo(particleX + 10, particleY)
            ctx.lineTo(particleX + 5, particleY + 5)
            ctx.stroke()
          }
        }
      })
      
      requestAnimationFrame(animate)
    }
    
    animate()
  }, [pressures])

  const scenarios = {
    normal: { name: '✅ Normalno delovanje', color: '#22c55e', description: 'Vsi sistemi delujejo pravilno' },
    'door-open': { name: '🚪 Odprtje vrat', color: '#f59e0b', description: 'Transfer komora odprta - padec tlaka' },
    leak: { name: '⚠️ Puščanje', color: '#ef4444', description: 'Poškodovano tesnilo - kritičen padec tlaka' },
    'fan-failure': { name: '🔴 Izpad ventilatorja', color: '#dc2626', description: 'Glavni ventilator ne deluje - ALARM!' }
  }

  return (
    <div style={{ padding: 20 }}>
      <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
        💨 Simulator Tlačne Kaskade
      </h2>
      <p style={{ fontSize: 16, color: '#94a3b8', marginBottom: 30 }}>
        Simuliraj tlačne razlike med conami in vpliv motenj na zračni tok
      </p>

      {/* Alarm */}
      <AnimatePresence>
        {isAlarmActive && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            style={{
              background: 'linear-gradient(135deg, rgba(239, 68, 68, 0.3), rgba(220, 38, 38, 0.2))',
              border: '2px solid #ef4444',
              borderRadius: 15,
              padding: 20,
              marginBottom: 30,
              textAlign: 'center',
              animation: 'pulse 1s infinite'
            }}
          >
            <div style={{ fontSize: 48, marginBottom: 10 }}>🚨</div>
            <div style={{ fontSize: 24, fontWeight: 700, color: '#ef4444', marginBottom: 5 }}>
              ALARM: Tlak pod kritično mejo!
            </div>
            <div style={{ fontSize: 14, color: '#fca5a5' }}>
              Takoj preverite sistem HVAC in tesnila
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Canvas */}
      <div style={{
        background: 'linear-gradient(135deg, rgba(15, 23, 42, 0.9), rgba(30, 41, 59, 0.9))',
        borderRadius: 20,
        padding: 20,
        marginBottom: 30,
        border: '2px solid rgba(148, 163, 184, 0.2)'
      }}>
        <canvas ref={canvasRef} width={1000} height={400} style={{ width: '100%', height: 'auto', borderRadius: 15 }} />
      </div>

      {/* Fan Speed Control */}
      <div style={{
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 15,
        padding: 25,
        marginBottom: 30
      }}>
        <h3 style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 15 }}>
          🌀 Hitrost Ventilatorja: {fanSpeed}%
        </h3>
        <input
          type="range"
          min="0"
          max="100"
          value={fanSpeed}
          onChange={(e) => setFanSpeed(Number(e.target.value))}
          style={{
            width: '100%',
            height: 8,
            borderRadius: 5,
            appearance: 'none',
            background: `linear-gradient(to right, #3b82f6 0%, #3b82f6 ${fanSpeed}%, rgba(100, 116, 139, 0.3) ${fanSpeed}%, rgba(100, 116, 139, 0.3) 100%)`,
            cursor: 'pointer'
          }}
        />
      </div>

      {/* Scenario Selection */}
      <h3 style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 15 }}>
        🎭 Izberi Scenarij
      </h3>
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 15, marginBottom: 30 }}>
        {Object.entries(scenarios).map(([key, scenarioData]) => (
          <motion.button
            key={key}
            onClick={() => setScenario(key as any)}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              padding: 20,
              background: scenario === key 
                ? `linear-gradient(135deg, ${scenarioData.color}dd, ${scenarioData.color}aa)` 
                : 'rgba(30, 41, 59, 0.6)',
              border: `2px solid ${scenario === key ? scenarioData.color : 'rgba(148, 163, 184, 0.2)'}`,
              borderRadius: 15,
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              textAlign: 'center'
            }}
          >
            <div style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 8 }}>
              {scenarioData.name}
            </div>
            <div style={{ fontSize: 13, color: '#cbd5e1' }}>
              {scenarioData.description}
            </div>
          </motion.button>
        ))}
      </div>

      {/* Pressure Table */}
      <div style={{
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 20,
        padding: 25
      }}>
        <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
          📊 Trenutne Tlačne Razlike
        </h3>
        <div style={{ display: 'grid', gap: 15 }}>
          {zones.map((zone, idx) => (
            <div
              key={idx}
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                padding: 15,
                background: 'rgba(15, 23, 42, 0.6)',
                borderRadius: 12,
                borderLeft: `4px solid ${zone.color}`
              }}
            >
              <div style={{ fontWeight: 600, color: '#fff' }}>{zone.name}</div>
              <div style={{ 
                fontSize: 24, 
                fontWeight: 700, 
                color: pressures[idx] < zone.basePressure * 0.5 ? '#ef4444' : zone.color 
              }}>
                {pressures[idx].toFixed(1)} Pa
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

// INTERAKCIJA 5: RABS vs Izolator Decision Tree
export function RABSvsIsolatorDecisionTree() {
  const [answers, setAnswers] = useState<Record<string, string>>({})
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [showResult, setShowResult] = useState(false)

  const questions = [
    {
      id: 'product',
      question: 'Tip proizvoda?',
      options: [
        { value: 'sterile-high', label: 'Sterilni izdelki (visoko tveganje)', rabsScore: 1, isolatorScore: 3 },
        { value: 'sterile-low', label: 'Sterilni izdelki (nizko tveganje)', rabsScore: 2, isolatorScore: 2 },
        { value: 'non-sterile', label: 'Nesterilni izdelki', rabsScore: 3, isolatorScore: 1 }
      ]
    },
    {
      id: 'volume',
      question: 'Volumen proizvodnje?',
      options: [
        { value: 'low', label: 'Nizek (<1000 enot/batch)', rabsScore: 1, isolatorScore: 3 },
        { value: 'medium', label: 'Srednji (1000-10000 enot/batch)', rabsScore: 2, isolatorScore: 2 },
        { value: 'high', label: 'Visok (>10000 enot/batch)', rabsScore: 3, isolatorScore: 1 }
      ]
    },
    {
      id: 'budget',
      question: 'Razpoložljiv budget?',
      options: [
        { value: 'low', label: 'Nizek (<€200,000)', rabsScore: 3, isolatorScore: 1 },
        { value: 'medium', label: 'Srednji (€200,000-€500,000)', rabsScore: 2, isolatorScore: 2 },
        { value: 'high', label: 'Visok (>€500,000)', rabsScore: 1, isolatorScore: 3 }
      ]
    },
    {
      id: 'complexity',
      question: 'Kompleksnost operacij?',
      options: [
        { value: 'simple', label: 'Enostavne (polnjenje, zapiranje)', rabsScore: 3, isolatorScore: 2 },
        { value: 'medium', label: 'Srednje (asembliranje, pakiranje)', rabsScore: 2, isolatorScore: 2 },
        { value: 'complex', label: 'Kompleksne (ročne manipulacije)', rabsScore: 1, isolatorScore: 3 }
      ]
    },
    {
      id: 'sterility',
      question: 'Zahteve po sterilnosti?',
      options: [
        { value: 'grade-b', label: 'Grade B zadostuje', rabsScore: 3, isolatorScore: 1 },
        { value: 'grade-a-low', label: 'Grade A (nizko tveganje)', rabsScore: 2, isolatorScore: 2 },
        { value: 'grade-a-high', label: 'Grade A (visoko tveganje)', rabsScore: 1, isolatorScore: 3 }
      ]
    }
  ]

  const handleAnswer = (questionId: string, value: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }))
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1)
    } else {
      setShowResult(true)
    }
  }

  const calculateRecommendation = () => {
    let rabsScore = 0
    let isolatorScore = 0
    
    questions.forEach(question => {
      const answer = answers[question.id]
      const option = question.options.find(opt => opt.value === answer)
      if (option) {
        rabsScore += option.rabsScore
        isolatorScore += option.isolatorScore
      }
    })
    
    return { rabsScore, isolatorScore }
  }

  const resetQuiz = () => {
    setAnswers({})
    setCurrentQuestion(0)
    setShowResult(false)
  }

  if (showResult) {
    const { rabsScore, isolatorScore } = calculateRecommendation()
    const recommendation = isolatorScore > rabsScore ? 'isolator' : 'rabs'
    const confidence = Math.abs(isolatorScore - rabsScore) / questions.length
    
    return (
      <div style={{ padding: 20 }}>
        <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
          🎯 Priporočilo Sistema
        </h2>
        
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ type: 'spring', duration: 0.8 }}
          style={{
            background: recommendation === 'isolator' 
              ? 'linear-gradient(135deg, rgba(34, 197, 94, 0.3), rgba(16, 185, 129, 0.2))' 
              : 'linear-gradient(135deg, rgba(245, 158, 11, 0.3), rgba(251, 191, 36, 0.2))',
            border: `2px solid ${recommendation === 'isolator' ? '#22c55e' : '#f59e0b'}`,
            borderRadius: 20,
            padding: 40,
            marginBottom: 30,
            textAlign: 'center'
          }}
        >
          <div style={{ fontSize: 80, marginBottom: 20 }}>
            {recommendation === 'isolator' ? '🔒' : '🏭'}
          </div>
          <div style={{ fontSize: 36, fontWeight: 900, color: '#fff', marginBottom: 10 }}>
            {recommendation === 'isolator' ? 'IZOLATOR' : 'RABS'}
          </div>
          <div style={{ fontSize: 18, color: '#cbd5e1', marginBottom: 20 }}>
            Priporočen sistem za vaše potrebe
          </div>
          <div style={{ 
            display: 'inline-block',
            padding: '10px 20px',
            background: `${recommendation === 'isolator' ? '#22c55e' : '#f59e0b'}33`,
            borderRadius: 10,
            fontSize: 16,
            fontWeight: 600,
            color: '#fff'
          }}>
            Zanesljivost: {(confidence * 100).toFixed(0)}%
          </div>
        </motion.div>

        {/* Score Comparison */}
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 20, marginBottom: 30 }}>
          <div style={{
            background: 'rgba(245, 158, 11, 0.1)',
            border: '2px solid rgba(245, 158, 11, 0.3)',
            borderRadius: 15,
            padding: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 18, fontWeight: 600, color: '#f59e0b', marginBottom: 10 }}>
              RABS Ocena
            </div>
            <div style={{ fontSize: 48, fontWeight: 900, color: '#f59e0b' }}>
              {rabsScore}
            </div>
          </div>
          
          <div style={{
            background: 'rgba(34, 197, 94, 0.1)',
            border: '2px solid rgba(34, 197, 94, 0.3)',
            borderRadius: 15,
            padding: 20,
            textAlign: 'center'
          }}>
            <div style={{ fontSize: 18, fontWeight: 600, color: '#22c55e', marginBottom: 10 }}>
              Izolator Ocena
            </div>
            <div style={{ fontSize: 48, fontWeight: 900, color: '#22c55e' }}>
              {isolatorScore}
            </div>
          </div>
        </div>

        {/* Detailed Comparison */}
        <div style={{
          background: 'rgba(30, 41, 59, 0.6)',
          border: '2px solid rgba(148, 163, 184, 0.2)',
          borderRadius: 20,
          padding: 25,
          marginBottom: 30
        }}>
          <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
            ⚖️ Primerjava
          </h3>
          
          <div style={{ display: 'grid', gap: 15 }}>
            {[
              { category: 'Investicija', rabs: '€150,000-€300,000', isolator: '€400,000-€800,000' },
              { category: 'Operativni stroški', rabs: 'Srednji', isolator: 'Nizki' },
              { category: 'Validacija', rabs: 'Zahtevna', isolator: 'Standardizirana' },
              { category: 'Fleksibilnost', rabs: 'Visoka', isolator: 'Srednja' },
              { category: 'Kontaminacijsko tveganje', rabs: 'Srednje (30%)', isolator: 'Nizko (5%)' },
              { category: 'Zaščitna oprema', rabs: 'Obsežna', isolator: 'Minimalna' },
              { category: 'Dekontaminacija', rabs: 'Ročna', isolator: 'Avtomatska (H₂O₂)' }
            ].map((item, idx) => (
              <motion.div
                key={idx}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: idx * 0.1 }}
                style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr 1fr',
                  gap: 15,
                  padding: 15,
                  background: 'rgba(15, 23, 42, 0.6)',
                  borderRadius: 12
                }}
              >
                <div style={{ fontWeight: 600, color: '#fff' }}>{item.category}</div>
                <div style={{ color: '#fbbf24', textAlign: 'center' }}>{item.rabs}</div>
                <div style={{ color: '#10b981', textAlign: 'center' }}>{item.isolator}</div>
              </motion.div>
            ))}
          </div>
        </div>

        <motion.button
          onClick={resetQuiz}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            width: '100%',
            padding: 20,
            background: 'linear-gradient(135deg, #3b82f6, #2563eb)',
            border: 'none',
            borderRadius: 15,
            color: '#fff',
            fontSize: 20,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          🔄 Ponovi Test
        </motion.button>
      </div>
    )
  }

  const currentQ = questions[currentQuestion]

  return (
    <div style={{ padding: 20 }}>
      <h2 style={{ fontSize: 28, fontWeight: 800, marginBottom: 10, color: '#fff' }}>
        🤔 RABS vs Izolator - Odločitveno Drevo
      </h2>
      <p style={{ fontSize: 16, color: '#94a3b8', marginBottom: 30 }}>
        Odgovori na vprašanja in prejmi priporočilo za najbolj ustrezen sistem
      </p>

      {/* Progress */}
      <div style={{ marginBottom: 30 }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 10 }}>
          <span style={{ fontSize: 14, color: '#94a3b8' }}>
            Vprašanje {currentQuestion + 1} od {questions.length}
          </span>
          <span style={{ fontSize: 14, color: '#3b82f6', fontWeight: 600 }}>
            {Math.round(((currentQuestion + 1) / questions.length) * 100)}%
          </span>
        </div>
        <div style={{ 
          width: '100%', 
          height: 8, 
          background: 'rgba(100, 116, 139, 0.3)', 
          borderRadius: 10,
          overflow: 'hidden'
        }}>
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
            style={{ 
              height: '100%', 
              background: 'linear-gradient(to right, #3b82f6, #8b5cf6)',
              borderRadius: 10
            }}
          />
        </div>
      </div>

      {/* Question */}
      <motion.div
        key={currentQuestion}
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        style={{
          background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(139, 92, 246, 0.1))',
          border: '2px solid rgba(59, 130, 246, 0.3)',
          borderRadius: 20,
          padding: 30,
          marginBottom: 30
        }}
      >
        <h3 style={{ fontSize: 24, fontWeight: 700, color: '#fff', marginBottom: 25, textAlign: 'center' }}>
          {currentQ.question}
        </h3>
        
        <div style={{ display: 'grid', gap: 15 }}>
          {currentQ.options.map((option) => (
            <motion.button
              key={option.value}
              onClick={() => handleAnswer(currentQ.id, option.value)}
              whileHover={{ scale: 1.02, x: 10 }}
              whileTap={{ scale: 0.98 }}
              style={{
                padding: 20,
                background: answers[currentQ.id] === option.value 
                  ? 'linear-gradient(135deg, #3b82f6dd, #2563ebaa)' 
                  : 'rgba(30, 41, 59, 0.6)',
                border: '2px solid rgba(59, 130, 246, 0.3)',
                borderRadius: 15,
                color: '#fff',
                fontSize: 16,
                fontWeight: 600,
                cursor: 'pointer',
                textAlign: 'left',
                transition: 'all 0.3s ease'
              }}
            >
              {option.label}
            </motion.button>
          ))}
        </div>
      </motion.div>

      {/* Previous answers */}
      {currentQuestion > 0 && (
        <div style={{
          background: 'rgba(30, 41, 59, 0.6)',
          border: '2px solid rgba(148, 163, 184, 0.2)',
          borderRadius: 15,
          padding: 20
        }}>
          <h4 style={{ fontSize: 16, fontWeight: 600, color: '#94a3b8', marginBottom: 15 }}>
            Tvoji odgovori:
          </h4>
          <div style={{ display: 'flex', flexDirection: 'column', gap: 10 }}>
            {questions.slice(0, currentQuestion).map((q) => {
              const answer = answers[q.id]
              const option = q.options.find(opt => opt.value === answer)
              return (
                <div key={q.id} style={{ fontSize: 14, color: '#cbd5e1' }}>
                  <span style={{ color: '#64748b' }}>{q.question}</span>{' '}
                  <span style={{ color: '#3b82f6', fontWeight: 600 }}>{option?.label}</span>
                </div>
              )
            })}
          </div>
        </div>
      )}
    </div>
  )
}

// ============================================================================
// DATA INTEGRITY VISUALIZATIONS - Dokumentacija in Data Integrity (ALCOA+)
// ============================================================================

// 1. ALCOA+ Interactive Checker
interface ALCOACheckerProps {}

const ALCOAChecker: React.FC<ALCOACheckerProps> = () => {
  const [selectedDocument, setSelectedDocument] = useState(0);
  const [checkedPrinciples, setCheckedPrinciples] = useState<{[key: string]: boolean}>({});
  const [showResults, setShowResults] = useState(false);

  const alcoaPrinciples = [
    { id: 'attributable', name: 'Attributable', icon: '✍️', description: 'Kdo je naredil zapis?' },
    { id: 'legible', name: 'Legible', icon: '👁️', description: 'Ali je čitljivo?' },
    { id: 'contemporaneous', name: 'Contemporaneous', icon: '⏰', description: 'Zapisano ob nastanku?' },
    { id: 'original', name: 'Original', icon: '📄', description: 'Prvi originalni zapis?' },
    { id: 'accurate', name: 'Accurate', icon: '🎯', description: 'Podatki pravilni?' },
    { id: 'complete', name: 'Complete', icon: '✅', description: 'Vsi podatki prisotni?' },
    { id: 'consistent', name: 'Consistent', icon: '🔄', description: 'Brez protislovij?' },
    { id: 'enduring', name: 'Enduring', icon: '⏳', description: 'Trajen, ohranjen?' },
    { id: 'available', name: 'Available', icon: '🔍', description: 'Dostopen ko potrebuješ?' }
  ];

  const documents = [
    {
      id: 0,
      title: 'Batch Record #BR-2024-0042',
      type: 'Manufacturing Record',
      content: `Batch #: BR-2024-0042
Product: Sterilni raztopina 0.9% NaCl
Date: 15.01.2024
Operator: [podpis nečitljiv]
Start time: 09:15
Temperature: 121°C
Pressure: 2.1 bar
Duration: 20 min
End time: [prazno]
Verified by: M. Kovač`,
      violations: ['attributable', 'legible', 'contemporaneous', 'complete'],
      details: {
        attributable: '❌ Podpis operaterja je nečitljiv - ni jasno KDO je naredil',
        legible: '❌ Rokopis je težko berljiv, "podpis nečitljiv"',
        contemporaneous: '❌ End time ni zapisan - morda dodano kasneje?',
        original: '✅ Izgleda kot original dokument',
        accurate: '✅ Vrednosti so v specifikacijah',
        complete: '❌ Manjka končni čas (End time)',
        consistent: '✅ Podatki so konsistentni',
        enduring: '✅ Zapisan na trajnem papirju',
        available: '✅ V arhivu batch recordov'
      }
    },
    {
      id: 1,
      title: 'Laboratory Test Report',
      type: 'Quality Control',
      content: `Sample ID: QC-2024-156
Test: Endotoxin LAL Test
Analyst: [izbrisano] J. Novak
Date: 20.01.2024
Result 1: 0.28 EU/ml [prečrtano]
Result 2: 0.22 EU/ml ✓
Specification: < 0.25 EU/ml
PASS
Reviewed: [20.01.2024]`,
      violations: ['attributable', 'accurate', 'complete'],
      details: {
        attributable: '❌ Prvi analitik je izbrisan - KDO je naredil Result 1?',
        legible: '✅ Večinoma čitljivo',
        contemporaneous: '⚠️ Sumljivo - Result 1 prečrtan, Result 2 točno pod specifikacijo',
        original: '⚠️ Prečrtavanje brez inicialke - ni original?',
        accurate: '❌ Result 1 je prečrtan - zakaj? Cherry picking rezultatov?',
        complete: '❌ Manjka razlog za ponoven test, manjka inicialka pri prečrtavanju',
        consistent: '❌ Dva rezultata brez razlage',
        enduring: '✅ Elektronski zapis v LIMS',
        available: '✅ V QC bazi'
      }
    },
    {
      id: 2,
      title: 'Environmental Monitoring Log',
      type: 'EM Record',
      content: `Cleanroom Grade A
Date: 22.01.2024
Location: Filling line - LAF
08:00 - 0.5 µm: 12 particles/m³ ✓
10:00 - 0.5 µm: 8 particles/m³ ✓
12:00 - 0.5 µm: [dopisano kasneje: 11]
14:00 - 0.5 µm: 9 particles/m³ ✓
16:00 - 0.5 µm: 7 particles/m³ ✓
Note: All within spec
Recorded by: T. Horvat [podpis 23.01.2024]`,
      violations: ['contemporaneous', 'original', 'accurate'],
      details: {
        attributable: '✅ T. Horvat jasno podpisan',
        legible: '✅ Čitljivo',
        contemporaneous: '❌ Podpis je 23.01. - dan KASNEJE! Zapisano iz spomina?',
        original: '❌ 12:00 meritev je dopisana - drugačen rokopis/črnilo',
        accurate: '⚠️ Ali so vrednosti točne če zapisano naslednji dan?',
        complete: '⚠️ Manjka razlog za zamudo zapisa',
        consistent: '✅ Vrednosti konsistentne',
        enduring: '✅ Arhivirano v EM mapo',
        available: '✅ Dostopno'
      }
    },
    {
      id: 3,
      title: 'PERFECT Batch Record',
      type: 'GMP Gold Standard',
      content: `Batch #: BR-2024-0089
Product: WFI (Water for Injection)
Date: 25.01.2024
Operator: Jana Kranjc [podpis] ID:JK-247
Start: 08:30 [timestamp]
Temp: 80.5°C [online logger]
Flow: 15 L/min [online logger]
TOC: 120 ppb (spec: <500 ppb) ✓
End: 10:15 [timestamp]
Reviewed: Dr. M. Horvat [e-signature]
[Elektronski audit trail priložen]`,
      violations: [],
      details: {
        attributable: '✅ Jasno ime, priimek, ID, podpis',
        legible: '✅ Perfektno čitljivo',
        contemporaneous: '✅ Timestampi iz online loggerja - real-time',
        original: '✅ Elektronski originalni zapis',
        accurate: '✅ Podatki iz kalibrirane opreme',
        complete: '✅ Vsi podatki prisotni',
        consistent: '✅ Konsistentni podatki',
        enduring: '✅ Elektronski sistem z backup',
        available: '✅ Dostopen preko sistema'
      }
    }
  ];

  const currentDoc = documents[selectedDocument];
  const totalViolations = currentDoc.violations.length;
  const foundViolations = Object.keys(checkedPrinciples).filter(
    p => checkedPrinciples[p] && currentDoc.violations.includes(p)
  ).length;
  const falsePositives = Object.keys(checkedPrinciples).filter(
    p => checkedPrinciples[p] && !currentDoc.violations.includes(p)
  ).length;

  const handleCheck = (principleId: string) => {
    setCheckedPrinciples(prev => ({
      ...prev,
      [principleId]: !prev[principleId]
    }));
  };

  const handleReset = () => {
    setCheckedPrinciples({});
    setShowResults(false);
  };

  const handleNextDoc = () => {
    setSelectedDocument((prev) => (prev + 1) % documents.length);
    handleReset();
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          🔍 ALCOA+ Interactive Checker
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Preglej dokument in identificiraj kršitve ALCOA+ principov
        </p>
      </div>

      {/* Document Selector */}
      <div style={{ display: 'flex', gap: 10, marginBottom: 30, justifyContent: 'center', flexWrap: 'wrap' }}>
        {documents.map((doc, idx) => (
          <motion.button
            key={doc.id}
            onClick={() => { setSelectedDocument(idx); handleReset(); }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              padding: '12px 20px',
              background: selectedDocument === idx ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' : 'rgba(51, 65, 85, 0.6)',
              border: '2px solid',
              borderColor: selectedDocument === idx ? '#3b82f6' : 'rgba(148, 163, 184, 0.2)',
              borderRadius: 12,
              color: '#fff',
              cursor: 'pointer',
              fontSize: 13,
              fontWeight: 600
            }}
          >
            {doc.title}
          </motion.button>
        ))}
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 30 }}>
        {/* Document Display */}
        <motion.div
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          style={{
            background: 'rgba(30, 41, 59, 0.6)',
            border: '2px solid rgba(148, 163, 184, 0.2)',
            borderRadius: 20,
            padding: 25,
            height: 'fit-content'
          }}
        >
          <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 15 }}>
            <span style={{ fontSize: 24 }}>📋</span>
            <div>
              <h3 style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
                {currentDoc.title}
              </h3>
              <p style={{ fontSize: 13, color: '#64748b' }}>{currentDoc.type}</p>
            </div>
          </div>

          <div style={{
            background: '#fff',
            color: '#000',
            padding: 20,
            borderRadius: 12,
            fontFamily: 'Courier New, monospace',
            fontSize: 13,
            lineHeight: 1.8,
            whiteSpace: 'pre-wrap',
            boxShadow: '0 4px 12px rgba(0,0,0,0.3)'
          }}>
            {currentDoc.content}
          </div>

          <div style={{
            marginTop: 20,
            padding: 15,
            background: 'rgba(234, 179, 8, 0.1)',
            border: '2px solid rgba(234, 179, 8, 0.3)',
            borderRadius: 12
          }}>
            <p style={{ fontSize: 13, color: '#fbbf24', fontWeight: 600 }}>
              💡 Preglej dokument in spodaj označi katere ALCOA+ principe krši!
            </p>
          </div>
        </motion.div>

        {/* ALCOA+ Principles Checklist */}
        <div>
          <div style={{
            background: 'rgba(30, 41, 59, 0.6)',
            border: '2px solid rgba(148, 163, 184, 0.2)',
            borderRadius: 20,
            padding: 25,
            marginBottom: 20
          }}>
            <h3 style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
              ALCOA+ Principi - Kaj je kršeno?
            </h3>

            <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
              {alcoaPrinciples.map((principle) => {
                const isChecked = checkedPrinciples[principle.id];
                const isViolation = currentDoc.violations.includes(principle.id);
                const showDetail = showResults;

                return (
                  <motion.div
                    key={principle.id}
                    whileHover={{ scale: 1.02 }}
                    style={{
                      padding: 15,
                      background: showDetail 
                        ? (isViolation 
                          ? 'rgba(239, 68, 68, 0.1)' 
                          : 'rgba(34, 197, 94, 0.1)')
                        : 'rgba(51, 65, 85, 0.4)',
                      border: '2px solid',
                      borderColor: showDetail
                        ? (isViolation ? '#ef4444' : '#22c55e')
                        : isChecked ? '#3b82f6' : 'rgba(148, 163, 184, 0.2)',
                      borderRadius: 12,
                      cursor: 'pointer',
                      transition: 'all 0.3s'
                    }}
                    onClick={() => !showResults && handleCheck(principle.id)}
                  >
                    <div style={{ display: 'flex', alignItems: 'center', gap: 12 }}>
                      <div style={{
                        width: 24,
                        height: 24,
                        borderRadius: 6,
                        background: isChecked ? '#3b82f6' : 'rgba(148, 163, 184, 0.2)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        fontSize: 14,
                        color: '#fff',
                        fontWeight: 700
                      }}>
                        {isChecked && '✓'}
                      </div>
                      <span style={{ fontSize: 20 }}>{principle.icon}</span>
                      <div style={{ flex: 1 }}>
                        <div style={{ fontSize: 15, fontWeight: 700, color: '#fff', marginBottom: 3 }}>
                          {principle.name}
                        </div>
                        <div style={{ fontSize: 12, color: '#94a3b8' }}>
                          {principle.description}
                        </div>
                      </div>
                    </div>

                    {showDetail && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        style={{
                          marginTop: 12,
                          paddingTop: 12,
                          borderTop: '1px solid rgba(148, 163, 184, 0.2)',
                          fontSize: 13,
                          color: isViolation ? '#fca5a5' : '#86efac'
                        }}
                      >
                        {currentDoc.details[principle.id as keyof typeof currentDoc.details]}
                      </motion.div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          </div>

          {/* Action Buttons */}
          <div style={{ display: 'flex', gap: 12 }}>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowResults(true)}
              disabled={showResults}
              style={{
                flex: 1,
                padding: '15px 0',
                background: showResults 
                  ? 'rgba(100, 116, 139, 0.3)' 
                  : 'linear-gradient(135deg, #10b981, #059669)',
                border: 'none',
                borderRadius: 12,
                color: '#fff',
                fontSize: 16,
                fontWeight: 700,
                cursor: showResults ? 'not-allowed' : 'pointer',
                opacity: showResults ? 0.5 : 1
              }}
            >
              ✅ Preveri Rezultate
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleReset}
              style={{
                flex: 1,
                padding: '15px 0',
                background: 'rgba(100, 116, 139, 0.6)',
                border: '2px solid rgba(148, 163, 184, 0.3)',
                borderRadius: 12,
                color: '#fff',
                fontSize: 16,
                fontWeight: 700,
                cursor: 'pointer'
              }}
            >
              🔄 Ponastavi
            </motion.button>
          </div>

          {/* Results Summary */}
          {showResults && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              style={{
                marginTop: 20,
                padding: 25,
                background: 'rgba(30, 41, 59, 0.6)',
                border: '2px solid rgba(148, 163, 184, 0.2)',
                borderRadius: 20
              }}
            >
              <h3 style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
                📊 Rezultati Analize
              </h3>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 15, marginBottom: 20 }}>
                <div style={{
                  padding: 15,
                  background: 'rgba(34, 197, 94, 0.1)',
                  border: '2px solid rgba(34, 197, 94, 0.3)',
                  borderRadius: 12,
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: 32, fontWeight: 700, color: '#22c55e' }}>
                    {foundViolations}/{totalViolations}
                  </div>
                  <div style={{ fontSize: 13, color: '#86efac', marginTop: 5 }}>
                    Pravilno najdenih kršitev
                  </div>
                </div>

                <div style={{
                  padding: 15,
                  background: 'rgba(239, 68, 68, 0.1)',
                  border: '2px solid rgba(239, 68, 68, 0.3)',
                  borderRadius: 12,
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: 32, fontWeight: 700, color: '#ef4444' }}>
                    {falsePositives}
                  </div>
                  <div style={{ fontSize: 13, color: '#fca5a5', marginTop: 5 }}>
                    Napačno označenih
                  </div>
                </div>
              </div>

              <div style={{
                padding: 15,
                background: foundViolations === totalViolations && falsePositives === 0
                  ? 'rgba(34, 197, 94, 0.1)'
                  : 'rgba(234, 179, 8, 0.1)',
                border: '2px solid',
                borderColor: foundViolations === totalViolations && falsePositives === 0
                  ? 'rgba(34, 197, 94, 0.3)'
                  : 'rgba(234, 179, 8, 0.3)',
                borderRadius: 12,
                marginBottom: 15
              }}>
                <p style={{
                  fontSize: 14,
                  color: foundViolations === totalViolations && falsePositives === 0 ? '#86efac' : '#fbbf24',
                  textAlign: 'center',
                  fontWeight: 600
                }}>
                  {foundViolations === totalViolations && falsePositives === 0
                    ? '🎉 Odlično! Identificiral si vse kršitve brez napak!'
                    : foundViolations === totalViolations
                    ? '👍 Našel si vse kršitve, ampak nekaj si označil po nepotrebnem'
                    : falsePositives === 0
                    ? '💪 Dobro! Nisi označil nič napačnega, ampak nekaj kršitev si spregledal'
                    : '🔍 Preglej še enkrat - nekaj kršitev si spregledal in nekaj napačno označil'}
                </p>
              </div>

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleNextDoc}
                style={{
                  width: '100%',
                  padding: '15px 0',
                  background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',
                  border: 'none',
                  borderRadius: 12,
                  color: '#fff',
                  fontSize: 16,
                  fontWeight: 700,
                  cursor: 'pointer'
                }}
              >
                ➡️ Naslednji Dokument
              </motion.button>
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
};

// 2. Audit Trail Timeline Simulator
interface AuditTrailEntry {
  id: number;
  timestamp: string;
  user: string;
  action: string;
  field: string;
  oldValue: string;
  newValue: string;
  reason?: string;
  suspicious: boolean;
  suspicionReason?: string;
}

const AuditTrailSimulator: React.FC = () => {
  const [selectedRecord, setSelectedRecord] = useState(0);
  const [highlightSuspicious, setHighlightSuspicious] = useState(false);
  const [showAnalysis, setShowAnalysis] = useState(false);

  const records = [
    {
      id: 0,
      title: 'Batch Record BR-2024-0123 - CLEAN',
      type: 'Normal Manufacturing',
      suspiciousCount: 0,
      auditTrail: [
        {
          id: 1,
          timestamp: '2024-01-15 08:30:15',
          user: 'J. Novak (ID: JN-042)',
          action: 'Created',
          field: 'Batch Record',
          oldValue: '-',
          newValue: 'BR-2024-0123',
          reason: 'New batch started',
          suspicious: false
        },
        {
          id: 2,
          timestamp: '2024-01-15 08:35:22',
          user: 'J. Novak (ID: JN-042)',
          action: 'Updated',
          field: 'Start Temperature',
          oldValue: '-',
          newValue: '121.2°C',
          reason: 'Initial reading',
          suspicious: false
        },
        {
          id: 3,
          timestamp: '2024-01-15 10:15:08',
          user: 'J. Novak (ID: JN-042)',
          action: 'Updated',
          field: 'End Temperature',
          oldValue: '-',
          newValue: '121.0°C',
          reason: 'Process completed',
          suspicious: false
        },
        {
          id: 4,
          timestamp: '2024-01-15 10:20:33',
          user: 'M. Horvat (ID: MH-018)',
          action: 'Reviewed',
          field: 'Status',
          oldValue: 'In Progress',
          newValue: 'Completed',
          reason: 'QA review passed',
          suspicious: false
        },
        {
          id: 5,
          timestamp: '2024-01-15 14:45:12',
          user: 'Dr. T. Kovač (ID: TK-003)',
          action: 'Approved',
          field: 'Status',
          oldValue: 'Completed',
          newValue: 'Approved',
          reason: 'Batch released',
          suspicious: false
        }
      ] as AuditTrailEntry[]
    },
    {
      id: 1,
      title: 'QC Test Report QC-2024-0456 - SUSPICIOUS',
      type: 'Out-of-Spec Manipulation',
      suspiciousCount: 3,
      auditTrail: [
        {
          id: 1,
          timestamp: '2024-01-20 09:15:33',
          user: 'L. Petrović (ID: LP-027)',
          action: 'Created',
          field: 'Test Report',
          oldValue: '-',
          newValue: 'QC-2024-0456',
          reason: 'Endotoxin LAL test',
          suspicious: false
        },
        {
          id: 2,
          timestamp: '2024-01-20 11:30:45',
          user: 'L. Petrović (ID: LP-027)',
          action: 'Updated',
          field: 'Result',
          oldValue: '-',
          newValue: '0.28 EU/ml',
          reason: 'First test result',
          suspicious: false
        },
        {
          id: 3,
          timestamp: '2024-01-20 11:32:18',
          user: 'L. Petrović (ID: LP-027)',
          action: 'Deleted',
          field: 'Result',
          oldValue: '0.28 EU/ml',
          newValue: '-',
          reason: 'Invalid test',
          suspicious: true,
          suspicionReason: '⚠️ Deletion without approval! Result was OOS (spec: <0.25 EU/ml)'
        },
        {
          id: 4,
          timestamp: '2024-01-20 11:35:22',
          user: 'L. Petrović (ID: LP-027)',
          action: 'Updated',
          field: 'Result',
          oldValue: '-',
          newValue: '0.22 EU/ml',
          reason: 'Retest',
          suspicious: true,
          suspicionReason: '⚠️ Retest immediately after deletion - convenient result just under spec!'
        },
        {
          id: 5,
          timestamp: '2024-01-20 16:45:02',
          user: 'Admin (ID: ADMIN)',
          action: 'Updated',
          field: 'Analyst',
          oldValue: 'L. Petrović',
          newValue: 'K. Marić',
          reason: 'Correction',
          suspicious: true,
          suspicionReason: '⚠️ Analyst changed by ADMIN account - hiding who really did the test?'
        },
        {
          id: 6,
          timestamp: '2024-01-20 16:50:15',
          user: 'M. Horvat (ID: MH-018)',
          action: 'Approved',
          field: 'Status',
          oldValue: 'In Review',
          newValue: 'Approved',
          reason: 'Test passed',
          suspicious: false
        }
      ] as AuditTrailEntry[]
    },
    {
      id: 2,
      title: 'EM Log Grade A - FRAUD ALERT',
      type: 'Systematic Data Falsification',
      suspiciousCount: 5,
      auditTrail: [
        {
          id: 1,
          timestamp: '2024-01-25 23:55:12',
          user: 'P. Novak (ID: PN-054)',
          action: 'Created',
          field: 'EM Log',
          oldValue: '-',
          newValue: 'EM-2024-025',
          reason: 'Daily monitoring',
          suspicious: true,
          suspicionReason: '🚨 Created at 23:55 - backfilling from memory?'
        },
        {
          id: 2,
          timestamp: '2024-01-25 23:56:33',
          user: 'P. Novak (ID: PN-054)',
          action: 'Bulk Update',
          field: '08:00-16:00 readings',
          oldValue: '-',
          newValue: 'All entries added',
          reason: 'Data entry',
          suspicious: true,
          suspicionReason: '🚨 All 8 hourly readings entered in 1 minute! Not contemporaneous!'
        },
        {
          id: 3,
          timestamp: '2024-01-26 00:05:22',
          user: 'P. Novak (ID: PN-054)',
          action: 'Updated',
          field: '12:00 Particles',
          oldValue: '2,450 particles/m³',
          newValue: '245 particles/m³',
          reason: 'Typo correction',
          suspicious: true,
          suspicionReason: '🚨 Changed from OOS (2450) to in-spec (245) - exactly 10x difference, suspicious!'
        },
        {
          id: 4,
          timestamp: '2024-01-26 00:08:15',
          user: 'P. Novak (ID: PN-054)',
          action: 'Updated',
          field: '14:00 Particles',
          oldValue: '1,850 particles/m³',
          newValue: '185 particles/m³',
          reason: 'Decimal error',
          suspicious: true,
          suspicionReason: '🚨 Again 10x correction from OOS to in-spec! Pattern of falsification!'
        },
        {
          id: 5,
          timestamp: '2024-01-26 00:15:44',
          user: 'Admin (ID: ADMIN)',
          action: 'Updated',
          field: 'Recorded By',
          oldValue: 'P. Novak',
          newValue: 'T. Horvat',
          reason: 'Administrative correction',
          suspicious: true,
          suspicionReason: '🚨 ADMIN hiding who really entered data! Classic fraud cover-up!'
        },
        {
          id: 6,
          timestamp: '2024-01-26 08:30:22',
          user: 'M. Horvat (ID: MH-018)',
          action: 'Approved',
          field: 'Status',
          oldValue: 'Pending',
          newValue: 'Approved',
          reason: 'Daily review',
          suspicious: false
        }
      ] as AuditTrailEntry[]
    }
  ];

  const currentRecord = records[selectedRecord];
  const suspiciousEntries = currentRecord.auditTrail.filter(e => e.suspicious).length;

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          🕵️ Audit Trail Timeline Simulator
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Preglej elektronski audit trail in odkrij sumljive spremembe podatkov
        </p>
      </div>

      {/* Record Selector */}
      <div style={{ display: 'flex', gap: 15, marginBottom: 30, justifyContent: 'center', flexWrap: 'wrap' }}>
        {records.map((record, idx) => (
          <motion.button
            key={record.id}
            onClick={() => { setSelectedRecord(idx); setShowAnalysis(false); }}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            style={{
              padding: '15px 25px',
              background: selectedRecord === idx 
                ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' 
                : 'rgba(51, 65, 85, 0.6)',
              border: '2px solid',
              borderColor: selectedRecord === idx ? '#3b82f6' : 'rgba(148, 163, 184, 0.2)',
              borderRadius: 12,
              color: '#fff',
              cursor: 'pointer'
            }}
          >
            <div style={{ fontSize: 14, fontWeight: 700, marginBottom: 5 }}>
              {record.title}
            </div>
            <div style={{ fontSize: 12, color: record.suspiciousCount > 0 ? '#ef4444' : '#22c55e' }}>
              {record.suspiciousCount > 0 
                ? `🚨 ${record.suspiciousCount} suspicious entries`
                : '✅ Clean record'}
            </div>
          </motion.button>
        ))}
      </div>

      {/* Controls */}
      <div style={{ display: 'flex', gap: 15, marginBottom: 25, justifyContent: 'center', flexWrap: 'wrap' }}>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setHighlightSuspicious(!highlightSuspicious)}
          style={{
            padding: '12px 24px',
            background: highlightSuspicious 
              ? 'linear-gradient(135deg, #ef4444, #dc2626)' 
              : 'rgba(51, 65, 85, 0.6)',
            border: '2px solid',
            borderColor: highlightSuspicious ? '#ef4444' : 'rgba(148, 163, 184, 0.2)',
            borderRadius: 12,
            color: '#fff',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer'
          }}
        >
          {highlightSuspicious ? '🔴 Sumljive označene' : '⚪ Prikaži sumljive'}
        </motion.button>

        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setShowAnalysis(!showAnalysis)}
          style={{
            padding: '12px 24px',
            background: 'linear-gradient(135deg, #10b981, #059669)',
            border: 'none',
            borderRadius: 12,
            color: '#fff',
            fontSize: 14,
            fontWeight: 600,
            cursor: 'pointer'
          }}
        >
          {showAnalysis ? '📊 Skrij analizo' : '📊 Prikaži analizo'}
        </motion.button>
      </div>

      {/* Timeline */}
      <div style={{
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 20,
        padding: 30
      }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 25 }}>
          <div>
            <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
              {currentRecord.title}
            </h3>
            <p style={{ fontSize: 14, color: '#94a3b8' }}>{currentRecord.type}</p>
          </div>
          <div style={{
            padding: '10px 20px',
            background: suspiciousEntries > 0 
              ? 'rgba(239, 68, 68, 0.2)' 
              : 'rgba(34, 197, 94, 0.2)',
            border: '2px solid',
            borderColor: suspiciousEntries > 0 ? '#ef4444' : '#22c55e',
            borderRadius: 12,
            fontSize: 14,
            fontWeight: 700,
            color: suspiciousEntries > 0 ? '#fca5a5' : '#86efac'
          }}>
            {suspiciousEntries > 0 
              ? `${suspiciousEntries} Suspicious ${suspiciousEntries === 1 ? 'Entry' : 'Entries'}`
              : 'Clean Audit Trail'}
          </div>
        </div>

        {/* Audit Trail Entries */}
        <div style={{ position: 'relative' }}>
          {/* Timeline Line */}
          <div style={{
            position: 'absolute',
            left: 30,
            top: 0,
            bottom: 0,
            width: 3,
            background: 'linear-gradient(180deg, #3b82f6, #8b5cf6)',
            borderRadius: 10
          }} />

          <div style={{ display: 'flex', flexDirection: 'column', gap: 20 }}>
            {currentRecord.auditTrail.map((entry, idx) => (
              <motion.div
                key={entry.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: idx * 0.1 }}
                style={{
                  position: 'relative',
                  marginLeft: 60,
                  padding: 20,
                  background: highlightSuspicious && entry.suspicious
                    ? 'rgba(239, 68, 68, 0.15)'
                    : 'rgba(51, 65, 85, 0.4)',
                  border: '2px solid',
                  borderColor: highlightSuspicious && entry.suspicious
                    ? '#ef4444'
                    : 'rgba(148, 163, 184, 0.2)',
                  borderRadius: 15,
                  transition: 'all 0.3s'
                }}
              >
                {/* Timeline Dot */}
                <div style={{
                  position: 'absolute',
                  left: -50,
                  top: 20,
                  width: 24,
                  height: 24,
                  borderRadius: '50%',
                  background: entry.suspicious 
                    ? 'linear-gradient(135deg, #ef4444, #dc2626)'
                    : 'linear-gradient(135deg, #3b82f6, #8b5cf6)',
                  border: '3px solid #0a0a0a',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: 12,
                  color: '#fff',
                  fontWeight: 700
                }}>
                  {entry.suspicious && highlightSuspicious ? '!' : idx + 1}
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: 'auto 1fr', gap: 15 }}>
                  <div>
                    <div style={{ fontSize: 13, color: '#64748b', marginBottom: 8 }}>
                      {entry.timestamp}
                    </div>
                    <div style={{ fontSize: 14, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
                      {entry.user}
                    </div>
                    <div style={{
                      display: 'inline-block',
                      padding: '4px 12px',
                      background: 'rgba(59, 130, 246, 0.2)',
                      borderRadius: 8,
                      fontSize: 12,
                      fontWeight: 600,
                      color: '#60a5fa'
                    }}>
                      {entry.action}
                    </div>
                  </div>

                  <div>
                    <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 8 }}>
                      <span style={{ fontWeight: 700, color: '#cbd5e1' }}>Field:</span> {entry.field}
                    </div>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr auto 1fr', gap: 10, alignItems: 'center', marginBottom: 8 }}>
                      <div style={{
                        padding: 10,
                        background: 'rgba(239, 68, 68, 0.1)',
                        border: '1px solid rgba(239, 68, 68, 0.3)',
                        borderRadius: 8,
                        fontSize: 13,
                        color: '#fca5a5'
                      }}>
                        {entry.oldValue || '-'}
                      </div>
                      <div style={{ fontSize: 18, color: '#3b82f6' }}>→</div>
                      <div style={{
                        padding: 10,
                        background: 'rgba(34, 197, 94, 0.1)',
                        border: '1px solid rgba(34, 197, 94, 0.3)',
                        borderRadius: 8,
                        fontSize: 13,
                        color: '#86efac'
                      }}>
                        {entry.newValue || '-'}
                      </div>
                    </div>
                    {entry.reason && (
                      <div style={{ fontSize: 13, color: '#64748b', fontStyle: 'italic' }}>
                        Reason: {entry.reason}
                      </div>
                    )}

                    {entry.suspicious && highlightSuspicious && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        style={{
                          marginTop: 12,
                          padding: 12,
                          background: 'rgba(239, 68, 68, 0.2)',
                          border: '2px solid #ef4444',
                          borderRadius: 10,
                          fontSize: 13,
                          color: '#fca5a5',
                          fontWeight: 600
                        }}
                      >
                        {entry.suspicionReason}
                      </motion.div>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>

      {/* Analysis Panel */}
      {showAnalysis && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{
            marginTop: 30,
            padding: 30,
            background: 'rgba(30, 41, 59, 0.6)',
            border: '2px solid rgba(148, 163, 184, 0.2)',
            borderRadius: 20
          }}
        >
          <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
            📊 Analiza Data Integrity
          </h3>

          {suspiciousEntries === 0 ? (
            <div style={{
              padding: 25,
              background: 'rgba(34, 197, 94, 0.1)',
              border: '2px solid rgba(34, 197, 94, 0.3)',
              borderRadius: 15,
              textAlign: 'center'
            }}>
              <div style={{ fontSize: 48, marginBottom: 15 }}>✅</div>
              <div style={{ fontSize: 18, fontWeight: 700, color: '#22c55e', marginBottom: 10 }}>
                Odličen Data Integrity
              </div>
              <div style={{ fontSize: 14, color: '#86efac' }}>
                Audit trail ne kaže sumljivih aktivnosti. Vsi zapisi so:
              </div>
              <ul style={{ marginTop: 15, fontSize: 14, color: '#86efac', textAlign: 'left', maxWidth: 600, margin: '15px auto 0' }}>
                <li>✅ Contemporaneous (zapisano ob nastanku)</li>
                <li>✅ Attributable (jasno kdo je naredil)</li>
                <li>✅ Razumno časovno razporejeni</li>
                <li>✅ Z ustreznimi razlogi za spremembe</li>
                <li>✅ Brez brisanj ali sumljivih popravkov</li>
              </ul>
            </div>
          ) : (
            <div>
              <div style={{
                padding: 20,
                background: 'rgba(239, 68, 68, 0.1)',
                border: '2px solid #ef4444',
                borderRadius: 15,
                marginBottom: 25
              }}>
                <div style={{ fontSize: 18, fontWeight: 700, color: '#ef4444', marginBottom: 15, textAlign: 'center' }}>
                  🚨 Odkrite {suspiciousEntries} sumljive aktivnosti
                </div>

                <div style={{ fontSize: 14, color: '#fca5a5', marginBottom: 15 }}>
                  <strong>Red Flags:</strong>
                </div>

                <ul style={{ fontSize: 14, color: '#fca5a5', lineHeight: 1.8 }}>
                  {currentRecord.auditTrail.filter(e => e.suspicious).map(entry => (
                    <li key={entry.id} style={{ marginBottom: 10 }}>
                      <strong>{entry.action} @ {entry.timestamp}:</strong> {entry.suspicionReason}
                    </li>
                  ))}
                </ul>
              </div>

              <div style={{
                padding: 20,
                background: 'rgba(234, 179, 8, 0.1)',
                border: '2px solid rgba(234, 179, 8, 0.3)',
                borderRadius: 15
              }}>
                <div style={{ fontSize: 16, fontWeight: 700, color: '#fbbf24', marginBottom: 12 }}>
                  ⚖️ Potencialne Posledice:
                </div>
                <ul style={{ fontSize: 14, color: '#fcd34d', lineHeight: 1.8 }}>
                  {suspiciousEntries >= 4 ? (
                    <>
                      <li>🚫 <strong>Sistematična falsifikacija</strong> - kazenski pregon</li>
                      <li>🏢 <strong>Zaprtje obrata</strong> - FDA/EMA lahko ustavi proizvodnjo</li>
                      <li>💰 <strong>Massive fines</strong> - milijonske kazni</li>
                      <li>📰 <strong>Warning Letter</strong> - javna objava</li>
                      <li>👤 <strong>Osebna odgovornost</strong> - zapor za odgovorne</li>
                    </>
                  ) : (
                    <>
                      <li>⚠️ <strong>Warning Letter</strong> - uradno opozorilo regulatorja</li>
                      <li>🔍 <strong>Podroben audit</strong> - FDA/EMA deep dive inspection</li>
                      <li>📝 <strong>CAPA required</strong> - popravni ukrepi obvezni</li>
                      <li>💼 <strong>Retraining</strong> - ponovno usposabljanje osebja</li>
                      <li>📊 <strong>Data integrity review</strong> - pregled vseh zapisov</li>
                    </>
                  )}
                </ul>
              </div>
            </div>
          )}
        </motion.div>
      )}
    </div>
  );
};

// 3. Document Lifecycle Game - Drag & Drop
interface Document {
  id: number;
  title: string;
  type: string;
  status: 'draft' | 'signed' | 'approved' | 'archived';
  needsSignature: boolean;
  needsApproval: boolean;
  retentionYears: number;
  createdDate: string;
}

const DocumentLifecycleGame: React.FC = () => {
  const [documents, setDocuments] = useState<Document[]>([
    { id: 1, title: 'Batch Record BR-2024-042', type: 'Manufacturing', status: 'draft', needsSignature: true, needsApproval: true, retentionYears: 5, createdDate: '2024-01-15' },
    { id: 2, title: 'Deviation Report DEV-089', type: 'Quality', status: 'draft', needsSignature: true, needsApproval: true, retentionYears: 7, createdDate: '2024-01-18' },
    { id: 3, title: 'CAPA Action CAPA-2024-12', type: 'Quality', status: 'signed', needsSignature: false, needsApproval: true, retentionYears: 7, createdDate: '2024-01-10' },
    { id: 4, title: 'Equipment Log EQ-LAF-001', type: 'Maintenance', status: 'signed', needsSignature: false, needsApproval: true, retentionYears: 5, createdDate: '2023-12-20' },
    { id: 5, title: 'Training Record TR-455', type: 'HR', status: 'approved', needsSignature: false, needsApproval: false, retentionYears: 10, createdDate: '2023-11-05' },
    { id: 6, title: 'EM Data Grade A', type: 'Monitoring', status: 'approved', needsSignature: false, needsApproval: false, retentionYears: 5, createdDate: '2023-10-12' }
  ]);

  const [draggedDoc, setDraggedDoc] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [attempts, setAttempts] = useState(0);
  const [feedback, setFeedback] = useState<{message: string, type: 'success' | 'error'} | null>(null);

  const handleDragStart = (docId: number) => {
    setDraggedDoc(docId);
  };

  const handleDrop = (targetStatus: Document['status']) => {
    if (!draggedDoc) return;

    const doc = documents.find(d => d.id === draggedDoc);
    if (!doc) return;

    setAttempts(prev => prev + 1);
    let isCorrect = false;
    let message = '';

    // Check if move is valid
    if (doc.status === 'draft' && targetStatus === 'signed' && doc.needsSignature) {
      isCorrect = true;
      message = '✅ Pravilno! Dokument potrebuje podpis';
    } else if (doc.status === 'signed' && targetStatus === 'approved' && doc.needsApproval) {
      isCorrect = true;
      message = '✅ Pravilno! Dokument pripravljen za odobritev';
    } else if (doc.status === 'approved' && targetStatus === 'archived') {
      isCorrect = true;
      message = `✅ Pravilno! Dokument arhiviran za ${doc.retentionYears} let`;
    } else {
      message = `❌ Napaka! ${doc.title} še ni pripravljen za ${targetStatus}`;
    }

    setFeedback({ message, type: isCorrect ? 'success' : 'error' });

    if (isCorrect) {
      setDocuments(prev => prev.map(d => 
        d.id === draggedDoc 
          ? { ...d, status: targetStatus, needsSignature: targetStatus === 'signed' ? false : d.needsSignature, needsApproval: targetStatus === 'approved' ? false : d.needsApproval }
          : d
      ));
      setScore(prev => prev + 10);
    }

    setDraggedDoc(null);
    setTimeout(() => setFeedback(null), 3000);
  };

  const zones = [
    { status: 'draft' as const, title: '📝 Draft', color: '#64748b', description: 'Novi dokumenti' },
    { status: 'signed' as const, title: '✍️ Signed', color: '#3b82f6', description: 'Podpisani' },
    { status: 'approved' as const, title: '✅ Approved', color: '#10b981', description: 'Odobreni' },
    { status: 'archived' as const, title: '📦 Archived', color: '#8b5cf6', description: 'Arhivirani' }
  ];

  const archivedDocs = documents.filter(d => d.status === 'archived').length;
  const totalDocs = documents.length;
  const accuracy = attempts > 0 ? Math.round((score / (attempts * 10)) * 100) : 0;

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          📄 Document Lifecycle Game
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Povleci dokumente skozi življenjski cikel: Draft → Signed → Approved → Archived
        </p>
      </div>

      {/* Score Board */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: 15, marginBottom: 30 }}>
        <div style={{ padding: 20, background: 'rgba(59, 130, 246, 0.1)', border: '2px solid rgba(59, 130, 246, 0.3)', borderRadius: 15, textAlign: 'center' }}>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#3b82f6' }}>{score}</div>
          <div style={{ fontSize: 13, color: '#60a5fa' }}>Točke</div>
        </div>
        <div style={{ padding: 20, background: 'rgba(139, 92, 246, 0.1)', border: '2px solid rgba(139, 92, 246, 0.3)', borderRadius: 15, textAlign: 'center' }}>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#8b5cf6' }}>{archivedDocs}/{totalDocs}</div>
          <div style={{ fontSize: 13, color: '#a78bfa' }}>Arhivirano</div>
        </div>
        <div style={{ padding: 20, background: 'rgba(16, 185, 129, 0.1)', border: '2px solid rgba(16, 185, 129, 0.3)', borderRadius: 15, textAlign: 'center' }}>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#10b981' }}>{accuracy}%</div>
          <div style={{ fontSize: 13, color: '#34d399' }}>Natančnost</div>
        </div>
      </div>

      {/* Feedback */}
      <AnimatePresence>
        {feedback && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            style={{
              marginBottom: 20,
              padding: 15,
              background: feedback.type === 'success' ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)',
              border: '2px solid',
              borderColor: feedback.type === 'success' ? '#22c55e' : '#ef4444',
              borderRadius: 12,
              color: feedback.type === 'success' ? '#86efac' : '#fca5a5',
              textAlign: 'center',
              fontSize: 14,
              fontWeight: 600
            }}
          >
            {feedback.message}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Drop Zones */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 20 }}>
        {zones.map(zone => {
          const docsInZone = documents.filter(d => d.status === zone.status);
          return (
            <div
              key={zone.status}
              onDragOver={(e) => e.preventDefault()}
              onDrop={() => handleDrop(zone.status)}
              style={{
                minHeight: 400,
                padding: 20,
                background: 'rgba(30, 41, 59, 0.6)',
                border: '3px dashed',
                borderColor: draggedDoc ? zone.color : 'rgba(148, 163, 184, 0.3)',
                borderRadius: 15,
                transition: 'all 0.3s'
              }}
            >
              <div style={{ textAlign: 'center', marginBottom: 20 }}>
                <div style={{ fontSize: 24, marginBottom: 8 }}>{zone.title}</div>
                <div style={{ fontSize: 12, color: '#94a3b8' }}>{zone.description}</div>
                <div style={{
                  marginTop: 10,
                  padding: '6px 12px',
                  background: `${zone.color}33`,
                  border: `2px solid ${zone.color}`,
                  borderRadius: 8,
                  fontSize: 13,
                  fontWeight: 700,
                  color: zone.color,
                  display: 'inline-block'
                }}>
                  {docsInZone.length} docs
                </div>
              </div>

              <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
                {docsInZone.map(doc => (
                  <motion.div
                    key={doc.id}
                    draggable
                    onDragStart={() => handleDragStart(doc.id)}
                    whileHover={{ scale: 1.05, cursor: 'grab' }}
                    whileTap={{ scale: 0.95, cursor: 'grabbing' }}
                    style={{
                      padding: 15,
                      background: 'rgba(51, 65, 85, 0.8)',
                      border: '2px solid rgba(148, 163, 184, 0.3)',
                      borderRadius: 12,
                      cursor: 'grab'
                    }}
                  >
                    <div style={{ fontSize: 13, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
                      {doc.title}
                    </div>
                    <div style={{ fontSize: 11, color: '#94a3b8', marginBottom: 8 }}>
                      {doc.type} • {doc.createdDate}
                    </div>
                    {doc.needsSignature && (
                      <div style={{ fontSize: 10, color: '#fbbf24', marginBottom: 4 }}>
                        ✍️ Potrebuje podpis
                      </div>
                    )}
                    {doc.needsApproval && (
                      <div style={{ fontSize: 10, color: '#3b82f6', marginBottom: 4 }}>
                        ✅ Potrebuje odobritev
                      </div>
                    )}
                    {doc.status === 'archived' && (
                      <div style={{ fontSize: 10, color: '#8b5cf6' }}>
                        📦 Hrani {doc.retentionYears} let
                      </div>
                    )}
                  </motion.div>
                ))}
              </div>
            </div>
          );
        })}
      </div>

      {archivedDocs === totalDocs && (
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          style={{
            marginTop: 30,
            padding: 30,
            background: 'linear-gradient(135deg, #10b981, #059669)',
            borderRadius: 20,
            textAlign: 'center'
          }}
        >
          <div style={{ fontSize: 48, marginBottom: 15 }}>🎉</div>
          <div style={{ fontSize: 24, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
            Čestitke! Vsi dokumenti arhivirani!
          </div>
          <div style={{ fontSize: 16, color: '#d1fae5' }}>
            Uspešno si upravljal celoten življenjski cikel {totalDocs} dokumentov
          </div>
          <div style={{ fontSize: 14, color: '#a7f3d0', marginTop: 10 }}>
            Končna natančnost: {accuracy}% • Skupne točke: {score}
          </div>
        </motion.div>
      )}
    </div>
  );
};

// 4. Data Integrity Violation Detector - Kompakten prikaz scenarijev
interface Violation {
  id: number;
  title: string;
  severity: 'minor' | 'major' | 'critical' | 'fraud';
  scenario: string;
  consequence: string;
  color: string;
}

const ViolationDetector: React.FC = () => {
  const [selectedViolation, setSelectedViolation] = useState<number | null>(null);

  const violations: Violation[] = [
    { id: 1, title: 'Missing Signature', severity: 'minor', scenario: 'Batch record manjka podpis operaterja', consequence: '📝 Observation • Retraining • Correct and initial', color: '#fbbf24' },
    { id: 2, title: 'Illegible Handwriting', severity: 'minor', scenario: 'Rokopis v batch recordu ni čitljiv', consequence: '⚠️ Warning • Legibility training required', color: '#fbbf24' },
    { id: 3, title: 'Late Data Entry', severity: 'major', scenario: 'EM podatki za cel teden vpisani naenkrat', consequence: '🚨 CAPA required • Contemporaneous principle violated', color: '#f59e0b' },
    { id: 4, title: 'Missing Audit Trail', severity: 'major', scenario: 'Elektronski sistem ne beleži sprememb', consequence: '⛔ System disqualification • 21 CFR Part 11 violation', color: '#f59e0b' },
    { id: 5, title: 'Data Deletion', severity: 'critical', scenario: 'OOS rezultat izbrisan brez razloga', consequence: '🔥 Warning Letter • Batch recall investigation', color: '#ef4444' },
    { id: 6, title: 'Result Cherry-Picking', severity: 'critical', scenario: 'Samo passing rezultati v dokumentaciji', consequence: '⚡ FDA inspection • All batches review', color: '#ef4444' },
    { id: 7, title: 'Systematic Falsification', severity: 'fraud', scenario: 'Meseci backfilled podatkov, spremembe OOS', consequence: '🚫 Criminal prosecution • Facility closure • CEO liability', color: '#dc2626' },
    { id: 8, title: 'Admin Account Abuse', severity: 'fraud', scenario: 'Admin račun za spreminjanje kritičnih podatkov', consequence: '💀 Federal crime • Personal imprisonment • Company ban', color: '#dc2626' }
  ];

  const selected = selectedViolation !== null ? violations.find(v => v.id === selectedViolation) : null;

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          ⚠️ Data Integrity Violation Detector
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Od manjših napak do kazenskega pregona
        </p>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 15, marginBottom: 30 }}>
        {violations.map(v => (
          <motion.button
            key={v.id}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
            onClick={() => setSelectedViolation(v.id)}
            style={{
              padding: 20,
              background: selectedViolation === v.id ? `${v.color}33` : 'rgba(51, 65, 85, 0.6)',
              border: '2px solid',
              borderColor: selectedViolation === v.id ? v.color : 'rgba(148, 163, 184, 0.2)',
              borderRadius: 15,
              textAlign: 'left',
              cursor: 'pointer',
              transition: 'all 0.3s'
            }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: 10 }}>
              <div style={{ fontSize: 16, fontWeight: 700, color: '#fff' }}>{v.title}</div>
              <div style={{
                padding: '4px 12px',
                background: v.color,
                borderRadius: 8,
                fontSize: 11,
                fontWeight: 700,
                color: '#fff',
                textTransform: 'uppercase'
              }}>
                {v.severity}
              </div>
            </div>
            <div style={{ fontSize: 13, color: '#94a3b8' }}>{v.scenario}</div>
          </motion.button>
        ))}
      </div>

      {selected && (
        <motion.div
          key={selected.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{
            padding: 30,
            background: 'rgba(30, 41, 59, 0.6)',
            border: `3px solid ${selected.color}`,
            borderRadius: 20
          }}
        >
          <div style={{ fontSize: 24, fontWeight: 700, color: '#fff', marginBottom: 15 }}>
            {selected.title}
          </div>
          <div style={{ fontSize: 16, color: '#94a3b8', marginBottom: 20 }}>
            {selected.scenario}
          </div>
          <div style={{
            padding: 20,
            background: `${selected.color}22`,
            border: `2px solid ${selected.color}`,
            borderRadius: 15,
            fontSize: 15,
            color: '#fff',
            fontWeight: 600
          }}>
            {selected.consequence}
          </div>
        </motion.div>
      )}
    </div>
  );
};

// 5. Electronic vs Paper Records Comparison
const ElectronicVsPaper: React.FC = () => {
  const [mode, setMode] = useState<'paper' | 'electronic'>('paper');
  const [showSignature, setShowSignature] = useState(false);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [signed, setSigned] = useState(false);

  const handleESign = () => {
    if (username && password) {
      setSigned(true);
      setShowSignature(false);
    }
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          📱💼 Electronic vs Paper Records
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          21 CFR Part 11 - Elektronski podpisi in zapisi
        </p>
      </div>

      <div style={{ display: 'flex', gap: 15, justifyContent: 'center', marginBottom: 30 }}>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => { setMode('paper'); setSigned(false); }}
          style={{
            padding: '15px 30px',
            background: mode === 'paper' ? 'linear-gradient(135deg, #64748b, #475569)' : 'rgba(51, 65, 85, 0.6)',
            border: 'none',
            borderRadius: 12,
            color: '#fff',
            fontSize: 16,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          💼 Paper Record
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => { setMode('electronic'); setSigned(false); }}
          style={{
            padding: '15px 30px',
            background: mode === 'electronic' ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' : 'rgba(51, 65, 85, 0.6)',
            border: 'none',
            borderRadius: 12,
            color: '#fff',
            fontSize: 16,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          📱 Electronic Record
        </motion.button>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 30 }}>
        {/* Document Preview */}
        <div style={{
          padding: 25,
          background: mode === 'paper' ? '#fff' : 'rgba(30, 41, 59, 0.8)',
          border: '2px solid',
          borderColor: mode === 'paper' ? '#cbd5e1' : '#3b82f6',
          borderRadius: 15,
          color: mode === 'paper' ? '#000' : '#fff'
        }}>
          <h3 style={{ fontSize: 18, fontWeight: 700, marginBottom: 15 }}>
            Batch Record BR-2024-099
          </h3>
          <div style={{ fontSize: 13, lineHeight: 1.8, fontFamily: mode === 'paper' ? 'Times New Roman' : 'monospace' }}>
            <div>Product: WFI</div>
            <div>Batch: 2024-099</div>
            <div>Date: 2024-01-25</div>
            <div>Temperature: 80.5°C</div>
            <div>Duration: 120 min</div>
            <div style={{ marginTop: 15, borderTop: '1px solid', paddingTop: 15 }}>
              {mode === 'paper' ? (
                <>
                  <div>Operator Signature: _________________</div>
                  <div style={{ marginTop: 10 }}>Date: _________________</div>
                </>
              ) : (
                <>
                  {signed ? (
                    <div style={{
                      padding: 15,
                      background: 'rgba(34, 197, 94, 0.2)',
                      border: '2px solid #22c55e',
                      borderRadius: 10
                    }}>
                      <div style={{ color: '#22c55e', fontWeight: 700 }}>✅ Electronically Signed</div>
                      <div style={{ fontSize: 12, marginTop: 5 }}>User: {username}</div>
                      <div style={{ fontSize: 12 }}>Time: {new Date().toLocaleString()}</div>
                      <div style={{ fontSize: 11, color: '#86efac', marginTop: 5 }}>🔒 Audit trail recorded</div>
                    </div>
                  ) : (
                    <motion.button
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setShowSignature(true)}
                      style={{
                        width: '100%',
                        padding: '12px 0',
                        background: 'linear-gradient(135deg, #3b82f6, #8b5cf6)',
                        border: 'none',
                        borderRadius: 10,
                        color: '#fff',
                        fontSize: 14,
                        fontWeight: 700,
                        cursor: 'pointer'
                      }}
                    >
                      🔐 Sign Electronically
                    </motion.button>
                  )}
                </>
              )}
            </div>
          </div>
        </div>

        {/* Features Comparison */}
        <div style={{
          padding: 25,
          background: 'rgba(30, 41, 59, 0.6)',
          border: '2px solid rgba(148, 163, 184, 0.2)',
          borderRadius: 15
        }}>
          <h3 style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
            {mode === 'paper' ? '💼 Paper Features' : '📱 Electronic Features'}
          </h3>

          <div style={{ display: 'flex', flexDirection: 'column', gap: 12 }}>
            {mode === 'paper' ? (
              <>
                <Feature icon="✅" text="Fizično dostopen" positive />
                <Feature icon="👁️" text="Vizualno pregleden" positive />
                <Feature icon="❌" text="Ni audit trail" positive={false} />
                <Feature icon="❌" text="Izguba/poškodbe možne" positive={false} />
                <Feature icon="❌" text="Prepisovanje = napake" positive={false} />
                <Feature icon="❌" text="Arhiviranje prostorsko" positive={false} />
                <Feature icon="❌" text="Iskanje slow" positive={false} />
              </>
            ) : (
              <>
                <Feature icon="✅" text="Audit trail - vsaka sprememba" positive />
                <Feature icon="✅" text="2FA - varnost" positive />
                <Feature icon="✅" text="Instant dostop in iskanje" positive />
                <Feature icon="✅" text="Backup - ni izgube" positive />
                <Feature icon="✅" text="Real-time data" positive />
                <Feature icon="✅" text="21 CFR Part 11 compliant" positive />
                <Feature icon="⚠️" text="Odvisnost od IT sistema" positive={false} />
              </>
            )}
          </div>
        </div>
      </div>

      {/* Electronic Signature Modal */}
      <AnimatePresence>
        {showSignature && mode === 'electronic' && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            style={{
              position: 'fixed',
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              background: 'rgba(0,0,0,0.8)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              zIndex: 1000
            }}
            onClick={() => setShowSignature(false)}
          >
            <motion.div
              initial={{ scale: 0.9 }}
              animate={{ scale: 1 }}
              onClick={(e) => e.stopPropagation()}
              style={{
                padding: 30,
                background: 'rgba(30, 41, 59, 0.95)',
                border: '2px solid rgba(148, 163, 184, 0.3)',
                borderRadius: 20,
                maxWidth: 400,
                width: '90%'
              }}
            >
              <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 20 }}>
                🔐 Electronic Signature
              </h3>

              <div style={{ marginBottom: 15 }}>
                <label style={{ display: 'block', fontSize: 13, color: '#94a3b8', marginBottom: 8 }}>
                  Username
                </label>
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder="Enter username"
                  style={{
                    width: '100%',
                    padding: 12,
                    background: 'rgba(51, 65, 85, 0.6)',
                    border: '2px solid rgba(148, 163, 184, 0.3)',
                    borderRadius: 10,
                    color: '#fff',
                    fontSize: 14
                  }}
                />
              </div>

              <div style={{ marginBottom: 20 }}>
                <label style={{ display: 'block', fontSize: 13, color: '#94a3b8', marginBottom: 8 }}>
                  Password
                </label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Enter password"
                  style={{
                    width: '100%',
                    padding: 12,
                    background: 'rgba(51, 65, 85, 0.6)',
                    border: '2px solid rgba(148, 163, 184, 0.3)',
                    borderRadius: 10,
                    color: '#fff',
                    fontSize: 14
                  }}
                />
              </div>

              <div style={{ display: 'flex', gap: 10 }}>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleESign}
                  disabled={!username || !password}
                  style={{
                    flex: 1,
                    padding: '12px 0',
                    background: username && password ? 'linear-gradient(135deg, #10b981, #059669)' : 'rgba(100, 116, 139, 0.3)',
                    border: 'none',
                    borderRadius: 10,
                    color: '#fff',
                    fontSize: 14,
                    fontWeight: 700,
                    cursor: username && password ? 'pointer' : 'not-allowed',
                    opacity: username && password ? 1 : 0.5
                  }}
                >
                  ✅ Sign
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowSignature(false)}
                  style={{
                    flex: 1,
                    padding: '12px 0',
                    background: 'rgba(100, 116, 139, 0.6)',
                    border: '2px solid rgba(148, 163, 184, 0.3)',
                    borderRadius: 10,
                    color: '#fff',
                    fontSize: 14,
                    fontWeight: 700,
                    cursor: 'pointer'
                  }}
                >
                  Cancel
                </motion.button>
              </div>

              <div style={{
                marginTop: 15,
                padding: 12,
                background: 'rgba(59, 130, 246, 0.1)',
                border: '1px solid rgba(59, 130, 246, 0.3)',
                borderRadius: 10,
                fontSize: 11,
                color: '#60a5fa'
              }}>
                💡 21 CFR Part 11: E-signature = Username + Password + Audit trail
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const Feature: React.FC<{icon: string, text: string, positive: boolean}> = ({ icon, text, positive }) => (
  <div style={{
    padding: 12,
    background: positive ? 'rgba(34, 197, 94, 0.1)' : 'rgba(239, 68, 68, 0.1)',
    border: '1px solid',
    borderColor: positive ? 'rgba(34, 197, 94, 0.3)' : 'rgba(239, 68, 68, 0.3)',
    borderRadius: 10,
    display: 'flex',
    alignItems: 'center',
    gap: 10,
    fontSize: 13,
    color: positive ? '#86efac' : '#fca5a5'
  }}>
    <span>{icon}</span>
    <span>{text}</span>
  </div>
);

// ============================================================================
// DISINFECTION VISUALIZATIONS - Dezinfekcija, Razkuževanje
// ============================================================================

// 1. Dezinficiens Spekter Simulator
interface Microorganism {
  id: string;
  name: string;
  icon: string;
  resistance: number;
}

interface Disinfectant {
  id: string;
  name: string;
  color: string;
  spectrum: {
    bacteria: boolean;
    fungi: boolean;
    viruses: boolean;
    spores: boolean;
  };
  killTime: {
    bacteria: number;
    fungi: number;
    viruses: number;
    spores: number;
  };
  wetContactTime: number;
  concentration: string;
}

function DisinfectantSpectrum() {
  const [selectedDisinfectant, setSelectedDisinfectant] = useState<string>('ipa70');
  const [isSimulating, setIsSimulating] = useState(false);
  const [killedOrganisms, setKilledOrganisms] = useState<Set<string>>(new Set());
  const [elapsedTime, setElapsedTime] = useState(0);

  const disinfectants: Disinfectant[] = [
    {
      id: 'ipa70',
      name: '70% IPA (Izopropanol)',
      color: '#3b82f6',
      spectrum: { bacteria: true, fungi: true, viruses: true, spores: false },
      killTime: { bacteria: 1, fungi: 2, viruses: 1.5, spores: 999 },
      wetContactTime: 2,
      concentration: '70%'
    },
    {
      id: 'h2o2',
      name: 'H₂O₂ (Vodik Peroksid)',
      color: '#10b981',
      spectrum: { bacteria: true, fungi: true, viruses: true, spores: true },
      killTime: { bacteria: 2, fungi: 3, viruses: 2.5, spores: 10 },
      wetContactTime: 10,
      concentration: '6%'
    },
    {
      id: 'qac',
      name: 'QAC (Kvaternarne amonijeve spojine)',
      color: '#8b5cf6',
      spectrum: { bacteria: true, fungi: true, viruses: false, spores: false },
      killTime: { bacteria: 3, fungi: 4, viruses: 999, spores: 999 },
      wetContactTime: 5,
      concentration: '0.5%'
    },
    {
      id: 'paa',
      name: 'PAA (Perocetna Kislina)',
      color: '#ef4444',
      spectrum: { bacteria: true, fungi: true, viruses: true, spores: true },
      killTime: { bacteria: 1.5, fungi: 2.5, viruses: 2, spores: 8 },
      wetContactTime: 8,
      concentration: '0.2%'
    }
  ];

  const organisms: Microorganism[] = [
    { id: 'bacteria', name: 'Bakterije', icon: '🦠', resistance: 1 },
    { id: 'fungi', name: 'Glive', icon: '🍄', resistance: 2 },
    { id: 'viruses', name: 'Virusi', icon: '🔴', resistance: 1.5 },
    { id: 'spores', name: 'Spore', icon: '😴', resistance: 10 }
  ];

  const currentDisinfectant = disinfectants.find(d => d.id === selectedDisinfectant)!;

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isSimulating) {
      timer = setInterval(() => {
        setElapsedTime(prev => {
          const newTime = prev + 0.5;
          
          // Check which organisms should be killed
          organisms.forEach(org => {
            const killTime = currentDisinfectant.killTime[org.id as keyof typeof currentDisinfectant.killTime];
            if (newTime >= killTime && killTime < 999) {
              setKilledOrganisms(prev => new Set([...prev, org.id]));
            }
          });

          // Stop at 15 seconds
          if (newTime >= 15) {
            setIsSimulating(false);
            return 15;
          }
          return newTime;
        });
      }, 500);
    }
    return () => clearInterval(timer);
  }, [isSimulating, currentDisinfectant, organisms]);

  const handleStart = () => {
    setKilledOrganisms(new Set());
    setElapsedTime(0);
    setIsSimulating(true);
  };

  const handleReset = () => {
    setIsSimulating(false);
    setKilledOrganisms(new Set());
    setElapsedTime(0);
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          🧪 Dezinficiens Spekter Simulator
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Izberi dezinficiens in opazuj kako različne koncentracije ubijajo mikroorganizme
        </p>
      </div>

      {/* Disinfectant Selector */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 15, marginBottom: 30 }}>
        {disinfectants.map(dis => (
          <motion.button
            key={dis.id}
            onClick={() => { setSelectedDisinfectant(dis.id); handleReset(); }}
            whileHover={{ scale: 1.03 }}
            whileTap={{ scale: 0.97 }}
            style={{
              padding: 20,
              background: selectedDisinfectant === dis.id ? `${dis.color}33` : 'rgba(51, 65, 85, 0.6)',
              border: '2px solid',
              borderColor: selectedDisinfectant === dis.id ? dis.color : 'rgba(148, 163, 184, 0.2)',
              borderRadius: 15,
              textAlign: 'left',
              cursor: 'pointer',
              transition: 'all 0.3s'
            }}
          >
            <div style={{ fontSize: 16, fontWeight: 700, color: '#fff', marginBottom: 8 }}>
              {dis.name}
            </div>
            <div style={{ fontSize: 13, color: '#94a3b8', marginBottom: 10 }}>
              Koncentracija: {dis.concentration} • Wet contact: {dis.wetContactTime} min
            </div>
            <div style={{ display: 'flex', gap: 8, flexWrap: 'wrap' }}>
              {Object.entries(dis.spectrum).map(([key, active]) => (
                <div
                  key={key}
                  style={{
                    padding: '4px 10px',
                    background: active ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)',
                    border: '1px solid',
                    borderColor: active ? '#22c55e' : '#ef4444',
                    borderRadius: 8,
                    fontSize: 11,
                    fontWeight: 600,
                    color: active ? '#86efac' : '#fca5a5'
                  }}
                >
                  {key}
                </div>
              ))}
            </div>
          </motion.button>
        ))}
      </div>

      {/* Simulation Area */}
      <div style={{
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 20,
        padding: 30,
        marginBottom: 20
      }}>
        {/* Timer */}
        <div style={{ textAlign: 'center', marginBottom: 30 }}>
          <div style={{ fontSize: 48, fontWeight: 700, color: currentDisinfectant.color, marginBottom: 10 }}>
            {elapsedTime.toFixed(1)}s
          </div>
          <div style={{ fontSize: 14, color: '#94a3b8' }}>
            Wet Contact Time Required: {currentDisinfectant.wetContactTime} min
          </div>
        </div>

        {/* Organisms Grid */}
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 20, marginBottom: 30 }}>
          {organisms.map(org => {
            const isKilled = killedOrganisms.has(org.id);
            const canKill = currentDisinfectant.spectrum[org.id as keyof typeof currentDisinfectant.spectrum];
            const killTime = currentDisinfectant.killTime[org.id as keyof typeof currentDisinfectant.killTime];

            return (
              <motion.div
                key={org.id}
                animate={{
                  scale: isKilled ? 0.8 : 1,
                  opacity: isKilled ? 0.3 : 1
                }}
                style={{
                  padding: 25,
                  background: isKilled ? 'rgba(239, 68, 68, 0.2)' : 'rgba(51, 65, 85, 0.8)',
                  border: '2px solid',
                  borderColor: isKilled ? '#ef4444' : canKill ? '#22c55e' : '#ef4444',
                  borderRadius: 15,
                  textAlign: 'center',
                  position: 'relative'
                }}
              >
                <div style={{ fontSize: 48, marginBottom: 10, filter: isKilled ? 'grayscale(1)' : 'none' }}>
                  {org.icon}
                </div>
                <div style={{ fontSize: 14, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
                  {org.name}
                </div>
                <div style={{ fontSize: 12, color: '#94a3b8' }}>
                  {canKill ? (killTime < 999 ? `Kill time: ${killTime}s` : 'Not killed') : 'Resistant!'}
                </div>
                {isKilled && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    style={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      fontSize: 64,
                      fontWeight: 700,
                      color: '#ef4444'
                    }}
                  >
                    ✕
                  </motion.div>
                )}
              </motion.div>
            );
          })}
        </div>

        {/* Progress Bar */}
        <div style={{
          height: 40,
          background: 'rgba(51, 65, 85, 0.6)',
          borderRadius: 12,
          overflow: 'hidden',
          position: 'relative',
          marginBottom: 20
        }}>
          <motion.div
            animate={{ width: `${(elapsedTime / 15) * 100}%` }}
            style={{
              height: '100%',
              background: `linear-gradient(90deg, ${currentDisinfectant.color}, ${currentDisinfectant.color}99)`,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'flex-end',
              paddingRight: 15,
              fontSize: 13,
              fontWeight: 700,
              color: '#fff'
            }}
          >
            {elapsedTime > 0 && `${Math.round((elapsedTime / 15) * 100)}%`}
          </motion.div>
        </div>

        {/* Controls */}
        <div style={{ display: 'flex', gap: 12 }}>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleStart}
            disabled={isSimulating}
            style={{
              flex: 1,
              padding: '15px 0',
              background: isSimulating ? 'rgba(100, 116, 139, 0.3)' : `linear-gradient(135deg, ${currentDisinfectant.color}, ${currentDisinfectant.color}dd)`,
              border: 'none',
              borderRadius: 12,
              color: '#fff',
              fontSize: 16,
              fontWeight: 700,
              cursor: isSimulating ? 'not-allowed' : 'pointer',
              opacity: isSimulating ? 0.5 : 1
            }}
          >
            ▶️ Start Simulation
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleReset}
            style={{
              flex: 1,
              padding: '15px 0',
              background: 'rgba(100, 116, 139, 0.6)',
              border: '2px solid rgba(148, 163, 184, 0.3)',
              borderRadius: 12,
              color: '#fff',
              fontSize: 16,
              fontWeight: 700,
              cursor: 'pointer'
            }}
          >
            🔄 Reset
          </motion.button>
        </div>
      </div>

      {/* Summary */}
      {elapsedTime >= 15 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          style={{
            padding: 25,
            background: 'rgba(30, 41, 59, 0.6)',
            border: '2px solid rgba(148, 163, 184, 0.2)',
            borderRadius: 20
          }}
        >
          <h3 style={{ fontSize: 20, fontWeight: 700, color: '#fff', marginBottom: 15 }}>
            📊 Rezultati Simulacije
          </h3>
          <div style={{ fontSize: 15, color: '#cbd5e1', lineHeight: 1.8 }}>
            <div style={{ marginBottom: 10 }}>
              <strong style={{ color: '#fff' }}>Ubijeni mikroorganizmi:</strong>{' '}
              {killedOrganisms.size} / {organisms.length}
            </div>
            <div style={{ marginBottom: 10 }}>
              <strong style={{ color: '#fff' }}>{currentDisinfectant.name}</strong> je{' '}
              {currentDisinfectant.spectrum.spores ? 'SPORICIDEN' : 'NI SPORICIDEN'}
            </div>
            <div style={{ fontSize: 13, color: '#94a3b8', marginTop: 15, padding: 15, background: 'rgba(59, 130, 246, 0.1)', borderRadius: 10 }}>
              💡 <strong>Pomembno:</strong> Wet contact time mora biti {currentDisinfectant.wetContactTime} minut.
              Če površina posuši prej, dezinfekcija ni učinkovita!
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
}

// 2. Wet Contact Time Challenge - Gaming simulator
function WetContactTimeChallenge() {
  const [level, setLevel] = useState(1);
  const [score, setScore] = useState(0);
  const [isApplying, setIsApplying] = useState(false);
  const [surfaceWetness, setSurfaceWetness] = useState(100);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const [feedback, setFeedback] = useState<string | null>(null);
  const [success, setSuccess] = useState<boolean | null>(null);

  const levels = [
    { id: 1, surface: 'Stena', requiredTime: 2, dryingSpeed: 10, icon: '🧱' },
    { id: 2, surface: 'Pod', requiredTime: 5, dryingSpeed: 5, icon: '⬜' },
    { id: 3, surface: 'Oprema', requiredTime: 10, dryingSpeed: 8, icon: '🔧' }
  ];

  const currentLevel = levels[level - 1];

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isApplying && surfaceWetness > 0) {
      timer = setInterval(() => {
        setSurfaceWetness(prev => Math.max(0, prev - currentLevel.dryingSpeed));
        setTimeRemaining(prev => prev + 0.1);
      }, 100);
    }
    return () => clearInterval(timer);
  }, [isApplying, surfaceWetness, currentLevel]);

  const handleApply = () => {
    setIsApplying(true);
    setSurfaceWetness(100);
    setTimeRemaining(0);
    setFeedback(null);
    setSuccess(null);
  };

  const handleWipe = () => {
    setIsApplying(false);
    if (timeRemaining >= currentLevel.requiredTime) {
      setFeedback(`✅ Odlično! ${timeRemaining.toFixed(1)}s contact time ≥ ${currentLevel.requiredTime}s required`);
      setSuccess(true);
      setScore(prev => prev + 10);
      setTimeout(() => {
        if (level < levels.length) setLevel(prev => prev + 1);
        setSurfaceWetness(100);
        setTimeRemaining(0);
        setFeedback(null);
      }, 2000);
    } else {
      setFeedback(`❌ Prezgodaj! ${timeRemaining.toFixed(1)}s < ${currentLevel.requiredTime}s - bakterije preživijo!`);
      setSuccess(false);
    }
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          ⏱️ Wet Contact Time Challenge
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Nanese dezinficiens in počakaj dovolj dolgo - če pobrišeš prehitro, bakterije preživijo!
        </p>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: 'auto 1fr', gap: 20, marginBottom: 20 }}>
        <div style={{
          padding: 20,
          background: 'rgba(30, 41, 59, 0.6)',
          border: '2px solid rgba(148, 163, 184, 0.2)',
          borderRadius: 15,
          minWidth: 200
        }}>
          <div style={{ fontSize: 14, color: '#94a3b8', marginBottom: 10 }}>Level {level}/3</div>
          <div style={{ fontSize: 32, fontWeight: 700, color: '#3b82f6', marginBottom: 10 }}>
            {score} pts
          </div>
          <div style={{ fontSize: 13, color: '#cbd5e1' }}>
            Surface: {currentLevel.icon} {currentLevel.surface}
          </div>
          <div style={{ fontSize: 13, color: '#fbbf24', marginTop: 5 }}>
            Required: {currentLevel.requiredTime}s
          </div>
        </div>

        <div style={{
          padding: 30,
          background: 'rgba(30, 41, 59, 0.6)',
          border: '2px solid rgba(148, 163, 184, 0.2)',
          borderRadius: 15,
          position: 'relative',
          overflow: 'hidden'
        }}>
          {/* Surface */}
          <div style={{
            height: 200,
            background: '#cbd5e1',
            borderRadius: 12,
            position: 'relative',
            overflow: 'hidden',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: 64
          }}>
            {currentLevel.icon}
            {/* Wet layer */}
            <motion.div
              animate={{ opacity: surfaceWetness / 100 }}
              style={{
                position: 'absolute',
                inset: 0,
                background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.6), rgba(139, 92, 246, 0.6))',
                backdropFilter: 'blur(5px)'
              }}
            />
            {isApplying && (
              <motion.div
                style={{
                  position: 'absolute',
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                  fontSize: 24,
                  fontWeight: 700,
                  color: '#fff',
                  textShadow: '0 2px 8px rgba(0,0,0,0.5)'
                }}
              >
                {timeRemaining.toFixed(1)}s
              </motion.div>
            )}
          </div>

          {/* Wetness Bar */}
          <div style={{ marginTop: 20, marginBottom: 15 }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>
              <span style={{ fontSize: 13, color: '#94a3b8' }}>Surface Wetness</span>
              <span style={{ fontSize: 13, fontWeight: 700, color: surfaceWetness > 30 ? '#3b82f6' : '#ef4444' }}>
                {Math.round(surfaceWetness)}%
              </span>
            </div>
            <div style={{
              height: 20,
              background: 'rgba(51, 65, 85, 0.6)',
              borderRadius: 10,
              overflow: 'hidden'
            }}>
              <motion.div
                animate={{ width: `${surfaceWetness}%` }}
                style={{
                  height: '100%',
                  background: surfaceWetness > 30 ? 'linear-gradient(90deg, #3b82f6, #8b5cf6)' : 'linear-gradient(90deg, #ef4444, #dc2626)',
                  transition: 'width 0.1s linear'
                }}
              />
            </div>
          </div>

          {/* Controls */}
          <div style={{ display: 'flex', gap: 12 }}>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleApply}
              disabled={isApplying}
              style={{
                flex: 1,
                padding: '15px 0',
                background: isApplying ? 'rgba(100, 116, 139, 0.3)' : 'linear-gradient(135deg, #3b82f6, #8b5cf6)',
                border: 'none',
                borderRadius: 12,
                color: '#fff',
                fontSize: 16,
                fontWeight: 700,
                cursor: isApplying ? 'not-allowed' : 'pointer',
                opacity: isApplying ? 0.5 : 1
              }}
            >
              💧 Apply Disinfectant
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleWipe}
              disabled={!isApplying}
              style={{
                flex: 1,
                padding: '15px 0',
                background: !isApplying ? 'rgba(100, 116, 139, 0.3)' : 'linear-gradient(135deg, #10b981, #059669)',
                border: 'none',
                borderRadius: 12,
                color: '#fff',
                fontSize: 16,
                fontWeight: 700,
                cursor: !isApplying ? 'not-allowed' : 'pointer',
                opacity: !isApplying ? 0.5 : 1
              }}
            >
              🧽 Wipe Clean
            </motion.button>
          </div>

          {feedback && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              style={{
                marginTop: 15,
                padding: 15,
                background: success ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)',
                border: '2px solid',
                borderColor: success ? '#22c55e' : '#ef4444',
                borderRadius: 12,
                fontSize: 14,
                fontWeight: 600,
                color: success ? '#86efac' : '#fca5a5',
                textAlign: 'center'
              }}
            >
              {feedback}
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
}

// 3. Rotation Scheduler - Compact version
function RotationScheduler() {
  const [schedule, setSchedule] = useState<{[week: number]: string}>({});
  const [resistanceMeter, setResistanceMeter] = useState(0);

  const disinfectants = [
    { id: 'ipa', name: '70% IPA', color: '#3b82f6', weeks: '1-2' },
    { id: 'qac', name: 'QAC', color: '#8b5cf6', weeks: '3' },
    { id: 'h2o2', name: 'H₂O₂', color: '#10b981', weeks: '4' },
    { id: 'paa', name: 'PAA', color: '#ef4444', weeks: '5' }
  ];

  const checkResistance = (newSchedule: {[week: number]: string}) => {
    let consecutive = 0;
    let maxConsecutive = 0;
    let prev = '';

    for (let i = 1; i <= 5; i++) {
      if (newSchedule[i] === prev && newSchedule[i]) {
        consecutive++;
      } else {
        maxConsecutive = Math.max(maxConsecutive, consecutive);
        consecutive = 1;
        prev = newSchedule[i] || '';
      }
    }
    setResistanceMeter(Math.min(100, maxConsecutive * 25));
  };

  const handleDrop = (week: number, disId: string) => {
    const newSchedule = { ...schedule, [week]: disId };
    setSchedule(newSchedule);
    checkResistance(newSchedule);
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          🔄 Rotacijski Urnik Dezinficiensov
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Načrtuj 5-tedensko rotacijo - prepreči razvoj bakterijske odpornosti
        </p>
      </div>

      {/* Resistance Meter */}
      <div style={{
        padding: 20,
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 15,
        marginBottom: 30
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 10 }}>
          <span style={{ fontSize: 14, fontWeight: 600, color: '#fff' }}>⚠️ Resistance Meter</span>
          <span style={{ fontSize: 14, fontWeight: 700, color: resistanceMeter > 50 ? '#ef4444' : '#22c55e' }}>
            {resistanceMeter}%
          </span>
        </div>
        <div style={{
          height: 30,
          background: 'rgba(51, 65, 85, 0.6)',
          borderRadius: 10,
          overflow: 'hidden'
        }}>
          <motion.div
            animate={{ width: `${resistanceMeter}%` }}
            style={{
              height: '100%',
              background: resistanceMeter > 50 ? 'linear-gradient(90deg, #ef4444, #dc2626)' : 'linear-gradient(90deg, #22c55e, #16a34a)'
            }}
          />
        </div>
        <div style={{ marginTop: 10, fontSize: 12, color: '#94a3b8' }}>
          {resistanceMeter > 50 ? '🚨 Visoko tveganje odpornosti - sprememba rotacije!' : '✅ Dobra rotacija'}
        </div>
      </div>

      {/* Disinfectants Palette */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 10, marginBottom: 20 }}>
        {disinfectants.map(dis => (
          <div
            key={dis.id}
            draggable
            onDragStart={(e) => e.dataTransfer.setData('disinfectantId', dis.id)}
            style={{
              padding: 15,
              background: `${dis.color}33`,
              border: `2px solid ${dis.color}`,
              borderRadius: 12,
              textAlign: 'center',
              cursor: 'grab',
              fontSize: 13,
              fontWeight: 600,
              color: dis.color
            }}
          >
            {dis.name}
            <div style={{ fontSize: 10, color: '#94a3b8', marginTop: 5 }}>Week {dis.weeks}</div>
          </div>
        ))}
      </div>

      {/* Week Slots */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: 15 }}>
        {[1, 2, 3, 4, 5].map(week => {
          const assignedDis = disinfectants.find(d => d.id === schedule[week]);
          return (
            <div
              key={week}
              onDragOver={(e) => e.preventDefault()}
              onDrop={(e) => {
                const disId = e.dataTransfer.getData('disinfectantId');
                handleDrop(week, disId);
              }}
              style={{
                minHeight: 120,
                padding: 20,
                background: assignedDis ? `${assignedDis.color}22` : 'rgba(51, 65, 85, 0.6)',
                border: '3px dashed',
                borderColor: assignedDis ? assignedDis.color : 'rgba(148, 163, 184, 0.3)',
                borderRadius: 15,
                textAlign: 'center',
                transition: 'all 0.3s'
              }}
            >
              <div style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
                Week {week}
              </div>
              {assignedDis ? (
                <div style={{ fontSize: 14, fontWeight: 600, color: assignedDis.color }}>
                  {assignedDis.name}
                </div>
              ) : (
                <div style={{ fontSize: 12, color: '#64748b' }}>
                  Drop here
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
}

// 4. Biofilm Battle - Compact version
function BiofilmBattle() {
  const [step, setStep] = useState(0);
  const [biofilmLevel, setBiofilmLevel] = useState(100);

  const steps = [
    { id: 0, title: 'Initial State', description: 'Biofilm pokriva površino', biofilmReduction: 0, icon: '🦠' },
    { id: 1, title: 'Mechanical Cleaning', description: 'Odstranjevanje biofilma', biofilmReduction: 60, icon: '🧽' },
    { id: 2, title: 'Disinfection', description: 'Ubijanje bakterij', biofilmReduction: 35, icon: '🧪' },
    { id: 3, title: 'Validation', description: 'ATP test - preverjanje čistosti', biofilmReduction: 5, icon: '✅' }
  ];

  const handleNextStep = () => {
    if (step < steps.length - 1) {
      const nextStep = step + 1;
      setStep(nextStep);
      setBiofilmLevel(prev => Math.max(0, prev - steps[nextStep].biofilmReduction));
    }
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          🛡️ Biofilm Battle Simulator
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          3-stopenjski proces odstranjevanja biofilma
        </p>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 30 }}>
        {/* Visualization */}
        <div style={{
          padding: 30,
          background: 'rgba(30, 41, 59, 0.6)',
          border: '2px solid rgba(148, 163, 184, 0.2)',
          borderRadius: 20
        }}>
          <div style={{
            height: 300,
            background: '#cbd5e1',
            borderRadius: 12,
            position: 'relative',
            overflow: 'hidden'
          }}>
            <motion.div
              animate={{ opacity: biofilmLevel / 100, height: `${biofilmLevel}%` }}
              style={{
                position: 'absolute',
                bottom: 0,
                left: 0,
                right: 0,
                background: 'linear-gradient(180deg, rgba(34, 197, 94, 0.8), rgba(34, 197, 94, 0.4))',
                borderRadius: '12px 12px 0 0',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: 48,
                transition: 'all 1s'
              }}
            >
              {biofilmLevel > 0 && '🦠'}
            </motion.div>
          </div>

          <div style={{ marginTop: 20, textAlign: 'center' }}>
            <div style={{ fontSize: 32, fontWeight: 700, color: biofilmLevel > 50 ? '#ef4444' : '#22c55e' }}>
              {Math.round(biofilmLevel)}%
            </div>
            <div style={{ fontSize: 14, color: '#94a3b8' }}>Biofilm Remaining</div>
          </div>
        </div>

        {/* Steps */}
        <div>
          {steps.map((s, idx) => (
            <motion.div
              key={s.id}
              animate={{
                opacity: idx <= step ? 1 : 0.4,
                scale: idx === step ? 1.05 : 1
              }}
              style={{
                padding: 20,
                background: idx === step ? 'rgba(59, 130, 246, 0.2)' : 'rgba(51, 65, 85, 0.6)',
                border: '2px solid',
                borderColor: idx === step ? '#3b82f6' : 'rgba(148, 163, 184, 0.2)',
                borderRadius: 15,
                marginBottom: 15
              }}
            >
              <div style={{ display: 'flex', alignItems: 'center', gap: 15 }}>
                <div style={{ fontSize: 32 }}>{s.icon}</div>
                <div style={{ flex: 1 }}>
                  <div style={{ fontSize: 16, fontWeight: 700, color: '#fff', marginBottom: 5 }}>
                    {s.title}
                  </div>
                  <div style={{ fontSize: 13, color: '#94a3b8' }}>{s.description}</div>
                </div>
                {idx <= step && (
                  <div style={{ fontSize: 24, color: '#22c55e' }}>✓</div>
                )}
              </div>
            </motion.div>
          ))}

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleNextStep}
            disabled={step >= steps.length - 1}
            style={{
              width: '100%',
              padding: '15px 0',
              background: step >= steps.length - 1 ? 'rgba(100, 116, 139, 0.3)' : 'linear-gradient(135deg, #3b82f6, #8b5cf6)',
              border: 'none',
              borderRadius: 12,
              color: '#fff',
              fontSize: 16,
              fontWeight: 700,
              cursor: step >= steps.length - 1 ? 'not-allowed' : 'pointer',
              opacity: step >= steps.length - 1 ? 0.5 : 1
            }}
          >
            {step >= steps.length - 1 ? '✅ Complete!' : `➡️ ${steps[step + 1].title}`}
          </motion.button>
        </div>
      </div>
    </div>
  );
}

// 5. Cleaning Decision Tree - Compact version
function CleaningDecisionTree() {
  const [scenario, setScenario] = useState<'dirty' | 'clean'>('dirty');
  const [decision, setDecision] = useState<'clean-first' | 'disinfect-first' | null>(null);
  const [result, setResult] = useState<'success' | 'fail' | null>(null);

  const handleDecision = (dec: 'clean-first' | 'disinfect-first') => {
    setDecision(dec);
    if (scenario === 'dirty') {
      setResult(dec === 'clean-first' ? 'success' : 'fail');
    } else {
      setResult(dec === 'disinfect-first' ? 'success' : 'fail');
    }
  };

  const reset = () => {
    setDecision(null);
    setResult(null);
  };

  return (
    <div style={{ padding: 30 }}>
      <div style={{ textAlign: 'center', marginBottom: 30 }}>
        <h2 style={{ fontSize: 28, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
          🌳 Cleaning Decision Tree
        </h2>
        <p style={{ fontSize: 16, color: '#94a3b8' }}>
          Izberi pravilno zaporedje čiščenja
        </p>
      </div>

      {/* Scenario Selector */}
      <div style={{ display: 'flex', gap: 15, justifyContent: 'center', marginBottom: 30 }}>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => { setScenario('dirty'); reset(); }}
          style={{
            padding: '15px 30px',
            background: scenario === 'dirty' ? 'linear-gradient(135deg, #f59e0b, #d97706)' : 'rgba(51, 65, 85, 0.6)',
            border: 'none',
            borderRadius: 12,
            color: '#fff',
            fontSize: 16,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          🧽 Umazana površina
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => { setScenario('clean'); reset(); }}
          style={{
            padding: '15px 30px',
            background: scenario === 'clean' ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' : 'rgba(51, 65, 85, 0.6)',
            border: 'none',
            borderRadius: 12,
            color: '#fff',
            fontSize: 16,
            fontWeight: 700,
            cursor: 'pointer'
          }}
        >
          ✨ Čista površina
        </motion.button>
      </div>

      <div style={{
        padding: 40,
        background: 'rgba(30, 41, 59, 0.6)',
        border: '2px solid rgba(148, 163, 184, 0.2)',
        borderRadius: 20
      }}>
        {/* Surface visualization */}
        <div style={{
          height: 150,
          background: scenario === 'dirty' ? 'linear-gradient(135deg, #78350f, #92400e)' : '#cbd5e1',
          borderRadius: 12,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: 64,
          marginBottom: 30
        }}>
          {scenario === 'dirty' ? '💩' : '✨'}
        </div>

        {!decision && (
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 15 }}>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => handleDecision('clean-first')}
              style={{
                padding: '20px',
                background: 'rgba(59, 130, 246, 0.2)',
                border: '2px solid #3b82f6',
                borderRadius: 12,
                color: '#fff',
                fontSize: 16,
                fontWeight: 700,
                cursor: 'pointer'
              }}
            >
              🧽 Najprej očisti
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => handleDecision('disinfect-first')}
              style={{
                padding: '20px',
                background: 'rgba(139, 92, 246, 0.2)',
                border: '2px solid #8b5cf6',
                borderRadius: 12,
                color: '#fff',
                fontSize: 16,
                fontWeight: 700,
                cursor: 'pointer'
              }}
            >
              🧪 Direktno dezinficiraj
            </motion.button>
          </div>
        )}

        {result && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            style={{
              padding: 25,
              background: result === 'success' ? 'rgba(34, 197, 94, 0.2)' : 'rgba(239, 68, 68, 0.2)',
              border: '2px solid',
              borderColor: result === 'success' ? '#22c55e' : '#ef4444',
              borderRadius: 15,
              textAlign: 'center'
            }}
          >
            <div style={{ fontSize: 48, marginBottom: 15 }}>
              {result === 'success' ? '✅' : '❌'}
            </div>
            <div style={{ fontSize: 18, fontWeight: 700, color: '#fff', marginBottom: 10 }}>
              {result === 'success' ? 'Pravilno!' : 'Napačno!'}
            </div>
            <div style={{ fontSize: 14, color: result === 'success' ? '#86efac' : '#fca5a5' }}>
              {scenario === 'dirty' && decision === 'clean-first' && 'Najprej odstrani organsko umazanijo, šele nato dezinficiraj'}
              {scenario === 'dirty' && decision === 'disinfect-first' && 'Umazanija inaktivira dezinficiens - najprej očisti!'}
              {scenario === 'clean' && decision === 'disinfect-first' && 'Na čisti površini lahko direktno dezinficiraš'}
              {scenario === 'clean' && decision === 'clean-first' && 'Površina je že čista - direktno dezinficiraj'}
            </div>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={reset}
              style={{
                marginTop: 15,
                padding: '10px 20px',
                background: 'rgba(100, 116, 139, 0.6)',
                border: '2px solid rgba(148, 163, 184, 0.3)',
                borderRadius: 10,
                color: '#fff',
                fontSize: 14,
                fontWeight: 600,
                cursor: 'pointer'
              }}
            >
              🔄 Try Again
            </motion.button>
          </motion.div>
        )}
      </div>
    </div>
  );
}
